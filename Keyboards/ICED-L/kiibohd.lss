
kiibohd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000cdd0  00002000  00002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .usbdescriptortable 00000120  1fff8000  1fff8000  00018000  2**2
                  ALLOC
  2 .dmabuffers   00000000  1fff8120  1fff8120  00011184  2**0
                  CONTENTS
  3 .usbbuffers   00000870  1fff8120  1fff8120  00018000  2**0
                  ALLOC
  4 .data         000007f4  1fff8990  0000edd0  00010990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001310  1fff9184  0000f5c4  00011184  2**2
                  ALLOC
  6 .debug_info   0001150b  00000000  00000000  00011184  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000303f  00000000  00000000  0002268f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000008e8  00000000  00000000  000256ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000bb8  00000000  00000000  00025fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00009d1f  00000000  00000000  00026b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006f5b  00000000  00000000  0003088d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00027ba4  00000000  00000000  000377e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000070  00000000  00000000  0005f38c  2**0
                  CONTENTS, READONLY
 14 .ARM.attributes 00000033  00000000  00000000  0005f3fc  2**0
                  CONTENTS, READONLY
 15 .debug_frame  0000195c  00000000  00000000  0005f430  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00006c7e  00000000  00000000  00060d8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <gVectors>:
    2000:	00 80 00 20 bd 21 00 00 81 24 00 00 8d 24 00 00     ... .!...$...$..
    2010:	c1 24 00 00 01 25 00 00 41 25 00 00 3d 24 00 00     .$...%..A%..=$..
    2020:	3d 24 00 00 3d 24 00 00 3d 24 00 00 79 24 00 00     =$..=$..=$..y$..
    2030:	79 24 00 00 3d 24 00 00 79 24 00 00 2d 24 00 00     y$..=$..y$..-$..
    2040:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2050:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2060:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2070:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2080:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2090:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    20a0:	19 27 00 00 79 24 00 00 79 24 00 00 79 24 00 00     .'..y$..y$..y$..
    20b0:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    20c0:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    20d0:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    20e0:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    20f0:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2100:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2110:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2120:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2130:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2140:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2150:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2160:	79 24 00 00 91 65 00 00 79 24 00 00 79 24 00 00     y$...e..y$..y$..
    2170:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2180:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    2190:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    21a0:	79 24 00 00 79 24 00 00 79 24 00 00 79 24 00 00     y$..y$..y$..y$..
    21b0:	79 24 00 00 79 24 00 00 79 24 00 00                 y$..y$..y$..

000021bc <ResetHandler>:

// ----- Chip Entry Point -----

__attribute__ ((section(".startup")))
void ResetHandler()
{
    21bc:	b508      	push	{r3, lr}
		SCB_VTOR = addr; // relocate vector table
		jump_to_app( addr );
	}
#endif
	// Disable Watchdog
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
    21be:	4b3e      	ldr	r3, [pc, #248]	; (22b8 <ResetHandler+0xfc>)
    21c0:	f24c 5220 	movw	r2, #50464	; 0xc520
    21c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
    21c6:	f64d 1228 	movw	r2, #55592	; 0xd928
    21ca:	801a      	strh	r2, [r3, #0]
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    21cc:	2210      	movs	r2, #16
    21ce:	f823 2c0e 	strh.w	r2, [r3, #-14]

	uint32_t *src = (uint32_t*)&_etext;
	uint32_t *dest = (uint32_t*)&_sdata;

	// Enable clocks to always-used peripherals
	SIM_SCGC5 = 0x00043F82; // Clocks active to all GPIO
    21d2:	f5a3 431f 	sub.w	r3, r3, #40704	; 0x9f00
    21d6:	3bd6      	subs	r3, #214	; 0xd6
    21d8:	4a38      	ldr	r2, [pc, #224]	; (22bc <ResetHandler+0x100>)
    21da:	601a      	str	r2, [r3, #0]
	SIM_SCGC6 = SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
    21dc:	4a38      	ldr	r2, [pc, #224]	; (22c0 <ResetHandler+0x104>)
    21de:	605a      	str	r2, [r3, #4]
#if defined(_mk20dx128_)
	SIM_SCGC6 |= SIM_SCGC6_RTC;
#elif defined(_mk20dx256_) || defined(_mk20dx256vlh7_)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
    21e0:	4a38      	ldr	r2, [pc, #224]	; (22c4 <ResetHandler+0x108>)
    21e2:	f04f 6110 	mov.w	r1, #150994944	; 0x9000000
    21e6:	6011      	str	r1, [r2, #0]
	SIM_SCGC6 |= SIM_SCGC6_RTC;
    21e8:	685a      	ldr	r2, [r3, #4]
    21ea:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    21ee:	605a      	str	r2, [r3, #4]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// release I/O pins hold, if we woke up from VLLS mode
	if ( PMC_REGSC & PMC_REGSC_ACKISO )
    21f0:	f503 3353 	add.w	r3, r3, #216064	; 0x34c00
    21f4:	f203 33ca 	addw	r3, r3, #970	; 0x3ca
    21f8:	781a      	ldrb	r2, [r3, #0]
    21fa:	0711      	lsls	r1, r2, #28
	{
		PMC_REGSC |= PMC_REGSC_ACKISO;
    21fc:	bf42      	ittt	mi
    21fe:	781a      	ldrbmi	r2, [r3, #0]
    2200:	f042 0208 	orrmi.w	r2, r2, #8
    2204:	701a      	strbmi	r2, [r3, #0]
    2206:	4a30      	ldr	r2, [pc, #192]	; (22c8 <ResetHandler+0x10c>)
    2208:	4b30      	ldr	r3, [pc, #192]	; (22cc <ResetHandler+0x110>)
	}

	// Prepare RAM
	while ( dest < (uint32_t*)&_edata ) *dest++ = *src++;
    220a:	4931      	ldr	r1, [pc, #196]	; (22d0 <ResetHandler+0x114>)
    220c:	428b      	cmp	r3, r1
    220e:	d204      	bcs.n	221a <ResetHandler+0x5e>
    2210:	f852 1f04 	ldr.w	r1, [r2, #4]!
    2214:	f843 1b04 	str.w	r1, [r3], #4
    2218:	e7f7      	b.n	220a <ResetHandler+0x4e>
    221a:	4b2e      	ldr	r3, [pc, #184]	; (22d4 <ResetHandler+0x118>)
	dest = (uint32_t*)&_sbss;
	while ( dest < (uint32_t*)&_ebss ) *dest++ = 0;
    221c:	4a2e      	ldr	r2, [pc, #184]	; (22d8 <ResetHandler+0x11c>)
    221e:	4293      	cmp	r3, r2
    2220:	d203      	bcs.n	222a <ResetHandler+0x6e>
    2222:	2200      	movs	r2, #0
    2224:	f843 2b04 	str.w	r2, [r3], #4
    2228:	e7f8      	b.n	221c <ResetHandler+0x60>
    222a:	4b2c      	ldr	r3, [pc, #176]	; (22dc <ResetHandler+0x120>)
#endif

	// default all interrupts to medium priority level
	for ( unsigned int i = 0; i < NVIC_NUM_INTERRUPTS; i++ )
	{
		NVIC_SET_PRIORITY( i, 128 );
    222c:	2280      	movs	r2, #128	; 0x80
    222e:	f803 2b01 	strb.w	r2, [r3], #1
	// use vector table in flash
	SCB_VTOR = 0;
#endif

	// default all interrupts to medium priority level
	for ( unsigned int i = 0; i < NVIC_NUM_INTERRUPTS; i++ )
    2232:	4a2b      	ldr	r2, [pc, #172]	; (22e0 <ResetHandler+0x124>)
    2234:	4293      	cmp	r3, r2
    2236:	d1f9      	bne.n	222c <ResetHandler+0x70>
		NVIC_SET_PRIORITY( i, 128 );
	}

	// start in FEI mode
	// enable capacitors for crystal
	OSC0_CR = OSC_SC8P | OSC_SC2P;
    2238:	4b2a      	ldr	r3, [pc, #168]	; (22e4 <ResetHandler+0x128>)
    223a:	220a      	movs	r2, #10
    223c:	701a      	strb	r2, [r3, #0]

	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0( 2 ) | MCG_C2_EREFS;
    223e:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
    2242:	2224      	movs	r2, #36	; 0x24
    2244:	701a      	strb	r2, [r3, #0]

	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS( 2 ) | MCG_C1_FRDIV( 4 );
    2246:	22a0      	movs	r2, #160	; 0xa0
    2248:	f803 2c01 	strb.w	r2, [r3, #-1]

	// wait for crystal oscillator to begin
	while ( (MCG_S & MCG_S_OSCINIT0) == 0 );
    224c:	4b26      	ldr	r3, [pc, #152]	; (22e8 <ResetHandler+0x12c>)
    224e:	781a      	ldrb	r2, [r3, #0]
    2250:	0792      	lsls	r2, r2, #30
    2252:	d5fb      	bpl.n	224c <ResetHandler+0x90>

	// wait for FLL to use oscillator
	while ( (MCG_S & MCG_S_IREFST) != 0 );
    2254:	781a      	ldrb	r2, [r3, #0]
    2256:	06d0      	lsls	r0, r2, #27
    2258:	d4fc      	bmi.n	2254 <ResetHandler+0x98>

	// wait for MCGOUT to use oscillator
	while ( (MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST( 2 ) );
    225a:	781a      	ldrb	r2, [r3, #0]
    225c:	f002 020c 	and.w	r2, r2, #12
    2260:	2a08      	cmp	r2, #8
    2262:	d1fa      	bne.n	225a <ResetHandler+0x9e>

	// now we're in FBE mode
#if F_CPU == 72000000
	// config PLL input for 16 MHz Crystal / 8 = 2 MHz
	MCG_C5 = MCG_C5_PRDIV0( 7 );
    2264:	4b21      	ldr	r3, [pc, #132]	; (22ec <ResetHandler+0x130>)
    2266:	2207      	movs	r2, #7
    2268:	701a      	strb	r2, [r3, #0]
	MCG_C5 = MCG_C5_PRDIV0( 3 );
#endif

#if F_CPU == 72000000
	// config PLL for 72 MHz output (36 * 2 MHz Ext PLL)
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0( 12 );
    226a:	224c      	movs	r2, #76	; 0x4c
    226c:	705a      	strb	r2, [r3, #1]
	// config PLL for 96 MHz output
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0( 0 );
#endif

	// wait for PLL to start using xtal as its input
	while ( !(MCG_S & MCG_S_PLLST) );
    226e:	4b1e      	ldr	r3, [pc, #120]	; (22e8 <ResetHandler+0x12c>)
    2270:	781a      	ldrb	r2, [r3, #0]
    2272:	0691      	lsls	r1, r2, #26
    2274:	d5fb      	bpl.n	226e <ResetHandler+0xb2>

	// wait for PLL to lock
	while ( !(MCG_S & MCG_S_LOCK0) );
    2276:	781a      	ldrb	r2, [r3, #0]
    2278:	0652      	lsls	r2, r2, #25
    227a:	d5fc      	bpl.n	2276 <ResetHandler+0xba>
#if F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1( 0 ) | SIM_CLKDIV1_OUTDIV2( 1 ) | SIM_CLKDIV1_OUTDIV4( 3 );
#elif F_CPU == 72000000
	// config divisors: 72 MHz core, 36 MHz bus, 24 MHz flash
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1( 0 ) | SIM_CLKDIV1_OUTDIV2( 1 ) | SIM_CLKDIV1_OUTDIV4( 2 );
    227c:	4b1c      	ldr	r3, [pc, #112]	; (22f0 <ResetHandler+0x134>)
    227e:	f04f 7281 	mov.w	r2, #16908288	; 0x1020000
    2282:	601a      	str	r2, [r3, #0]
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1( 3 ) | SIM_CLKDIV1_OUTDIV2( 3 ) | SIM_CLKDIV1_OUTDIV4( 3 );
#else
#error "Error, F_CPU must be 96000000, 72000000, 48000000, or 24000000"
#endif
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS( 0 ) | MCG_C1_FRDIV( 4 );
    2284:	4b1b      	ldr	r3, [pc, #108]	; (22f4 <ResetHandler+0x138>)
    2286:	2220      	movs	r2, #32
    2288:	701a      	strb	r2, [r3, #0]

	// wait for PLL clock to be used
	while ( (MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST( 3 ) );
    228a:	4b17      	ldr	r3, [pc, #92]	; (22e8 <ResetHandler+0x12c>)
    228c:	781b      	ldrb	r3, [r3, #0]
    228e:	f003 030c 	and.w	r3, r3, #12
    2292:	2b0c      	cmp	r3, #12
    2294:	d1f9      	bne.n	228a <ResetHandler+0xce>

	// now we're in PEE mode
#if F_CPU == 72000000
	// configure USB for 48 MHz clock
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV( 2 ) | SIM_CLKDIV2_USBFRAC; // USB = 72 MHz PLL / 1.5
    2296:	4b18      	ldr	r3, [pc, #96]	; (22f8 <ResetHandler+0x13c>)
    2298:	2205      	movs	r2, #5
    229a:	601a      	str	r2, [r3, #0]
	// configure USB for 48 MHz clock
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV( 1 ); // USB = 96 MHz PLL / 2
#endif

	// USB uses PLL clock, trace is CPU clock, CLKOUT=OSCERCLK0
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL( 6 );
    229c:	4a17      	ldr	r2, [pc, #92]	; (22fc <ResetHandler+0x140>)
    229e:	f843 2c44 	str.w	r2, [r3, #-68]

#endif

#if !defined(_bootloader_)
	// Initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
    22a2:	4b17      	ldr	r3, [pc, #92]	; (2300 <ResetHandler+0x144>)
    22a4:	4a17      	ldr	r2, [pc, #92]	; (2304 <ResetHandler+0x148>)
    22a6:	601a      	str	r2, [r3, #0]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
    22a8:	2207      	movs	r2, #7
    22aa:	f843 2c04 	str.w	r2, [r3, #-4]

	__enable_irq();
    22ae:	b662      	cpsie	i
#else
	// Disable Watchdog for bootloader
	WDOG_STCTRLH &= ~WDOG_STCTRLH_WDOGEN;
#endif

	main();
    22b0:	f000 f8a6 	bl	2400 <main>
	while ( 1 ); // Shouldn't get here...
    22b4:	e7fe      	b.n	22b4 <ResetHandler+0xf8>
    22b6:	bf00      	nop
    22b8:	4005200e 	.word	0x4005200e
    22bc:	00043f82 	.word	0x00043f82
    22c0:	0b000001 	.word	0x0b000001
    22c4:	40048030 	.word	0x40048030
    22c8:	0000edcc 	.word	0x0000edcc
    22cc:	1fff8990 	.word	0x1fff8990
    22d0:	1fff9184 	.word	0x1fff9184
    22d4:	1fff9184 	.word	0x1fff9184
    22d8:	1fffa494 	.word	0x1fffa494
    22dc:	e000e400 	.word	0xe000e400
    22e0:	e000e45f 	.word	0xe000e45f
    22e4:	40065000 	.word	0x40065000
    22e8:	40064006 	.word	0x40064006
    22ec:	40064004 	.word	0x40064004
    22f0:	40048044 	.word	0x40048044
    22f4:	40064000 	.word	0x40064000
    22f8:	40048048 	.word	0x40048048
    22fc:	000510c0 	.word	0x000510c0
    2300:	e000e014 	.word	0xe000e014
    2304:	0001193f 	.word	0x0001193f
    2308:	00000000 	.word	0x00000000
    230c:	00000000 	.word	0x00000000
    2310:	00000000 	.word	0x00000000
    2314:	00000000 	.word	0x00000000
    2318:	00000000 	.word	0x00000000
    231c:	00000000 	.word	0x00000000
    2320:	00000000 	.word	0x00000000
    2324:	00000000 	.word	0x00000000
    2328:	00000000 	.word	0x00000000
    232c:	00000000 	.word	0x00000000
    2330:	00000000 	.word	0x00000000
    2334:	00000000 	.word	0x00000000
    2338:	00000000 	.word	0x00000000
    233c:	00000000 	.word	0x00000000
    2340:	00000000 	.word	0x00000000
    2344:	00000000 	.word	0x00000000
    2348:	00000000 	.word	0x00000000
    234c:	00000000 	.word	0x00000000
    2350:	00000000 	.word	0x00000000
    2354:	00000000 	.word	0x00000000
    2358:	00000000 	.word	0x00000000
    235c:	00000000 	.word	0x00000000
    2360:	00000000 	.word	0x00000000
    2364:	00000000 	.word	0x00000000
    2368:	00000000 	.word	0x00000000
    236c:	00000000 	.word	0x00000000
    2370:	00000000 	.word	0x00000000
    2374:	00000000 	.word	0x00000000
    2378:	00000000 	.word	0x00000000
    237c:	00000000 	.word	0x00000000
    2380:	00000000 	.word	0x00000000
    2384:	00000000 	.word	0x00000000
    2388:	00000000 	.word	0x00000000
    238c:	00000000 	.word	0x00000000
    2390:	00000000 	.word	0x00000000
    2394:	00000000 	.word	0x00000000
    2398:	00000000 	.word	0x00000000
    239c:	00000000 	.word	0x00000000
    23a0:	00000000 	.word	0x00000000
    23a4:	00000000 	.word	0x00000000
    23a8:	00000000 	.word	0x00000000
    23ac:	00000000 	.word	0x00000000
    23b0:	00000000 	.word	0x00000000
    23b4:	00000000 	.word	0x00000000
    23b8:	00000000 	.word	0x00000000
    23bc:	00000000 	.word	0x00000000
    23c0:	00000000 	.word	0x00000000
    23c4:	00000000 	.word	0x00000000
    23c8:	00000000 	.word	0x00000000
    23cc:	00000000 	.word	0x00000000
    23d0:	00000000 	.word	0x00000000
    23d4:	00000000 	.word	0x00000000
    23d8:	00000000 	.word	0x00000000
    23dc:	00000000 	.word	0x00000000
    23e0:	00000000 	.word	0x00000000
    23e4:	00000000 	.word	0x00000000
    23e8:	00000000 	.word	0x00000000
    23ec:	00000000 	.word	0x00000000
    23f0:	00000000 	.word	0x00000000
    23f4:	00000000 	.word	0x00000000
    23f8:	00000000 	.word	0x00000000
    23fc:	00000000 	.word	0x00000000

00002400 <main>:


// ----- Functions -----

int main()
{
    2400:	b508      	push	{r3, lr}
	CLKPR = 0x80;
	CLKPR = 0x00;
#endif

	// Enable CLI
	CLI_init();
    2402:	f005 f999 	bl	7738 <CLI_init>

	// Setup Modules
	Output_setup();
    2406:	f003 ff27 	bl	6258 <Output_setup>
	Macro_setup();
    240a:	f003 f92b 	bl	5664 <Macro_setup>
	Scan_setup();
    240e:	f002 fba1 	bl	4b54 <Scan_setup>

	// Main Detection Loop
	while ( 1 )
	{
		// Process CLI
		CLI_process();
    2412:	f005 fa89 	bl	7928 <CLI_process>

		// Acquire Key Indices
		// Loop continuously until scan_loop returns 0
		cli();
    2416:	b672      	cpsid	i
		while ( Scan_loop() );
    2418:	f002 fbb0 	bl	4b7c <Scan_loop>
    241c:	2800      	cmp	r0, #0
    241e:	d1fb      	bne.n	2418 <main+0x18>
		sei();
    2420:	b662      	cpsie	i

		// Run Macros over Key Indices and convert to USB Keys
		Macro_process();
    2422:	f003 f8a5 	bl	5570 <Macro_process>

		// Sends USB data only if changed
		Output_send();
    2426:	f003 ff27 	bl	6278 <Output_send>
	}
    242a:	e7f2      	b.n	2412 <main+0x12>

0000242c <systick_default_isr>:

// NVIC - SysTick ISR
extern volatile uint32_t systick_millis_count;
void systick_default_isr()
{
	systick_millis_count++;
    242c:	4a02      	ldr	r2, [pc, #8]	; (2438 <systick_default_isr+0xc>)
    242e:	6813      	ldr	r3, [r2, #0]
    2430:	3301      	adds	r3, #1
    2432:	6013      	str	r3, [r2, #0]
    2434:	4770      	bx	lr
    2436:	bf00      	nop
    2438:	1fff9184 	.word	0x1fff9184

0000243c <fault_isr>:

// ----- Interrupts -----

// NVIC - Default ISR
void fault_isr()
{
    243c:	b508      	push	{r3, lr}
	print("Fault!" NL );
    243e:	480c      	ldr	r0, [pc, #48]	; (2470 <fault_isr+0x34>)
    2440:	f005 fbb2 	bl	7ba8 <_print>
	while ( 1 )
	{
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if ( SIM_SCGC4 & SIM_SCGC4_USBOTG ) usb_isr();
    2444:	4c0b      	ldr	r4, [pc, #44]	; (2474 <fault_isr+0x38>)
    2446:	6823      	ldr	r3, [r4, #0]
    2448:	0358      	lsls	r0, r3, #13
    244a:	d501      	bpl.n	2450 <fault_isr+0x14>
    244c:	f004 f8a0 	bl	6590 <usb_isr>
		if ( SIM_SCGC4 & SIM_SCGC4_UART0 )  uart0_status_isr();
    2450:	6823      	ldr	r3, [r4, #0]
    2452:	0559      	lsls	r1, r3, #21
    2454:	d501      	bpl.n	245a <fault_isr+0x1e>
    2456:	f000 f80f 	bl	2478 <unused_isr>
		if ( SIM_SCGC4 & SIM_SCGC4_UART1 )  uart1_status_isr();
    245a:	6823      	ldr	r3, [r4, #0]
    245c:	051a      	lsls	r2, r3, #20
    245e:	d501      	bpl.n	2464 <fault_isr+0x28>
    2460:	f000 f80a 	bl	2478 <unused_isr>
		if ( SIM_SCGC4 & SIM_SCGC4_UART2 )  uart2_status_isr();
    2464:	6823      	ldr	r3, [r4, #0]
    2466:	04db      	lsls	r3, r3, #19
    2468:	d5ec      	bpl.n	2444 <fault_isr+0x8>
    246a:	f000 f805 	bl	2478 <unused_isr>
    246e:	e7e9      	b.n	2444 <fault_isr+0x8>
    2470:	00009190 	.word	0x00009190
    2474:	40048034 	.word	0x40048034

00002478 <unused_isr>:
	}
}

void unused_isr()
{
    2478:	b508      	push	{r3, lr}
	fault_isr();
    247a:	f7ff ffdf 	bl	243c <fault_isr>
    247e:	0000      	movs	r0, r0

00002480 <nmi_default_isr>:


// NVIC - Non-Maskable Interrupt ISR
void nmi_default_isr()
{
	print("NMI!" NL );
    2480:	4801      	ldr	r0, [pc, #4]	; (2488 <nmi_default_isr+0x8>)
    2482:	f005 bb91 	b.w	7ba8 <_print>
    2486:	bf00      	nop
    2488:	00007e20 	.word	0x00007e20

0000248c <hard_fault_default_isr>:
}


// NVIC - Hard Fault ISR
void hard_fault_default_isr()
{
    248c:	b508      	push	{r3, lr}
	print("Hard Fault! SCB_HFSR: ");
    248e:	4807      	ldr	r0, [pc, #28]	; (24ac <hard_fault_default_isr+0x20>)
    2490:	f005 fb8a 	bl	7ba8 <_print>
	printHex32( SCB_HFSR );
    2494:	4b06      	ldr	r3, [pc, #24]	; (24b0 <hard_fault_default_isr+0x24>)
    2496:	2101      	movs	r1, #1
    2498:	6818      	ldr	r0, [r3, #0]
    249a:	f005 fc5f 	bl	7d5c <printHex32_op>
	print( NL );
    249e:	4805      	ldr	r0, [pc, #20]	; (24b4 <hard_fault_default_isr+0x28>)
    24a0:	f005 fb82 	bl	7ba8 <_print>
	SOFTWARE_RESET();
    24a4:	4b04      	ldr	r3, [pc, #16]	; (24b8 <hard_fault_default_isr+0x2c>)
    24a6:	4a05      	ldr	r2, [pc, #20]	; (24bc <hard_fault_default_isr+0x30>)
    24a8:	601a      	str	r2, [r3, #0]
    24aa:	bd08      	pop	{r3, pc}
    24ac:	00007e27 	.word	0x00007e27
    24b0:	e000ed2c 	.word	0xe000ed2c
    24b4:	0000bc21 	.word	0x0000bc21
    24b8:	e000ed0c 	.word	0xe000ed0c
    24bc:	05fa0004 	.word	0x05fa0004

000024c0 <memmanage_fault_default_isr>:
}


// NVIC - Memory Manager Fault ISR
void memmanage_fault_default_isr()
{
    24c0:	b508      	push	{r3, lr}
	print("Memory Manager Fault! SCB_CFSR: ");
    24c2:	480a      	ldr	r0, [pc, #40]	; (24ec <memmanage_fault_default_isr+0x2c>)
    24c4:	f005 fb70 	bl	7ba8 <_print>
	printHex32( SCB_CFSR );
    24c8:	4b09      	ldr	r3, [pc, #36]	; (24f0 <memmanage_fault_default_isr+0x30>)
    24ca:	2101      	movs	r1, #1
    24cc:	6818      	ldr	r0, [r3, #0]
    24ce:	f005 fc45 	bl	7d5c <printHex32_op>
	print(" SCB_MMAR: ");
    24d2:	4808      	ldr	r0, [pc, #32]	; (24f4 <memmanage_fault_default_isr+0x34>)
    24d4:	f005 fb68 	bl	7ba8 <_print>
	printHex32( SCB_MMAR );
    24d8:	4b07      	ldr	r3, [pc, #28]	; (24f8 <memmanage_fault_default_isr+0x38>)
    24da:	2101      	movs	r1, #1
    24dc:	6818      	ldr	r0, [r3, #0]
    24de:	f005 fc3d 	bl	7d5c <printHex32_op>
	print( NL );
    24e2:	4806      	ldr	r0, [pc, #24]	; (24fc <memmanage_fault_default_isr+0x3c>)
}
    24e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	print("Memory Manager Fault! SCB_CFSR: ");
	printHex32( SCB_CFSR );
	print(" SCB_MMAR: ");
	printHex32( SCB_MMAR );
	print( NL );
    24e8:	f005 bb5e 	b.w	7ba8 <_print>
    24ec:	00007e3e 	.word	0x00007e3e
    24f0:	e000ed28 	.word	0xe000ed28
    24f4:	00007e5f 	.word	0x00007e5f
    24f8:	e000ed34 	.word	0xe000ed34
    24fc:	0000bc21 	.word	0x0000bc21

00002500 <bus_fault_default_isr>:
}


// NVIC - Bus Fault ISR
void bus_fault_default_isr()
{
    2500:	b508      	push	{r3, lr}
	print("Bus Fault! SCB_CFSR: ");
    2502:	480a      	ldr	r0, [pc, #40]	; (252c <bus_fault_default_isr+0x2c>)
    2504:	f005 fb50 	bl	7ba8 <_print>
	printHex32( SCB_CFSR );
    2508:	4b09      	ldr	r3, [pc, #36]	; (2530 <bus_fault_default_isr+0x30>)
    250a:	2101      	movs	r1, #1
    250c:	6818      	ldr	r0, [r3, #0]
    250e:	f005 fc25 	bl	7d5c <printHex32_op>
	print(" SCB_BFAR: ");
    2512:	4808      	ldr	r0, [pc, #32]	; (2534 <bus_fault_default_isr+0x34>)
    2514:	f005 fb48 	bl	7ba8 <_print>
	printHex32( SCB_BFAR );
    2518:	4b07      	ldr	r3, [pc, #28]	; (2538 <bus_fault_default_isr+0x38>)
    251a:	2101      	movs	r1, #1
    251c:	6818      	ldr	r0, [r3, #0]
    251e:	f005 fc1d 	bl	7d5c <printHex32_op>
	print( NL );
    2522:	4806      	ldr	r0, [pc, #24]	; (253c <bus_fault_default_isr+0x3c>)
}
    2524:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	print("Bus Fault! SCB_CFSR: ");
	printHex32( SCB_CFSR );
	print(" SCB_BFAR: ");
	printHex32( SCB_BFAR );
	print( NL );
    2528:	f005 bb3e 	b.w	7ba8 <_print>
    252c:	00007e6b 	.word	0x00007e6b
    2530:	e000ed28 	.word	0xe000ed28
    2534:	00007e81 	.word	0x00007e81
    2538:	e000ed38 	.word	0xe000ed38
    253c:	0000bc21 	.word	0x0000bc21

00002540 <usage_fault_default_isr>:
}


// NVIC - Usage Fault ISR
void usage_fault_default_isr()
{
    2540:	b508      	push	{r3, lr}
	print("Usage Fault! SCB_CFSR: ");
    2542:	4806      	ldr	r0, [pc, #24]	; (255c <usage_fault_default_isr+0x1c>)
    2544:	f005 fb30 	bl	7ba8 <_print>
	printHex32( SCB_CFSR );
    2548:	4b05      	ldr	r3, [pc, #20]	; (2560 <usage_fault_default_isr+0x20>)
    254a:	2101      	movs	r1, #1
    254c:	6818      	ldr	r0, [r3, #0]
    254e:	f005 fc05 	bl	7d5c <printHex32_op>
	print( NL );
    2552:	4804      	ldr	r0, [pc, #16]	; (2564 <usage_fault_default_isr+0x24>)
}
    2554:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// NVIC - Usage Fault ISR
void usage_fault_default_isr()
{
	print("Usage Fault! SCB_CFSR: ");
	printHex32( SCB_CFSR );
	print( NL );
    2558:	f005 bb26 	b.w	7ba8 <_print>
    255c:	00007e8d 	.word	0x00007e8d
    2560:	e000ed28 	.word	0xe000ed28
    2564:	0000bc21 	.word	0x0000bc21

00002568 <memset>:
	__builtin_unreachable();
}
#endif

void *memset( void *addr, int val, unsigned int len )
{
    2568:	4402      	add	r2, r0
	char *buf = addr;
    256a:	4603      	mov	r3, r0

	for (; len > 0; --len, ++buf)
    256c:	4293      	cmp	r3, r2
    256e:	d002      	beq.n	2576 <memset+0xe>
		*buf = val;
    2570:	f803 1b01 	strb.w	r1, [r3], #1
    2574:	e7fa      	b.n	256c <memset+0x4>
	return (addr);
}
    2576:	4770      	bx	lr

00002578 <memcpy>:
		/* NOTHING */;
	return (val);
}

void *memcpy( void *dst, const void *src, unsigned int len )
{
    2578:	b510      	push	{r4, lr}
    257a:	3901      	subs	r1, #1
    257c:	4402      	add	r2, r0
	char *dstbuf = dst;
    257e:	4603      	mov	r3, r0
	const char *srcbuf = src;

	for (; len > 0; --len, ++dstbuf, ++srcbuf)
    2580:	4293      	cmp	r3, r2
    2582:	d004      	beq.n	258e <memcpy+0x16>
		*dstbuf = *srcbuf;
    2584:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    2588:	f803 4b01 	strb.w	r4, [r3], #1
    258c:	e7f8      	b.n	2580 <memcpy+0x8>
	return (dst);
}
    258e:	bd10      	pop	{r4, pc}

00002590 <yield>:



// ----- Functions -----

void yield(void) {};
    2590:	4770      	bx	lr
    2592:	0000      	movs	r0, r0

00002594 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2594:	b672      	cpsid	i
	current = SYST_CVR;
    2596:	4b0c      	ldr	r3, [pc, #48]	; (25c8 <micros+0x34>)
	count = systick_millis_count;
    2598:	4a0c      	ldr	r2, [pc, #48]	; (25cc <micros+0x38>)
	istatus = SCB_ICSR; // bit 26 indicates if systick exception pending
    259a:	490d      	ldr	r1, [pc, #52]	; (25d0 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    259c:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    259e:	6812      	ldr	r2, [r2, #0]
	istatus = SCB_ICSR; // bit 26 indicates if systick exception pending
    25a0:	6809      	ldr	r1, [r1, #0]
	__enable_irq();
    25a2:	b662      	cpsie	i
	if ((istatus & SCB_ICSR_PENDSTSET) && current > ((F_CPU / 1000) - 50)) count++;
    25a4:	0149      	lsls	r1, r1, #5
    25a6:	d503      	bpl.n	25b0 <micros+0x1c>
    25a8:	490a      	ldr	r1, [pc, #40]	; (25d4 <micros+0x40>)
    25aa:	428b      	cmp	r3, r1
    25ac:	bf88      	it	hi
    25ae:	3201      	addhi	r2, #1
	current = ((F_CPU / 1000) - 1) - current;
    25b0:	f5c3 338c 	rsb	r3, r3, #71680	; 0x11800
	return count * 1000 + current / (F_CPU / 1000000);
    25b4:	2048      	movs	r0, #72	; 0x48
	current = SYST_CVR;
	count = systick_millis_count;
	istatus = SCB_ICSR; // bit 26 indicates if systick exception pending
	__enable_irq();
	if ((istatus & SCB_ICSR_PENDSTSET) && current > ((F_CPU / 1000) - 50)) count++;
	current = ((F_CPU / 1000) - 1) - current;
    25b6:	f203 133f 	addw	r3, r3, #319	; 0x13f
	return count * 1000 + current / (F_CPU / 1000000);
    25ba:	fbb3 f3f0 	udiv	r3, r3, r0
}
    25be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    25c2:	fb00 3002 	mla	r0, r0, r2, r3
    25c6:	4770      	bx	lr
    25c8:	e000e018 	.word	0xe000e018
    25cc:	1fff9184 	.word	0x1fff9184
    25d0:	e000ed04 	.word	0xe000ed04
    25d4:	0001190e 	.word	0x0001190e

000025d8 <delay>:

void delay(uint32_t ms)
{
    25d8:	b538      	push	{r3, r4, r5, lr}
    25da:	4605      	mov	r5, r0
	uint32_t start = micros();
    25dc:	f7ff ffda 	bl	2594 <micros>
    25e0:	4604      	mov	r4, r0

	while (1) {
		if ((micros() - start) >= 1000) {
    25e2:	f7ff ffd7 	bl	2594 <micros>
    25e6:	1b00      	subs	r0, r0, r4
    25e8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    25ec:	d303      	bcc.n	25f6 <delay+0x1e>
			ms--;
			if (ms == 0) break;
    25ee:	3d01      	subs	r5, #1
    25f0:	d004      	beq.n	25fc <delay+0x24>
			start += 1000;
    25f2:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
		}
		yield();
    25f6:	f7ff ffcb 	bl	2590 <yield>
	}
    25fa:	e7f2      	b.n	25e2 <delay+0xa>
    25fc:	bd38      	pop	{r3, r4, r5, pc}

000025fe <I2C_BufferLen>:


inline uint16_t I2C_BufferLen( I2C_Buffer *buffer )
{
	// Tail >= Head
	if ( buffer->tail >= buffer->head )
    25fe:	8803      	ldrh	r3, [r0, #0]
    2600:	8841      	ldrh	r1, [r0, #2]
    2602:	4299      	cmp	r1, r3
		return buffer->head + buffer->size - buffer->tail;
    2604:	bf23      	ittte	cs
    2606:	88c2      	ldrhcs	r2, [r0, #6]
    2608:	18d2      	addcs	r2, r2, r3
    260a:	1a50      	subcs	r0, r2, r1

	// Head > Tail
	return buffer->head - buffer->tail;
    260c:	1a58      	subcc	r0, r3, r1
    260e:	b280      	uxth	r0, r0
}
    2610:	4770      	bx	lr
    2612:	0000      	movs	r0, r0

00002614 <I2C_BufferPush>:


void I2C_BufferPush( uint8_t byte, I2C_Buffer *buffer )
{
    2614:	b570      	push	{r4, r5, r6, lr}
    2616:	4605      	mov	r5, r0
    2618:	460c      	mov	r4, r1
	dbug_msg("DATA: ");
    261a:	4813      	ldr	r0, [pc, #76]	; (2668 <I2C_BufferPush+0x54>)
	printHex( byte );
    261c:	b2ae      	uxth	r6, r5
}


void I2C_BufferPush( uint8_t byte, I2C_Buffer *buffer )
{
	dbug_msg("DATA: ");
    261e:	f005 fac3 	bl	7ba8 <_print>
	printHex( byte );
    2622:	2101      	movs	r1, #1
    2624:	4630      	mov	r0, r6
    2626:	f005 fb61 	bl	7cec <printHex_op>

	// Make sure buffer isn't full
	if ( buffer->tail + 1 == buffer->head || ( buffer->head > buffer->tail && buffer->tail + 1 - buffer->size == buffer->head ) )
    262a:	8861      	ldrh	r1, [r4, #2]
    262c:	8822      	ldrh	r2, [r4, #0]
    262e:	1c4b      	adds	r3, r1, #1
    2630:	4293      	cmp	r3, r2
    2632:	d005      	beq.n	2640 <I2C_BufferPush+0x2c>
    2634:	428a      	cmp	r2, r1
    2636:	88e1      	ldrh	r1, [r4, #6]
    2638:	d90e      	bls.n	2658 <I2C_BufferPush+0x44>
    263a:	1a58      	subs	r0, r3, r1
    263c:	4290      	cmp	r0, r2
    263e:	d10b      	bne.n	2658 <I2C_BufferPush+0x44>
	{
		warn_msg("I2C_BufferPush failed, buffer full: ");
    2640:	480a      	ldr	r0, [pc, #40]	; (266c <I2C_BufferPush+0x58>)
    2642:	f005 fab1 	bl	7ba8 <_print>
		printHex( byte );
    2646:	4630      	mov	r0, r6
    2648:	2101      	movs	r1, #1
    264a:	f005 fb4f 	bl	7cec <printHex_op>
		print( NL );
    264e:	4808      	ldr	r0, [pc, #32]	; (2670 <I2C_BufferPush+0x5c>)
		buffer->tail++;
	}

	// Add byte to buffer
	buffer->buffer[ buffer->tail ] = byte;
}
    2650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	// Make sure buffer isn't full
	if ( buffer->tail + 1 == buffer->head || ( buffer->head > buffer->tail && buffer->tail + 1 - buffer->size == buffer->head ) )
	{
		warn_msg("I2C_BufferPush failed, buffer full: ");
		printHex( byte );
		print( NL );
    2654:	f005 baa8 	b.w	7ba8 <_print>
		return;
	}

	// Check for wrap-around case
	if ( buffer->tail + 1 >= buffer->size )
    2658:	428b      	cmp	r3, r1
	{
		buffer->tail = 0;
    265a:	bfa8      	it	ge
    265c:	2300      	movge	r3, #0
	}
	// Normal case
	else
	{
		buffer->tail++;
    265e:	8063      	strh	r3, [r4, #2]
	}

	// Add byte to buffer
	buffer->buffer[ buffer->tail ] = byte;
    2660:	8863      	ldrh	r3, [r4, #2]
    2662:	68a2      	ldr	r2, [r4, #8]
    2664:	54d5      	strb	r5, [r2, r3]
    2666:	bd70      	pop	{r4, r5, r6, pc}
    2668:	00007fc5 	.word	0x00007fc5
    266c:	00007fdf 	.word	0x00007fdf
    2670:	0000bc21 	.word	0x0000bc21

00002674 <I2C_TxBufferPop>:
}


uint8_t I2C_TxBufferPop()
{
    2674:	b538      	push	{r3, r4, r5, lr}
	// Return 0xFF if no buffer left (do not rely on this)
	if ( I2C_BufferLen( (I2C_Buffer*)&I2C_TxBuffer ) >= I2C_TxBuffer.size )
    2676:	4d23      	ldr	r5, [pc, #140]	; (2704 <I2C_TxBufferPop+0x90>)
    2678:	4628      	mov	r0, r5
    267a:	f7ff ffc0 	bl	25fe <I2C_BufferLen>
    267e:	88eb      	ldrh	r3, [r5, #6]
    2680:	b29b      	uxth	r3, r3
    2682:	4298      	cmp	r0, r3
    2684:	462c      	mov	r4, r5
    2686:	d31b      	bcc.n	26c0 <I2C_TxBufferPop+0x4c>
	{
		erro_msg("No buffer to pop an entry from... ");
    2688:	481f      	ldr	r0, [pc, #124]	; (2708 <I2C_TxBufferPop+0x94>)
    268a:	f005 fa8d 	bl	7ba8 <_print>
		printHex( I2C_TxBuffer.head );
    268e:	8828      	ldrh	r0, [r5, #0]
    2690:	2101      	movs	r1, #1
    2692:	b280      	uxth	r0, r0
    2694:	f005 fb2a 	bl	7cec <printHex_op>
		print(" ");
    2698:	481c      	ldr	r0, [pc, #112]	; (270c <I2C_TxBufferPop+0x98>)
    269a:	f005 fa85 	bl	7ba8 <_print>
		printHex( I2C_TxBuffer.tail );
    269e:	8868      	ldrh	r0, [r5, #2]
    26a0:	2101      	movs	r1, #1
    26a2:	b280      	uxth	r0, r0
    26a4:	f005 fb22 	bl	7cec <printHex_op>
		print(" ");
    26a8:	4818      	ldr	r0, [pc, #96]	; (270c <I2C_TxBufferPop+0x98>)
    26aa:	f005 fa7d 	bl	7ba8 <_print>
		printHex( I2C_TxBuffer.sequencePos );
    26ae:	7928      	ldrb	r0, [r5, #4]
    26b0:	2101      	movs	r1, #1
    26b2:	f005 fb1b 	bl	7cec <printHex_op>
		print(NL);
    26b6:	4816      	ldr	r0, [pc, #88]	; (2710 <I2C_TxBufferPop+0x9c>)
    26b8:	f005 fa76 	bl	7ba8 <_print>
    26bc:	20ff      	movs	r0, #255	; 0xff
    26be:	bd38      	pop	{r3, r4, r5, pc}
		return 0xFF;
	}

	// If there is currently no sequence being sent, the first entry in the RingBuffer is the length
	if ( I2C_TxBuffer.sequencePos == 0 )
    26c0:	792b      	ldrb	r3, [r5, #4]
    26c2:	b943      	cbnz	r3, 26d6 <I2C_TxBufferPop+0x62>
	{
		I2C_TxBuffer.sequencePos = 0xFF; // So this doesn't become an infinite loop
    26c4:	23ff      	movs	r3, #255	; 0xff
    26c6:	712b      	strb	r3, [r5, #4]
		I2C_RxBuffer.sequencePos = I2C_TxBufferPop();
    26c8:	f7ff ffd4 	bl	2674 <I2C_TxBufferPop>
    26cc:	4b11      	ldr	r3, [pc, #68]	; (2714 <I2C_TxBufferPop+0xa0>)
    26ce:	7118      	strb	r0, [r3, #4]
		I2C_TxBuffer.sequencePos = I2C_TxBufferPop();
    26d0:	f7ff ffd0 	bl	2674 <I2C_TxBufferPop>
    26d4:	7128      	strb	r0, [r5, #4]
	}

	uint8_t data = I2C_TxBuffer.buffer[ I2C_TxBuffer.head ];
    26d6:	68a2      	ldr	r2, [r4, #8]
    26d8:	8823      	ldrh	r3, [r4, #0]
    26da:	b29b      	uxth	r3, r3
    26dc:	5cd0      	ldrb	r0, [r2, r3]

	// Prune head
	I2C_TxBuffer.head++;
    26de:	8823      	ldrh	r3, [r4, #0]
    26e0:	3301      	adds	r3, #1
    26e2:	b29b      	uxth	r3, r3
    26e4:	8023      	strh	r3, [r4, #0]

	// Wrap-around case
	if ( I2C_TxBuffer.head >= I2C_TxBuffer.size )
    26e6:	8822      	ldrh	r2, [r4, #0]
    26e8:	88e3      	ldrh	r3, [r4, #6]
    26ea:	b292      	uxth	r2, r2
    26ec:	b29b      	uxth	r3, r3
    26ee:	429a      	cmp	r2, r3
		I2C_TxBuffer.head = 0;
    26f0:	bf22      	ittt	cs
    26f2:	4b04      	ldrcs	r3, [pc, #16]	; (2704 <I2C_TxBufferPop+0x90>)
    26f4:	2200      	movcs	r2, #0
    26f6:	801a      	strhcs	r2, [r3, #0]

	// Decrement buffer sequence (until next stop will be sent)
	I2C_TxBuffer.sequencePos--;
    26f8:	7923      	ldrb	r3, [r4, #4]
    26fa:	3b01      	subs	r3, #1
    26fc:	b2db      	uxtb	r3, r3
    26fe:	7123      	strb	r3, [r4, #4]
	print(" ");
	printHex( I2C_TxBuffer.sequencePos );
	print(NL);
	*/
	return data;
}
    2700:	bd38      	pop	{r3, r4, r5, pc}
    2702:	bf00      	nop
    2704:	1fff899c 	.word	0x1fff899c
    2708:	00008019 	.word	0x00008019
    270c:	0000852a 	.word	0x0000852a
    2710:	0000bc21 	.word	0x0000bc21
    2714:	1fff8990 	.word	0x1fff8990

00002718 <i2c0_isr>:


// ----- Interrupt Functions -----

void i2c0_isr()
{
    2718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cli(); // Disable Interrupts
    271c:	b672      	cpsid	i

	uint8_t status = I2C0_S; // Read I2C Bus status

	// Master Mode Transmit
	if ( I2C0_C1 & I2C_C1_TX )
    271e:	4e3a      	ldr	r6, [pc, #232]	; (2808 <L_396_delayMicroseconds+0x1e>)

void i2c0_isr()
{
	cli(); // Disable Interrupts

	uint8_t status = I2C0_S; // Read I2C Bus status
    2720:	4c3a      	ldr	r4, [pc, #232]	; (280c <L_396_delayMicroseconds+0x22>)
    2722:	4d3b      	ldr	r5, [pc, #236]	; (2810 <L_396_delayMicroseconds+0x26>)
    2724:	f894 8000 	ldrb.w	r8, [r4]

	// Master Mode Transmit
	if ( I2C0_C1 & I2C_C1_TX )
    2728:	7833      	ldrb	r3, [r6, #0]
    272a:	f013 0f10 	tst.w	r3, #16

void i2c0_isr()
{
	cli(); // Disable Interrupts

	uint8_t status = I2C0_S; // Read I2C Bus status
    272e:	fa5f f888 	uxtb.w	r8, r8
    2732:	4637      	mov	r7, r6
	// Master Mode Transmit
	if ( I2C0_C1 & I2C_C1_TX )
	{
		// Check current use of the I2C bus
		// Currently sending data
		if ( I2C_TxBuffer.sequencePos > 0 )
    2734:	792b      	ldrb	r3, [r5, #4]
	cli(); // Disable Interrupts

	uint8_t status = I2C0_S; // Read I2C Bus status

	// Master Mode Transmit
	if ( I2C0_C1 & I2C_C1_TX )
    2736:	d04e      	beq.n	27d6 <L_339_delayMicroseconds+0x2a>
	{
		// Check current use of the I2C bus
		// Currently sending data
		if ( I2C_TxBuffer.sequencePos > 0 )
    2738:	b163      	cbz	r3, 2754 <i2c0_isr+0x3c>
		{
			// Make sure slave sent an ACK
			if ( status & I2C_S_RXAK )
    273a:	f018 0f01 	tst.w	r8, #1
    273e:	d045      	beq.n	27cc <L_339_delayMicroseconds+0x20>
			{
				// NACK Detected, disable interrupt
				erro_print("I2C NAK detected...");
    2740:	4834      	ldr	r0, [pc, #208]	; (2814 <L_396_delayMicroseconds+0x2a>)
    2742:	f005 fa31 	bl	7ba8 <_print>
				I2C0_C1 = I2C_C1_IICEN;
    2746:	2380      	movs	r3, #128	; 0x80
    2748:	7033      	strb	r3, [r6, #0]

				// Abort Tx Buffer
				I2C_TxBuffer.head = 0;
    274a:	2300      	movs	r3, #0
    274c:	802b      	strh	r3, [r5, #0]
				I2C_TxBuffer.tail = 0;
    274e:	806b      	strh	r3, [r5, #2]
				I2C_TxBuffer.sequencePos = 0;
    2750:	712b      	strb	r3, [r5, #4]
    2752:	e053      	b.n	27fc <L_396_delayMicroseconds+0x12>
				// Transmit byte
				I2C0_D = I2C_TxBufferPop();
			}
		}
		// Receiving data
		else if ( I2C_RxBuffer.sequencePos > 0 )
    2754:	4e30      	ldr	r6, [pc, #192]	; (2818 <L_396_delayMicroseconds+0x2e>)
    2756:	7933      	ldrb	r3, [r6, #4]
    2758:	b313      	cbz	r3, 27a0 <i2c0_isr+0x88>
		{
			// Master Receive, addr sent
			if ( status & I2C_S_ARBL )
    275a:	f018 0f10 	tst.w	r8, #16
    275e:	d006      	beq.n	276e <i2c0_isr+0x56>
			{
				// Arbitration Lost
				erro_print("Arbitration lost...");
    2760:	482e      	ldr	r0, [pc, #184]	; (281c <L_396_delayMicroseconds+0x32>)
    2762:	f005 fa21 	bl	7ba8 <_print>
				// TODO Abort Rx

				I2C0_C1 = I2C_C1_IICEN;
    2766:	2380      	movs	r3, #128	; 0x80
    2768:	703b      	strb	r3, [r7, #0]
				I2C0_S = I2C_S_ARBL | I2C_S_IICIF; // Clear ARBL flag and interrupt
    276a:	2312      	movs	r3, #18
    276c:	7023      	strb	r3, [r4, #0]
			}
			if ( status & I2C_S_RXAK )
    276e:	f018 0f01 	tst.w	r8, #1
    2772:	d004      	beq.n	277e <i2c0_isr+0x66>
			{
				// Slave Address NACK Detected, disable interrupt
				erro_print("Slave Address I2C NAK detected...");
    2774:	482a      	ldr	r0, [pc, #168]	; (2820 <L_396_delayMicroseconds+0x36>)
    2776:	f005 fa17 	bl	7ba8 <_print>
				// TODO Abort Rx

				I2C0_C1 = I2C_C1_IICEN;
    277a:	2380      	movs	r3, #128	; 0x80
    277c:	e00e      	b.n	279c <i2c0_isr+0x84>
			}
			else
			{
				dbug_msg("Attempting to read byte - ");
    277e:	4829      	ldr	r0, [pc, #164]	; (2824 <L_396_delayMicroseconds+0x3a>)
    2780:	f005 fa12 	bl	7ba8 <_print>
				printHex( I2C_RxBuffer.sequencePos );
    2784:	7930      	ldrb	r0, [r6, #4]
    2786:	2101      	movs	r1, #1
    2788:	f005 fab0 	bl	7cec <printHex_op>
				print( NL );
    278c:	4826      	ldr	r0, [pc, #152]	; (2828 <L_396_delayMicroseconds+0x3e>)
    278e:	f005 fa0b 	bl	7ba8 <_print>
				I2C0_C1 = I2C_RxBuffer.sequencePos == 1
    2792:	7933      	ldrb	r3, [r6, #4]
    2794:	2b01      	cmp	r3, #1
    2796:	bf0c      	ite	eq
    2798:	23e8      	moveq	r3, #232	; 0xe8
    279a:	23e0      	movne	r3, #224	; 0xe0
    279c:	703b      	strb	r3, [r7, #0]
    279e:	e02d      	b.n	27fc <L_396_delayMicroseconds+0x12>
#elif F_CPU == 48000000
	uint32_t n = usec << 4;
#elif F_CPU == 24000000
	uint32_t n = usec << 3;
#endif
	asm volatile(
    27a0:	2320      	movs	r3, #32

000027a2 <L_327_delayMicroseconds>:
    27a2:	3b01      	subs	r3, #1
    27a4:	d1fd      	bne.n	27a2 <L_327_delayMicroseconds>
			print(NL);
			*/

			// Delay around STOP to make sure it actually happens...
			delayMicroseconds( 1 );
			I2C0_C1 = I2C_C1_IICEN; // Send STOP
    27a6:	2380      	movs	r3, #128	; 0x80
    27a8:	703b      	strb	r3, [r7, #0]
    27aa:	23e0      	movs	r3, #224	; 0xe0

000027ac <L_339_delayMicroseconds>:
    27ac:	3b01      	subs	r3, #1
    27ae:	d1fd      	bne.n	27ac <L_339_delayMicroseconds>
			delayMicroseconds( 7 );

			// If there is another sequence, start sending
			if ( I2C_BufferLen( (I2C_Buffer*)&I2C_TxBuffer ) < I2C_TxBuffer.size )
    27b0:	4628      	mov	r0, r5
    27b2:	f7ff ff24 	bl	25fe <I2C_BufferLen>
    27b6:	88eb      	ldrh	r3, [r5, #6]
    27b8:	b29b      	uxth	r3, r3
    27ba:	4298      	cmp	r0, r3
    27bc:	d21e      	bcs.n	27fc <L_396_delayMicroseconds+0x12>
			{
				// Clear status flags
				I2C0_S = I2C_S_IICIF | I2C_S_ARBL;
    27be:	2312      	movs	r3, #18
    27c0:	7023      	strb	r3, [r4, #0]

				// Wait...till the master dies
				while ( I2C0_S & I2C_S_BUSY );
    27c2:	7823      	ldrb	r3, [r4, #0]
    27c4:	069b      	lsls	r3, r3, #26
    27c6:	d4fc      	bmi.n	27c2 <L_339_delayMicroseconds+0x16>

				// Enable I2C interrupt
				I2C0_C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TX;
    27c8:	23f0      	movs	r3, #240	; 0xf0
    27ca:	703b      	strb	r3, [r7, #0]

				// Transmit byte
				I2C0_D = I2C_TxBufferPop();
    27cc:	f7ff ff52 	bl	2674 <I2C_TxBufferPop>
    27d0:	4b16      	ldr	r3, [pc, #88]	; (282c <L_396_delayMicroseconds+0x42>)
    27d2:	7018      	strb	r0, [r3, #0]
    27d4:	e012      	b.n	27fc <L_396_delayMicroseconds+0x12>
	{
		// XXX Do we need to handle 2nd last byte?
		//I2C0_C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TXAK; // No STOP, Rx, NAK on recv

		// Last byte
		if ( I2C_TxBuffer.sequencePos <= 1 )
    27d6:	2b01      	cmp	r3, #1
    27d8:	4b14      	ldr	r3, [pc, #80]	; (282c <L_396_delayMicroseconds+0x42>)
    27da:	d80b      	bhi.n	27f4 <L_396_delayMicroseconds+0xa>
		{
			// Change to Tx mode
			I2C0_C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    27dc:	22b0      	movs	r2, #176	; 0xb0
    27de:	7032      	strb	r2, [r6, #0]

			// Grab last byte
			I2C_BufferPush( I2C0_D, (I2C_Buffer*)&I2C_RxBuffer );
    27e0:	7818      	ldrb	r0, [r3, #0]
    27e2:	490d      	ldr	r1, [pc, #52]	; (2818 <L_396_delayMicroseconds+0x2e>)
    27e4:	f7ff ff16 	bl	2614 <I2C_BufferPush>
    27e8:	2320      	movs	r3, #32

000027ea <L_396_delayMicroseconds>:
    27ea:	3b01      	subs	r3, #1
    27ec:	d1fd      	bne.n	27ea <L_396_delayMicroseconds>

			delayMicroseconds( 1 ); // Should be enough time before issuing the stop
			I2C0_C1 = I2C_C1_IICEN; // Send STOP
    27ee:	2380      	movs	r3, #128	; 0x80
    27f0:	7033      	strb	r3, [r6, #0]
    27f2:	e003      	b.n	27fc <L_396_delayMicroseconds+0x12>
		}
		else
		{
			// Retrieve data
			I2C_BufferPush( I2C0_D, (I2C_Buffer*)&I2C_RxBuffer );
    27f4:	7818      	ldrb	r0, [r3, #0]
    27f6:	4908      	ldr	r1, [pc, #32]	; (2818 <L_396_delayMicroseconds+0x2e>)
    27f8:	f7ff ff0c 	bl	2614 <I2C_BufferPush>
		}
	}

	I2C0_S = I2C_S_IICIF; // Clear interrupt
    27fc:	2302      	movs	r3, #2
    27fe:	7023      	strb	r3, [r4, #0]

	sei(); // Re-enable Interrupts
    2800:	b662      	cpsie	i
    2802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2806:	bf00      	nop
    2808:	40066002 	.word	0x40066002
    280c:	40066003 	.word	0x40066003
    2810:	1fff899c 	.word	0x1fff899c
    2814:	00008051 	.word	0x00008051
    2818:	1fff8990 	.word	0x1fff8990
    281c:	0000807c 	.word	0x0000807c
    2820:	000080a7 	.word	0x000080a7
    2824:	000080e0 	.word	0x000080e0
    2828:	0000bc21 	.word	0x0000bc21
    282c:	40066004 	.word	0x40066004

00002830 <I2C_Send>:
	return data;
}


uint8_t I2C_Send( uint8_t *data, uint8_t sendLen, uint8_t recvLen )
{
    2830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
inline uint8_t I2C_BufferCopy( uint8_t *data, uint8_t sendLen, uint8_t recvLen, I2C_Buffer *buffer )
{
	uint8_t reTurn = 0;

	// If sendLen is greater than buffer fail right away
	if ( sendLen > buffer->size )
    2834:	4c32      	ldr	r4, [pc, #200]	; (2900 <I2C_Send+0xd0>)
    2836:	88e3      	ldrh	r3, [r4, #6]
    2838:	fa1f f981 	uxth.w	r9, r1
    283c:	b29b      	uxth	r3, r3
    283e:	454b      	cmp	r3, r9
	return data;
}


uint8_t I2C_Send( uint8_t *data, uint8_t sendLen, uint8_t recvLen )
{
    2840:	4680      	mov	r8, r0
    2842:	460f      	mov	r7, r1
    2844:	4692      	mov	sl, r2
inline uint8_t I2C_BufferCopy( uint8_t *data, uint8_t sendLen, uint8_t recvLen, I2C_Buffer *buffer )
{
	uint8_t reTurn = 0;

	// If sendLen is greater than buffer fail right away
	if ( sendLen > buffer->size )
    2846:	d354      	bcc.n	28f2 <I2C_Send+0xc2>
	// The second element in the new buffer is the length of the buffer sequence (+1)
	uint16_t newTail = buffer->tail + sendLen + 2;
	if ( newTail >= buffer->size )
		newTail -= buffer->size;

	if ( I2C_BufferLen( buffer ) < sendLen + 2 )
    2848:	4620      	mov	r0, r4
    284a:	f7ff fed8 	bl	25fe <I2C_BufferLen>
    284e:	1c7b      	adds	r3, r7, #1
    2850:	4283      	cmp	r3, r0
    2852:	da4e      	bge.n	28f2 <I2C_Send+0xc2>
	printHex( newTail );
	print("@");
*/

	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;
    2854:	8825      	ldrh	r5, [r4, #0]
    2856:	8863      	ldrh	r3, [r4, #2]
    2858:	b2ad      	uxth	r5, r5
    285a:	b29b      	uxth	r3, r3
    285c:	429d      	cmp	r5, r3
    285e:	bf0c      	ite	eq
    2860:	2501      	moveq	r5, #1
    2862:	2502      	movne	r5, #2

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
	for ( uint16_t c = 0; c < sendLen; c++ )
    2864:	2300      	movs	r3, #0

	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
    2866:	461e      	mov	r6, r3
	for ( uint16_t c = 0; c < sendLen; c++ )
    2868:	454b      	cmp	r3, r9
    286a:	d229      	bcs.n	28c0 <I2C_Send+0x90>
	{
		// Add data to buffer
		switch ( bufferHeaderPos )
    286c:	b14e      	cbz	r6, 2882 <I2C_Send+0x52>
    286e:	2e01      	cmp	r6, #1
    2870:	d110      	bne.n	2894 <I2C_Send+0x64>
			bufferHeaderPos++;
			c--;
			break;

		case 1:
			buffer->buffer[ buffer->tail ] = sendLen;
    2872:	8862      	ldrh	r2, [r4, #2]
    2874:	68a1      	ldr	r1, [r4, #8]
    2876:	b292      	uxth	r2, r2
			bufferHeaderPos++;
			c--;
    2878:	3b01      	subs	r3, #1
			bufferHeaderPos++;
			c--;
			break;

		case 1:
			buffer->buffer[ buffer->tail ] = sendLen;
    287a:	548f      	strb	r7, [r1, r2]
			bufferHeaderPos++;
			c--;
    287c:	b29b      	uxth	r3, r3
			c--;
			break;

		case 1:
			buffer->buffer[ buffer->tail ] = sendLen;
			bufferHeaderPos++;
    287e:	2602      	movs	r6, #2
    2880:	e00e      	b.n	28a0 <I2C_Send+0x70>
	{
		// Add data to buffer
		switch ( bufferHeaderPos )
		{
		case 0:
			buffer->buffer[ buffer->tail ] = recvLen;
    2882:	8862      	ldrh	r2, [r4, #2]
    2884:	68a1      	ldr	r1, [r4, #8]
    2886:	b292      	uxth	r2, r2
			bufferHeaderPos++;
			c--;
    2888:	3b01      	subs	r3, #1
	{
		// Add data to buffer
		switch ( bufferHeaderPos )
		{
		case 0:
			buffer->buffer[ buffer->tail ] = recvLen;
    288a:	f801 a002 	strb.w	sl, [r1, r2]
			bufferHeaderPos++;
			c--;
    288e:	b29b      	uxth	r3, r3
		// Add data to buffer
		switch ( bufferHeaderPos )
		{
		case 0:
			buffer->buffer[ buffer->tail ] = recvLen;
			bufferHeaderPos++;
    2890:	2601      	movs	r6, #1
    2892:	e005      	b.n	28a0 <I2C_Send+0x70>
			bufferHeaderPos++;
			c--;
			break;

		default:
			buffer->buffer[ buffer->tail ] = data[ c ];
    2894:	8862      	ldrh	r2, [r4, #2]
    2896:	68a1      	ldr	r1, [r4, #8]
    2898:	f818 0003 	ldrb.w	r0, [r8, r3]
    289c:	b292      	uxth	r2, r2
    289e:	5488      	strb	r0, [r1, r2]
			break;
		}

		// Check for wrap-around case
		if ( buffer->tail + 1 >= buffer->size )
    28a0:	8860      	ldrh	r0, [r4, #2]
    28a2:	88e1      	ldrh	r1, [r4, #6]
    28a4:	4a16      	ldr	r2, [pc, #88]	; (2900 <I2C_Send+0xd0>)
    28a6:	b280      	uxth	r0, r0
    28a8:	b289      	uxth	r1, r1
    28aa:	3001      	adds	r0, #1
    28ac:	4288      	cmp	r0, r1
		{
			buffer->tail = 0;
    28ae:	bfa8      	it	ge
    28b0:	2100      	movge	r1, #0
	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
	for ( uint16_t c = 0; c < sendLen; c++ )
    28b2:	f103 0301 	add.w	r3, r3, #1
		}

		// Check for wrap-around case
		if ( buffer->tail + 1 >= buffer->size )
		{
			buffer->tail = 0;
    28b6:	bfac      	ite	ge
    28b8:	8051      	strhge	r1, [r2, #2]
		}
		// Normal case
		else
		{
			buffer->tail++;
    28ba:	8050      	strhlt	r0, [r2, #2]
	// If buffer is clean, return 1, otherwise 2
	reTurn = buffer->head == buffer->tail ? 1 : 2;

	// Add to buffer, already know there is enough room (simplifies adding logic)
	uint8_t bufferHeaderPos = 0;
	for ( uint16_t c = 0; c < sendLen; c++ )
    28bc:	b29b      	uxth	r3, r3
    28be:	e7d3      	b.n	2868 <I2C_Send+0x38>
{
	// Check head and tail pointers
	// If full, return 0
	// If empty, start up I2C Master Tx
	// If buffer is non-empty and non-full, just append to the buffer
	switch ( I2C_BufferCopy( data, sendLen, recvLen, (I2C_Buffer*)&I2C_TxBuffer ) )
    28c0:	2d01      	cmp	r5, #1
    28c2:	d119      	bne.n	28f8 <I2C_Send+0xc8>
		return 0;

	// Empty buffer, initialize I2C
	case 1:
		// Clear status flags
		I2C0_S = I2C_S_IICIF | I2C_S_ARBL;
    28c4:	4a0f      	ldr	r2, [pc, #60]	; (2904 <I2C_Send+0xd4>)
    28c6:	2312      	movs	r3, #18
    28c8:	7013      	strb	r3, [r2, #0]

		// Check to see if we already have control of the bus
		if ( I2C0_C1 & I2C_C1_MST )
    28ca:	4b0f      	ldr	r3, [pc, #60]	; (2908 <I2C_Send+0xd8>)
    28cc:	7819      	ldrb	r1, [r3, #0]
    28ce:	0688      	lsls	r0, r1, #26
    28d0:	d501      	bpl.n	28d6 <I2C_Send+0xa6>
		{
			// Already the master (ah yeah), send a repeated start
			I2C0_C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
    28d2:	22b4      	movs	r2, #180	; 0xb4
    28d4:	e003      	b.n	28de <I2C_Send+0xae>
		}
		// Otherwise, seize control
		else
		{
			// Wait...till the master dies
			while ( I2C0_S & I2C_S_BUSY );
    28d6:	7811      	ldrb	r1, [r2, #0]
    28d8:	0689      	lsls	r1, r1, #26
    28da:	d4fc      	bmi.n	28d6 <I2C_Send+0xa6>

			// Now we're the master (ah yisss), get ready to send stuffs
			I2C0_C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    28dc:	22b0      	movs	r2, #176	; 0xb0
    28de:	701a      	strb	r2, [r3, #0]
		}

		// Enable I2C interrupt
		I2C0_C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TX;
    28e0:	22f0      	movs	r2, #240	; 0xf0
    28e2:	701a      	strb	r2, [r3, #0]

		// Depending on what type of transfer, the first byte is configured for R or W
		I2C0_D = I2C_TxBufferPop();
    28e4:	f7ff fec6 	bl	2674 <I2C_TxBufferPop>
    28e8:	4b08      	ldr	r3, [pc, #32]	; (290c <I2C_Send+0xdc>)
    28ea:	7018      	strb	r0, [r3, #0]

		return 1;
    28ec:	2001      	movs	r0, #1
    28ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printHex( sendLen );
		print("|");
		printHex( I2C_TxBuffer.size );
		print( NL );
		*/
		return 0;
    28f2:	2000      	movs	r0, #0
    28f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

		return 1;
	}

	// Dirty buffer, I2C already initialized
	return 2;
    28f8:	2002      	movs	r0, #2
}
    28fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    28fe:	bf00      	nop
    2900:	1fff899c 	.word	0x1fff899c
    2904:	40066003 	.word	0x40066003
    2908:	40066002 	.word	0x40066002
    290c:	40066004 	.word	0x40066004

00002910 <LED_zeroPages>:
	// Enable I2C Interrupt
	NVIC_ENABLE_IRQ( IRQ_I2C0 );
}

void LED_zeroPages( uint8_t startPage, uint8_t numPages, uint8_t startReg, uint8_t endReg )
{
    2910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2914:	4698      	mov	r8, r3
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, 0x00 };
    2916:	4b1a      	ldr	r3, [pc, #104]	; (2980 <LED_zeroPages+0x70>)
	// Enable I2C Interrupt
	NVIC_ENABLE_IRQ( IRQ_I2C0 );
}

void LED_zeroPages( uint8_t startPage, uint8_t numPages, uint8_t startReg, uint8_t endReg )
{
    2918:	b0b0      	sub	sp, #192	; 0xc0
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, 0x00 };
    291a:	881b      	ldrh	r3, [r3, #0]
    291c:	f8ad 3004 	strh.w	r3, [sp, #4]
	// Enable I2C Interrupt
	NVIC_ENABLE_IRQ( IRQ_I2C0 );
}

void LED_zeroPages( uint8_t startPage, uint8_t numPages, uint8_t startReg, uint8_t endReg )
{
    2920:	4605      	mov	r5, r0
    2922:	4616      	mov	r6, r2
    2924:	460f      	mov	r7, r1
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, 0x00 };

	// Max length of a page + chip id + reg start
	uint8_t fullPage[ 0xB4 + 2 ] = { 0 }; // Max size of page
    2926:	a802      	add	r0, sp, #8
    2928:	2100      	movs	r1, #0
    292a:	22b6      	movs	r2, #182	; 0xb6
    292c:	f7ff fe1c 	bl	2568 <memset>
	fullPage[0] = 0xE8;     // Set chip id
    2930:	23e8      	movs	r3, #232	; 0xe8
    2932:	f88d 3008 	strb.w	r3, [sp, #8]
	fullPage[1] = startReg; // Set start reg
    2936:	f88d 6009 	strb.w	r6, [sp, #9]

	// Iterate through given pages, zero'ing out the given register regions
	for ( uint8_t page = startPage; page < startPage + numPages; page++ )
    293a:	462c      	mov	r4, r5
    293c:	19eb      	adds	r3, r5, r7
    293e:	429c      	cmp	r4, r3
    2940:	da1b      	bge.n	297a <LED_zeroPages+0x6a>
	{
		// Set page
		pageSetup[2] = page;
    2942:	f88d 4006 	strb.w	r4, [sp, #6]

		// Setup page
		while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
    2946:	a801      	add	r0, sp, #4
    2948:	2103      	movs	r1, #3
    294a:	2200      	movs	r2, #0
    294c:	f7ff ff70 	bl	2830 <I2C_Send>
    2950:	b918      	cbnz	r0, 295a <LED_zeroPages+0x4a>
			delay(1);
    2952:	2001      	movs	r0, #1
    2954:	f7ff fe40 	bl	25d8 <delay>
    2958:	e7f5      	b.n	2946 <LED_zeroPages+0x36>
    295a:	f108 0102 	add.w	r1, r8, #2

		// Zero out page
		while ( I2C_Send( fullPage, endReg - startReg + 2, 0 ) == 0 )
    295e:	1b89      	subs	r1, r1, r6
    2960:	a802      	add	r0, sp, #8
    2962:	b2c9      	uxtb	r1, r1
    2964:	2200      	movs	r2, #0
    2966:	f7ff ff63 	bl	2830 <I2C_Send>
    296a:	b918      	cbnz	r0, 2974 <LED_zeroPages+0x64>
			delay(1);
    296c:	2001      	movs	r0, #1
    296e:	f7ff fe33 	bl	25d8 <delay>
    2972:	e7f2      	b.n	295a <LED_zeroPages+0x4a>
	uint8_t fullPage[ 0xB4 + 2 ] = { 0 }; // Max size of page
	fullPage[0] = 0xE8;     // Set chip id
	fullPage[1] = startReg; // Set start reg

	// Iterate through given pages, zero'ing out the given register regions
	for ( uint8_t page = startPage; page < startPage + numPages; page++ )
    2974:	3401      	adds	r4, #1
    2976:	b2e4      	uxtb	r4, r4
    2978:	e7e0      	b.n	293c <LED_zeroPages+0x2c>

		// Zero out page
		while ( I2C_Send( fullPage, endReg - startReg + 2, 0 ) == 0 )
			delay(1);
	}
}
    297a:	b030      	add	sp, #192	; 0xc0
    297c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2980:	00007ebb 	.word	0x00007ebb

00002984 <cliFunc_ledZero>:
	print( NL ); // No \r\n by default after the command is entered
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );
}

void cliFunc_ledZero( char* args )
{
    2984:	b510      	push	{r4, lr}
	print( NL ); // No \r\n by default after the command is entered
    2986:	4805      	ldr	r0, [pc, #20]	; (299c <cliFunc_ledZero+0x18>)
    2988:	f005 f90e 	bl	7ba8 <_print>
	LED_zeroPages( 0x00, 8, 0x24, 0xB4 ); // Only PWMs
    298c:	2000      	movs	r0, #0
    298e:	2108      	movs	r1, #8
    2990:	2224      	movs	r2, #36	; 0x24
    2992:	23b4      	movs	r3, #180	; 0xb4
}
    2994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void cliFunc_ledZero( char* args )
{
	print( NL ); // No \r\n by default after the command is entered
	LED_zeroPages( 0x00, 8, 0x24, 0xB4 ); // Only PWMs
    2998:	f7ff bfba 	b.w	2910 <LED_zeroPages>
    299c:	0000bc21 	.word	0x0000bc21

000029a0 <LED_sendPage>:
			delay(1);
	}
}

void LED_sendPage( uint8_t *buffer, uint8_t len, uint8_t page )
{
    29a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, page };
    29a2:	23e8      	movs	r3, #232	; 0xe8
    29a4:	f88d 3004 	strb.w	r3, [sp, #4]
    29a8:	23fd      	movs	r3, #253	; 0xfd
			delay(1);
	}
}

void LED_sendPage( uint8_t *buffer, uint8_t len, uint8_t page )
{
    29aa:	4605      	mov	r5, r0
    29ac:	460c      	mov	r4, r1
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, page };
    29ae:	f88d 3005 	strb.w	r3, [sp, #5]
    29b2:	f88d 2006 	strb.w	r2, [sp, #6]

	// Setup page
	while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
    29b6:	a801      	add	r0, sp, #4
    29b8:	2103      	movs	r1, #3
    29ba:	2200      	movs	r2, #0
    29bc:	f7ff ff38 	bl	2830 <I2C_Send>
    29c0:	b918      	cbnz	r0, 29ca <LED_sendPage+0x2a>
		delay(1);
    29c2:	2001      	movs	r0, #1
    29c4:	f7ff fe08 	bl	25d8 <delay>
    29c8:	e7f5      	b.n	29b6 <LED_sendPage+0x16>

	// Write page to I2C Tx Buffer
	while ( I2C_Send( buffer, len, 0 ) == 0 )
    29ca:	4628      	mov	r0, r5
    29cc:	4621      	mov	r1, r4
    29ce:	2200      	movs	r2, #0
    29d0:	f7ff ff2e 	bl	2830 <I2C_Send>
    29d4:	b918      	cbnz	r0, 29de <LED_sendPage+0x3e>
		delay(1);
    29d6:	2001      	movs	r0, #1
    29d8:	f7ff fdfe 	bl	25d8 <delay>
    29dc:	e7f5      	b.n	29ca <LED_sendPage+0x2a>

}
    29de:	b003      	add	sp, #12
    29e0:	bd30      	pop	{r4, r5, pc}
    29e2:	0000      	movs	r0, r0

000029e4 <cliFunc_ledTest>:
	LED_sendPage( (uint8_t*)LED_ledEnableMask1, sizeof( LED_ledEnableMask1 ), 0 );

}

void cliFunc_ledTest( char* args )
{
    29e4:	b508      	push	{r3, lr}
	print( NL ); // No \r\n by default after the command is entered
    29e6:	4805      	ldr	r0, [pc, #20]	; (29fc <cliFunc_ledTest+0x18>)
    29e8:	f005 f8de 	bl	7ba8 <_print>
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );
    29ec:	4804      	ldr	r0, [pc, #16]	; (2a00 <cliFunc_ledTest+0x1c>)
    29ee:	2192      	movs	r1, #146	; 0x92
    29f0:	2200      	movs	r2, #0
}
    29f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void cliFunc_ledTest( char* args )
{
	print( NL ); // No \r\n by default after the command is entered
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );
    29f6:	f7ff bfd3 	b.w	29a0 <LED_sendPage>
    29fa:	bf00      	nop
    29fc:	0000bc21 	.word	0x0000bc21
    2a00:	000081e7 	.word	0x000081e7

00002a04 <LED_writeReg>:
		delay(1);

}

void LED_writeReg( uint8_t reg, uint8_t val, uint8_t page )
{
    2a04:	b513      	push	{r0, r1, r4, lr}
	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, page };
    2a06:	23e8      	movs	r3, #232	; 0xe8
    2a08:	24fd      	movs	r4, #253	; 0xfd
    2a0a:	f88d 3000 	strb.w	r3, [sp]
    2a0e:	f88d 4001 	strb.w	r4, [sp, #1]
    2a12:	f88d 2002 	strb.w	r2, [sp, #2]

	// Reg Write Setup
	uint8_t writeData[] = { 0xE8, reg, val };
    2a16:	f88d 3004 	strb.w	r3, [sp, #4]
    2a1a:	f88d 0005 	strb.w	r0, [sp, #5]
    2a1e:	f88d 1006 	strb.w	r1, [sp, #6]

	// Setup page
	while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
    2a22:	4668      	mov	r0, sp
    2a24:	2103      	movs	r1, #3
    2a26:	2200      	movs	r2, #0
    2a28:	f7ff ff02 	bl	2830 <I2C_Send>
    2a2c:	b918      	cbnz	r0, 2a36 <LED_writeReg+0x32>
		delay(1);
    2a2e:	2001      	movs	r0, #1
    2a30:	f7ff fdd2 	bl	25d8 <delay>
    2a34:	e7f5      	b.n	2a22 <LED_writeReg+0x1e>

	while ( I2C_Send( writeData, sizeof( writeData ), 0 ) == 0 )
    2a36:	a801      	add	r0, sp, #4
    2a38:	2103      	movs	r1, #3
    2a3a:	2200      	movs	r2, #0
    2a3c:	f7ff fef8 	bl	2830 <I2C_Send>
    2a40:	b918      	cbnz	r0, 2a4a <LED_writeReg+0x46>
		delay(1);
    2a42:	2001      	movs	r0, #1
    2a44:	f7ff fdc8 	bl	25d8 <delay>
    2a48:	e7f5      	b.n	2a36 <LED_writeReg+0x32>
}
    2a4a:	b002      	add	sp, #8
    2a4c:	bd10      	pop	{r4, pc}
    2a4e:	0000      	movs	r0, r0

00002a50 <LED_setup>:
	LED_writeReg( 0x0A, 0x01, 0x0B );
}

// Setup
inline void LED_setup()
{
    2a50:	b508      	push	{r3, lr}
	// Register Scan CLI dictionary
	CLI_registerDictionary( ledCLIDict, ledCLIDictName );
    2a52:	4825      	ldr	r0, [pc, #148]	; (2ae8 <LED_setup+0x98>)
    2a54:	4925      	ldr	r1, [pc, #148]	; (2aec <LED_setup+0x9c>)
    2a56:	f004 fe53 	bl	7700 <CLI_registerDictionary>
// ----- Functions -----

inline void I2C_setup()
{
	// Enable I2C internal clock
	SIM_SCGC4 |= SIM_SCGC4_I2C0; // Bus 0
    2a5a:	4a25      	ldr	r2, [pc, #148]	; (2af0 <LED_setup+0xa0>)
    2a5c:	6813      	ldr	r3, [r2, #0]
    2a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2a62:	6013      	str	r3, [r2, #0]

	// External pull-up resistor
	PORTB_PCR0 = PORT_PCR_ODE | PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(2);
    2a64:	4a23      	ldr	r2, [pc, #140]	; (2af4 <LED_setup+0xa4>)
    2a66:	f44f 7319 	mov.w	r3, #612	; 0x264
    2a6a:	6013      	str	r3, [r2, #0]
	PORTB_PCR1 = PORT_PCR_ODE | PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(2);
    2a6c:	6053      	str	r3, [r2, #4]

	// SCL Frequency Divider
	// 400kHz -> 120 (0x85) @ 48 MHz F_BUS
	I2C0_F = 0x85;
    2a6e:	4b22      	ldr	r3, [pc, #136]	; (2af8 <LED_setup+0xa8>)
    2a70:	2285      	movs	r2, #133	; 0x85
    2a72:	701a      	strb	r2, [r3, #0]
	I2C0_FLT = 4;
    2a74:	2204      	movs	r2, #4
    2a76:	715a      	strb	r2, [r3, #5]
	I2C0_C1 = I2C_C1_IICEN;
    2a78:	2280      	movs	r2, #128	; 0x80
    2a7a:	705a      	strb	r2, [r3, #1]
	I2C0_C2 = I2C_C2_HDRS; // High drive select
    2a7c:	2220      	movs	r2, #32
    2a7e:	711a      	strb	r2, [r3, #4]

	// Enable I2C Interrupt
	NVIC_ENABLE_IRQ( IRQ_I2C0 );
    2a80:	4b1e      	ldr	r3, [pc, #120]	; (2afc <LED_setup+0xac>)
    2a82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    2a86:	601a      	str	r2, [r3, #0]
	// Initialize I2C
	I2C_setup();

	// Zero out Frame Registers
	// This needs to be done before disabling the hardware shutdown (or the leds will do undefined things)
	LED_zeroPages( 0x0B, 1, 0x00, 0x0C ); // Control Registers
    2a88:	200b      	movs	r0, #11
    2a8a:	2101      	movs	r1, #1
    2a8c:	2200      	movs	r2, #0
    2a8e:	230c      	movs	r3, #12
    2a90:	f7ff ff3e 	bl	2910 <LED_zeroPages>

	// Disable Hardware shutdown of ISSI chip (pull high)
	GPIOB_PDDR |= (1<<16);
    2a94:	4a1a      	ldr	r2, [pc, #104]	; (2b00 <LED_setup+0xb0>)
    2a96:	6813      	ldr	r3, [r2, #0]
    2a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2a9c:	6013      	str	r3, [r2, #0]
	PORTB_PCR16 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2a9e:	4b19      	ldr	r3, [pc, #100]	; (2b04 <LED_setup+0xb4>)
    2aa0:	f44f 72a2 	mov.w	r2, #324	; 0x144
    2aa4:	601a      	str	r2, [r3, #0]
	GPIOB_PSOR |= (1<<16);
    2aa6:	4a18      	ldr	r2, [pc, #96]	; (2b08 <LED_setup+0xb8>)
    2aa8:	6813      	ldr	r3, [r2, #0]

	// Clear LED Pages
	LED_zeroPages( 0x00, 8, 0x00, 0xB4 ); // LED Registers
    2aaa:	2000      	movs	r0, #0
	LED_zeroPages( 0x0B, 1, 0x00, 0x0C ); // Control Registers

	// Disable Hardware shutdown of ISSI chip (pull high)
	GPIOB_PDDR |= (1<<16);
	PORTB_PCR16 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
	GPIOB_PSOR |= (1<<16);
    2aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2ab0:	6013      	str	r3, [r2, #0]

	// Clear LED Pages
	LED_zeroPages( 0x00, 8, 0x00, 0xB4 ); // LED Registers
    2ab2:	2108      	movs	r1, #8
    2ab4:	23b4      	movs	r3, #180	; 0xb4
    2ab6:	4602      	mov	r2, r0
    2ab8:	f7ff ff2a 	bl	2910 <LED_zeroPages>

	// Enable LEDs based upon mask
	LED_sendPage( (uint8_t*)LED_ledEnableMask1, sizeof( LED_ledEnableMask1 ), 0 );
    2abc:	4813      	ldr	r0, [pc, #76]	; (2b0c <LED_setup+0xbc>)
    2abe:	2114      	movs	r1, #20
    2ac0:	2200      	movs	r2, #0
    2ac2:	f7ff ff6d 	bl	29a0 <LED_sendPage>

	// Set default brightness
	LED_sendPage( (uint8_t*)LED_defaultBrightness1, sizeof( LED_defaultBrightness1 ), 0 );
    2ac6:	4812      	ldr	r0, [pc, #72]	; (2b10 <LED_setup+0xc0>)
    2ac8:	2192      	movs	r1, #146	; 0x92
    2aca:	2200      	movs	r2, #0
    2acc:	f7ff ff68 	bl	29a0 <LED_sendPage>

	// Do not disable software shutdown of ISSI chip unless current is high enough
	// Require at least 150 mA
	// May be enabled/disabled at a later time
	if ( Output_current_available() >= 150 )
    2ad0:	f003 fc20 	bl	6314 <Output_current_available>
    2ad4:	2895      	cmp	r0, #149	; 0x95
    2ad6:	d906      	bls.n	2ae6 <LED_setup+0x96>
	{
		// Disable Software shutdown of ISSI chip
		LED_writeReg( 0x0A, 0x01, 0x0B );
    2ad8:	200a      	movs	r0, #10
    2ada:	2101      	movs	r1, #1
    2adc:	220b      	movs	r2, #11
	}
}
    2ade:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	// Require at least 150 mA
	// May be enabled/disabled at a later time
	if ( Output_current_available() >= 150 )
	{
		// Disable Software shutdown of ISSI chip
		LED_writeReg( 0x0A, 0x01, 0x0B );
    2ae2:	f7ff bf8f 	b.w	2a04 <LED_writeReg>
    2ae6:	bd08      	pop	{r3, pc}
    2ae8:	00007f20 	.word	0x00007f20
    2aec:	0000837b 	.word	0x0000837b
    2af0:	40048034 	.word	0x40048034
    2af4:	4004a000 	.word	0x4004a000
    2af8:	40066001 	.word	0x40066001
    2afc:	e000e100 	.word	0xe000e100
    2b00:	400ff054 	.word	0x400ff054
    2b04:	4004a040 	.word	0x4004a040
    2b08:	400ff044 	.word	0x400ff044
    2b0c:	00008367 	.word	0x00008367
    2b10:	000081e7 	.word	0x000081e7

00002b14 <cliFunc_ledStart>:
		data[1]++;
	}
}

void cliFunc_ledStart( char* args )
{
    2b14:	b508      	push	{r3, lr}
	print( NL ); // No \r\n by default after the command is entered
    2b16:	480a      	ldr	r0, [pc, #40]	; (2b40 <cliFunc_ledStart+0x2c>)
    2b18:	f005 f846 	bl	7ba8 <_print>
	LED_zeroPages( 0x0B, 1, 0x00, 0x0C ); // Control Registers
    2b1c:	230c      	movs	r3, #12
    2b1e:	200b      	movs	r0, #11
    2b20:	2101      	movs	r1, #1
    2b22:	2200      	movs	r2, #0
    2b24:	f7ff fef4 	bl	2910 <LED_zeroPages>
	//LED_zeroPages( 0x00, 8, 0x00, 0xB4 ); // LED Registers
	LED_writeReg( 0x0A, 0x01, 0x0B );
    2b28:	200a      	movs	r0, #10
    2b2a:	2101      	movs	r1, #1
    2b2c:	220b      	movs	r2, #11
    2b2e:	f7ff ff69 	bl	2a04 <LED_writeReg>
	LED_sendPage( (uint8_t*)LED_ledEnableMask1, sizeof( LED_ledEnableMask1 ), 0 );
    2b32:	4804      	ldr	r0, [pc, #16]	; (2b44 <cliFunc_ledStart+0x30>)
    2b34:	2114      	movs	r1, #20
    2b36:	2200      	movs	r2, #0

}
    2b38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	print( NL ); // No \r\n by default after the command is entered
	LED_zeroPages( 0x0B, 1, 0x00, 0x0C ); // Control Registers
	//LED_zeroPages( 0x00, 8, 0x00, 0xB4 ); // LED Registers
	LED_writeReg( 0x0A, 0x01, 0x0B );
	LED_sendPage( (uint8_t*)LED_ledEnableMask1, sizeof( LED_ledEnableMask1 ), 0 );
    2b3c:	f7ff bf30 	b.w	29a0 <LED_sendPage>
    2b40:	0000bc21 	.word	0x0000bc21
    2b44:	00008367 	.word	0x00008367

00002b48 <LED_readPage>:
	while ( I2C_Send( writeData, sizeof( writeData ), 0 ) == 0 )
		delay(1);
}

void LED_readPage( uint8_t len, uint8_t page )
{
    2b48:	b530      	push	{r4, r5, lr}
	// Software shutdown must be enabled to read registers
	LED_writeReg( 0x0A, 0x00, 0x0B );
    2b4a:	220b      	movs	r2, #11
	while ( I2C_Send( writeData, sizeof( writeData ), 0 ) == 0 )
		delay(1);
}

void LED_readPage( uint8_t len, uint8_t page )
{
    2b4c:	b085      	sub	sp, #20
    2b4e:	460c      	mov	r4, r1
    2b50:	4605      	mov	r5, r0
	// Software shutdown must be enabled to read registers
	LED_writeReg( 0x0A, 0x00, 0x0B );
    2b52:	2100      	movs	r1, #0
    2b54:	200a      	movs	r0, #10
    2b56:	f7ff ff55 	bl	2a04 <LED_writeReg>

	// Page Setup
	uint8_t pageSetup[] = { 0xE8, 0xFD, page };
    2b5a:	23e8      	movs	r3, #232	; 0xe8
    2b5c:	f88d 300c 	strb.w	r3, [sp, #12]
    2b60:	23fd      	movs	r3, #253	; 0xfd
    2b62:	f88d 300d 	strb.w	r3, [sp, #13]
    2b66:	f88d 400e 	strb.w	r4, [sp, #14]

	// Setup page
	while ( I2C_Send( pageSetup, sizeof( pageSetup ), 0 ) == 0 )
    2b6a:	a803      	add	r0, sp, #12
    2b6c:	2103      	movs	r1, #3
    2b6e:	2200      	movs	r2, #0
    2b70:	f7ff fe5e 	bl	2830 <I2C_Send>
    2b74:	b918      	cbnz	r0, 2b7e <LED_readPage+0x36>
		delay(1);
    2b76:	2001      	movs	r0, #1
    2b78:	f7ff fd2e 	bl	25d8 <delay>
    2b7c:	e7f5      	b.n	2b6a <LED_readPage+0x22>

	// Register Setup
	uint8_t regSetup[] = { 0xE8, 0x00 };
    2b7e:	23e8      	movs	r3, #232	; 0xe8
    2b80:	2400      	movs	r4, #0
    2b82:	f88d 3008 	strb.w	r3, [sp, #8]
    2b86:	f88d 4009 	strb.w	r4, [sp, #9]

	// Read each register in the page
	for ( uint8_t reg = 0; reg < len; reg++ )
    2b8a:	42ac      	cmp	r4, r5
    2b8c:	b2e3      	uxtb	r3, r4
    2b8e:	d01d      	beq.n	2bcc <LED_readPage+0x84>
	{
		// Update register to read
		regSetup[1] = reg;
    2b90:	f88d 3009 	strb.w	r3, [sp, #9]

		// Configure register
		while ( I2C_Send( regSetup, sizeof( regSetup ), 0 ) == 0 )
    2b94:	a802      	add	r0, sp, #8
    2b96:	2102      	movs	r1, #2
    2b98:	2200      	movs	r2, #0
    2b9a:	f7ff fe49 	bl	2830 <I2C_Send>
    2b9e:	b918      	cbnz	r0, 2ba8 <LED_readPage+0x60>
			delay(1);
    2ba0:	2001      	movs	r0, #1
    2ba2:	f7ff fd19 	bl	25d8 <delay>
    2ba6:	e7f5      	b.n	2b94 <LED_readPage+0x4c>

		// Register Read Command
		uint8_t regReadCmd[] = { 0xE9 };
    2ba8:	23e9      	movs	r3, #233	; 0xe9
    2baa:	f88d 3004 	strb.w	r3, [sp, #4]

		// Request single register byte
		while ( I2C_Send( regReadCmd, sizeof( regReadCmd ), 1 ) == 0 )
    2bae:	2101      	movs	r1, #1
    2bb0:	a801      	add	r0, sp, #4
    2bb2:	460a      	mov	r2, r1
    2bb4:	f7ff fe3c 	bl	2830 <I2C_Send>
    2bb8:	b918      	cbnz	r0, 2bc2 <LED_readPage+0x7a>
			delay(1);
    2bba:	2001      	movs	r0, #1
    2bbc:	f7ff fd0c 	bl	25d8 <delay>
    2bc0:	e7f5      	b.n	2bae <LED_readPage+0x66>
		dbug_print("NEXT");
    2bc2:	4806      	ldr	r0, [pc, #24]	; (2bdc <LED_readPage+0x94>)
    2bc4:	f004 fff0 	bl	7ba8 <_print>
    2bc8:	3401      	adds	r4, #1
    2bca:	e7de      	b.n	2b8a <LED_readPage+0x42>
	}

	// Disable software shutdown
	LED_writeReg( 0x0A, 0x01, 0x0B );
    2bcc:	200a      	movs	r0, #10
    2bce:	2101      	movs	r1, #1
    2bd0:	220b      	movs	r2, #11
    2bd2:	f7ff ff17 	bl	2a04 <LED_writeReg>
}
    2bd6:	b005      	add	sp, #20
    2bd8:	bd30      	pop	{r4, r5, pc}
    2bda:	bf00      	nop
    2bdc:	0000810e 	.word	0x0000810e

00002be0 <cliFunc_ledRPage>:
	I2C_Send( buffer, bufferLen, 1 ); // Only 1 byte is ever read at a time with the ISSI chip
}

// TODO Currently not working correctly
void cliFunc_ledRPage( char* args )
{
    2be0:	b513      	push	{r0, r1, r4, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    2be2:	4669      	mov	r1, sp
    2be4:	aa01      	add	r2, sp, #4
    2be6:	f004 fd17 	bl	7618 <CLI_argumentIsolation>

	// Default to 0 if no argument is given
	uint8_t page = 0;

	if ( arg1Ptr[0] != '\0' )
    2bea:	9800      	ldr	r0, [sp, #0]
    2bec:	7804      	ldrb	r4, [r0, #0]
    2bee:	b114      	cbz	r4, 2bf6 <cliFunc_ledRPage+0x16>
	{
		page = (uint8_t)numToInt( arg1Ptr );
    2bf0:	f005 f8d4 	bl	7d9c <numToInt>
    2bf4:	b2c4      	uxtb	r4, r0
	}

	// No \r\n by default after the command is entered
	print( NL );
    2bf6:	4804      	ldr	r0, [pc, #16]	; (2c08 <cliFunc_ledRPage+0x28>)
    2bf8:	f004 ffd6 	bl	7ba8 <_print>

	LED_readPage( 0x1, page );
    2bfc:	2001      	movs	r0, #1
    2bfe:	4621      	mov	r1, r4
    2c00:	f7ff ffa2 	bl	2b48 <LED_readPage>
	//LED_readPage( 0xB4, page );
}
    2c04:	b002      	add	sp, #8
    2c06:	bd10      	pop	{r4, pc}
    2c08:	0000bc21 	.word	0x0000bc21

00002c0c <cliFunc_i2cSend>:

// ----- CLI Command Functions -----

// TODO Currently not working correctly
void cliFunc_i2cSend( char* args )
{
    2c0c:	b530      	push	{r4, r5, lr}
    2c0e:	b085      	sub	sp, #20

	// Buffer used after interpretting the args, will be sent to I2C functions
	// NOTE: Limited to 8 bytes currently (can be increased if necessary
	#define i2cSend_BuffLenMax 8
	uint8_t buffer[ i2cSend_BuffLenMax ];
	uint8_t bufferLen = 0;
    2c10:	2500      	movs	r5, #0
// TODO Currently not working correctly
void cliFunc_i2cSend( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2c12:	9001      	str	r0, [sp, #4]
	#define i2cSend_BuffLenMax 8
	uint8_t buffer[ i2cSend_BuffLenMax ];
	uint8_t bufferLen = 0;

	// No \r\n by default after the command is entered
	print( NL );
    2c14:	481b      	ldr	r0, [pc, #108]	; (2c84 <cliFunc_i2cSend+0x78>)
    2c16:	f004 ffc7 	bl	7ba8 <_print>
	info_msg("Sending: ");
    2c1a:	481b      	ldr	r0, [pc, #108]	; (2c88 <cliFunc_i2cSend+0x7c>)
    2c1c:	f004 ffc4 	bl	7ba8 <_print>

	// Parse args until a \0 is found
	while ( bufferLen < i2cSend_BuffLenMax )
	{
		curArgs = arg2Ptr; // Use the previous 2nd arg pointer to separate the next arg from the list
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2c20:	9801      	ldr	r0, [sp, #4]
    2c22:	4669      	mov	r1, sp
    2c24:	aa01      	add	r2, sp, #4
    2c26:	f004 fcf7 	bl	7618 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    2c2a:	9800      	ldr	r0, [sp, #0]
    2c2c:	7803      	ldrb	r3, [r0, #0]
    2c2e:	b1eb      	cbz	r3, 2c6c <cliFunc_i2cSend+0x60>
			break;

		// If | is found, end sequence and start new one
		if ( *arg1Ptr == '|' )
    2c30:	2b7c      	cmp	r3, #124	; 0x7c
    2c32:	d10a      	bne.n	2c4a <cliFunc_i2cSend+0x3e>
		{
			print("| ");
    2c34:	4815      	ldr	r0, [pc, #84]	; (2c8c <cliFunc_i2cSend+0x80>)
    2c36:	f004 ffb7 	bl	7ba8 <_print>
			I2C_Send( buffer, bufferLen, 0 );
    2c3a:	a802      	add	r0, sp, #8
    2c3c:	4629      	mov	r1, r5
    2c3e:	2200      	movs	r2, #0
    2c40:	f7ff fdf6 	bl	2830 <I2C_Send>
			bufferLen = 0;
    2c44:	2400      	movs	r4, #0
    2c46:	4625      	mov	r5, r4
    2c48:	e7ea      	b.n	2c20 <cliFunc_i2cSend+0x14>
			continue;
		}

		// Interpret the argument
		buffer[ bufferLen++ ] = (uint8_t)numToInt( arg1Ptr );
    2c4a:	f005 f8a7 	bl	7d9c <numToInt>
    2c4e:	ab04      	add	r3, sp, #16
    2c50:	1c6c      	adds	r4, r5, #1
    2c52:	441d      	add	r5, r3
    2c54:	b2e4      	uxtb	r4, r4
    2c56:	f805 0c08 	strb.w	r0, [r5, #-8]

		// Print out the arg
		dPrint( arg1Ptr );
    2c5a:	9800      	ldr	r0, [sp, #0]
    2c5c:	f003 fb4a 	bl	62f4 <Output_putstr>
		print(" ");
    2c60:	480b      	ldr	r0, [pc, #44]	; (2c90 <cliFunc_i2cSend+0x84>)
    2c62:	f004 ffa1 	bl	7ba8 <_print>
	// No \r\n by default after the command is entered
	print( NL );
	info_msg("Sending: ");

	// Parse args until a \0 is found
	while ( bufferLen < i2cSend_BuffLenMax )
    2c66:	2c07      	cmp	r4, #7
    2c68:	d9ed      	bls.n	2c46 <cliFunc_i2cSend+0x3a>
    2c6a:	e000      	b.n	2c6e <cliFunc_i2cSend+0x62>
    2c6c:	462c      	mov	r4, r5
		// Print out the arg
		dPrint( arg1Ptr );
		print(" ");
	}

	print( NL );
    2c6e:	4805      	ldr	r0, [pc, #20]	; (2c84 <cliFunc_i2cSend+0x78>)
    2c70:	f004 ff9a 	bl	7ba8 <_print>

	I2C_Send( buffer, bufferLen, 0 );
    2c74:	a802      	add	r0, sp, #8
    2c76:	4621      	mov	r1, r4
    2c78:	2200      	movs	r2, #0
    2c7a:	f7ff fdd9 	bl	2830 <I2C_Send>
}
    2c7e:	b005      	add	sp, #20
    2c80:	bd30      	pop	{r4, r5, pc}
    2c82:	bf00      	nop
    2c84:	0000bc21 	.word	0x0000bc21
    2c88:	00008128 	.word	0x00008128
    2c8c:	00008144 	.word	0x00008144
    2c90:	0000852a 	.word	0x0000852a

00002c94 <cliFunc_i2cRecv>:

void cliFunc_i2cRecv( char* args )
{
    2c94:	b530      	push	{r4, r5, lr}
    2c96:	b085      	sub	sp, #20

	// Buffer used after interpretting the args, will be sent to I2C functions
	// NOTE: Limited to 8 bytes currently (can be increased if necessary
	#define i2cSend_BuffLenMax 8
	uint8_t buffer[ i2cSend_BuffLenMax ];
	uint8_t bufferLen = 0;
    2c98:	2500      	movs	r5, #0

void cliFunc_i2cRecv( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2c9a:	9001      	str	r0, [sp, #4]
	#define i2cSend_BuffLenMax 8
	uint8_t buffer[ i2cSend_BuffLenMax ];
	uint8_t bufferLen = 0;

	// No \r\n by default after the command is entered
	print( NL );
    2c9c:	481b      	ldr	r0, [pc, #108]	; (2d0c <cliFunc_i2cRecv+0x78>)
    2c9e:	f004 ff83 	bl	7ba8 <_print>
	info_msg("Sending: ");
    2ca2:	481b      	ldr	r0, [pc, #108]	; (2d10 <cliFunc_i2cRecv+0x7c>)
    2ca4:	f004 ff80 	bl	7ba8 <_print>

	// Parse args until a \0 is found
	while ( bufferLen < i2cSend_BuffLenMax )
	{
		curArgs = arg2Ptr; // Use the previous 2nd arg pointer to separate the next arg from the list
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2ca8:	9801      	ldr	r0, [sp, #4]
    2caa:	4669      	mov	r1, sp
    2cac:	aa01      	add	r2, sp, #4
    2cae:	f004 fcb3 	bl	7618 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    2cb2:	9800      	ldr	r0, [sp, #0]
    2cb4:	7803      	ldrb	r3, [r0, #0]
    2cb6:	b1eb      	cbz	r3, 2cf4 <cliFunc_i2cRecv+0x60>
			break;

		// If | is found, end sequence and start new one
		if ( *arg1Ptr == '|' )
    2cb8:	2b7c      	cmp	r3, #124	; 0x7c
    2cba:	d10a      	bne.n	2cd2 <cliFunc_i2cRecv+0x3e>
		{
			print("| ");
    2cbc:	4815      	ldr	r0, [pc, #84]	; (2d14 <cliFunc_i2cRecv+0x80>)
    2cbe:	f004 ff73 	bl	7ba8 <_print>
			I2C_Send( buffer, bufferLen, 0 );
    2cc2:	a802      	add	r0, sp, #8
    2cc4:	4629      	mov	r1, r5
    2cc6:	2200      	movs	r2, #0
    2cc8:	f7ff fdb2 	bl	2830 <I2C_Send>
			bufferLen = 0;
    2ccc:	2400      	movs	r4, #0
    2cce:	4625      	mov	r5, r4
    2cd0:	e7ea      	b.n	2ca8 <cliFunc_i2cRecv+0x14>
			continue;
		}

		// Interpret the argument
		buffer[ bufferLen++ ] = (uint8_t)numToInt( arg1Ptr );
    2cd2:	f005 f863 	bl	7d9c <numToInt>
    2cd6:	ab04      	add	r3, sp, #16
    2cd8:	1c6c      	adds	r4, r5, #1
    2cda:	441d      	add	r5, r3
    2cdc:	b2e4      	uxtb	r4, r4
    2cde:	f805 0c08 	strb.w	r0, [r5, #-8]

		// Print out the arg
		dPrint( arg1Ptr );
    2ce2:	9800      	ldr	r0, [sp, #0]
    2ce4:	f003 fb06 	bl	62f4 <Output_putstr>
		print(" ");
    2ce8:	480b      	ldr	r0, [pc, #44]	; (2d18 <cliFunc_i2cRecv+0x84>)
    2cea:	f004 ff5d 	bl	7ba8 <_print>
	// No \r\n by default after the command is entered
	print( NL );
	info_msg("Sending: ");

	// Parse args until a \0 is found
	while ( bufferLen < i2cSend_BuffLenMax )
    2cee:	2c07      	cmp	r4, #7
    2cf0:	d9ed      	bls.n	2cce <cliFunc_i2cRecv+0x3a>
    2cf2:	e000      	b.n	2cf6 <cliFunc_i2cRecv+0x62>
    2cf4:	462c      	mov	r4, r5
		// Print out the arg
		dPrint( arg1Ptr );
		print(" ");
	}

	print( NL );
    2cf6:	4805      	ldr	r0, [pc, #20]	; (2d0c <cliFunc_i2cRecv+0x78>)
    2cf8:	f004 ff56 	bl	7ba8 <_print>

	I2C_Send( buffer, bufferLen, 1 ); // Only 1 byte is ever read at a time with the ISSI chip
    2cfc:	a802      	add	r0, sp, #8
    2cfe:	4621      	mov	r1, r4
    2d00:	2201      	movs	r2, #1
    2d02:	f7ff fd95 	bl	2830 <I2C_Send>
}
    2d06:	b005      	add	sp, #20
    2d08:	bd30      	pop	{r4, r5, pc}
    2d0a:	bf00      	nop
    2d0c:	0000bc21 	.word	0x0000bc21
    2d10:	00008128 	.word	0x00008128
    2d14:	00008144 	.word	0x00008144
    2d18:	0000852a 	.word	0x0000852a

00002d1c <cliFunc_ledWPage>:
	LED_readPage( 0x1, page );
	//LED_readPage( 0xB4, page );
}

void cliFunc_ledWPage( char* args )
{
    2d1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char* arg1Ptr;
	char* arg2Ptr = args;

	// First process page and starting address
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d1e:	a902      	add	r1, sp, #8
    2d20:	aa03      	add	r2, sp, #12

void cliFunc_ledWPage( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2d22:	9003      	str	r0, [sp, #12]

	// First process page and starting address
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d24:	f004 fc78 	bl	7618 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    2d28:	9802      	ldr	r0, [sp, #8]
    2d2a:	7803      	ldrb	r3, [r0, #0]
    2d2c:	2b00      	cmp	r3, #0
    2d2e:	d040      	beq.n	2db2 <cliFunc_ledWPage+0x96>
		return;
	uint8_t page[] = { 0xE8, 0xFD, numToInt( arg1Ptr ) };
    2d30:	23fd      	movs	r3, #253	; 0xfd
    2d32:	24e8      	movs	r4, #232	; 0xe8
    2d34:	f88d 3001 	strb.w	r3, [sp, #1]
    2d38:	f88d 4000 	strb.w	r4, [sp]
    2d3c:	f005 f82e 	bl	7d9c <numToInt>

	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d40:	a902      	add	r1, sp, #8
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
		return;
	uint8_t page[] = { 0xE8, 0xFD, numToInt( arg1Ptr ) };
    2d42:	f88d 0002 	strb.w	r0, [sp, #2]

	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d46:	aa03      	add	r2, sp, #12
    2d48:	9803      	ldr	r0, [sp, #12]
    2d4a:	f004 fc65 	bl	7618 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    2d4e:	9802      	ldr	r0, [sp, #8]
    2d50:	7803      	ldrb	r3, [r0, #0]
    2d52:	b373      	cbz	r3, 2db2 <cliFunc_ledWPage+0x96>
		return;
	uint8_t data[] = { 0xE8, numToInt( arg1Ptr ), 0 };
    2d54:	f88d 4004 	strb.w	r4, [sp, #4]
    2d58:	f005 f820 	bl	7d9c <numToInt>
    2d5c:	2300      	movs	r3, #0
    2d5e:	f88d 0005 	strb.w	r0, [sp, #5]
    2d62:	f88d 3006 	strb.w	r3, [sp, #6]

	// Set the register page
	while ( I2C_Send( page, sizeof( page ), 0 ) == 0 )
    2d66:	4668      	mov	r0, sp
    2d68:	2103      	movs	r1, #3
    2d6a:	2200      	movs	r2, #0
    2d6c:	f7ff fd60 	bl	2830 <I2C_Send>
    2d70:	b940      	cbnz	r0, 2d84 <cliFunc_ledWPage+0x68>
		delay(1);
    2d72:	2001      	movs	r0, #1
    2d74:	f7ff fc30 	bl	25d8 <delay>
    2d78:	e7f5      	b.n	2d66 <cliFunc_ledWPage+0x4a>
		// Write register location and data to I2C
		while ( I2C_Send( data, sizeof( data ), 0 ) == 0 )
			delay(1);

		// Increment address
		data[1]++;
    2d7a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    2d7e:	3301      	adds	r3, #1
    2d80:	f88d 3005 	strb.w	r3, [sp, #5]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2d84:	9803      	ldr	r0, [sp, #12]
    2d86:	a902      	add	r1, sp, #8
    2d88:	aa03      	add	r2, sp, #12
    2d8a:	f004 fc45 	bl	7618 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    2d8e:	9802      	ldr	r0, [sp, #8]
    2d90:	7803      	ldrb	r3, [r0, #0]
    2d92:	b173      	cbz	r3, 2db2 <cliFunc_ledWPage+0x96>
			break;

		data[2] = numToInt( arg1Ptr );
    2d94:	f005 f802 	bl	7d9c <numToInt>
    2d98:	f88d 0006 	strb.w	r0, [sp, #6]

		// Write register location and data to I2C
		while ( I2C_Send( data, sizeof( data ), 0 ) == 0 )
    2d9c:	a801      	add	r0, sp, #4
    2d9e:	2103      	movs	r1, #3
    2da0:	2200      	movs	r2, #0
    2da2:	f7ff fd45 	bl	2830 <I2C_Send>
    2da6:	2800      	cmp	r0, #0
    2da8:	d1e7      	bne.n	2d7a <cliFunc_ledWPage+0x5e>
			delay(1);
    2daa:	2001      	movs	r0, #1
    2dac:	f7ff fc14 	bl	25d8 <delay>
    2db0:	e7f4      	b.n	2d9c <cliFunc_ledWPage+0x80>

		// Increment address
		data[1]++;
	}
}
    2db2:	b004      	add	sp, #16
    2db4:	bd10      	pop	{r4, pc}
    2db6:	0000      	movs	r0, r0

00002db8 <LED_scan>:
// LED State processing loop
unsigned int LED_currentEvent = 0;
inline uint8_t LED_scan()
{
	// Check for current change event
	if ( LED_currentEvent )
    2db8:	4b08      	ldr	r3, [pc, #32]	; (2ddc <LED_scan+0x24>)
    2dba:	681a      	ldr	r2, [r3, #0]


// LED State processing loop
unsigned int LED_currentEvent = 0;
inline uint8_t LED_scan()
{
    2dbc:	b510      	push	{r4, lr}
    2dbe:	461c      	mov	r4, r3
	// Check for current change event
	if ( LED_currentEvent )
    2dc0:	b152      	cbz	r2, 2dd8 <LED_scan+0x20>
	{
		// TODO dim LEDs in low power mode instead of shutting off
		if ( LED_currentEvent < 150 )
    2dc2:	2a95      	cmp	r2, #149	; 0x95
		{
			// Enable Software shutdown of ISSI chip
			LED_writeReg( 0x0A, 0x00, 0x0B );
    2dc4:	f04f 000a 	mov.w	r0, #10
    2dc8:	bf94      	ite	ls
    2dca:	2100      	movls	r1, #0
		}
		else
		{
			// Disable Software shutdown of ISSI chip
			LED_writeReg( 0x0A, 0x01, 0x0B );
    2dcc:	2101      	movhi	r1, #1
    2dce:	220b      	movs	r2, #11
    2dd0:	f7ff fe18 	bl	2a04 <LED_writeReg>
		}

		LED_currentEvent = 0;
    2dd4:	2300      	movs	r3, #0
    2dd6:	6023      	str	r3, [r4, #0]
	}

	return 0;
}
    2dd8:	2000      	movs	r0, #0
    2dda:	bd10      	pop	{r4, pc}
    2ddc:	1fff9188 	.word	0x1fff9188

00002de0 <LED_currentChange>:
// Called by parent Scan Module whenver the available current has changed
// current - mA
void LED_currentChange( unsigned int current )
{
	// Delay action till next LED scan loop (as this callback sometimes occurs during interrupt requests)
	LED_currentEvent = current;
    2de0:	4b01      	ldr	r3, [pc, #4]	; (2de8 <LED_currentChange+0x8>)
    2de2:	6018      	str	r0, [r3, #0]
    2de4:	4770      	bx	lr
    2de6:	bf00      	nop
    2de8:	1fff9188 	.word	0x1fff9188

00002dec <LED_control>:
		return;
	*/

	// Configure based upon the given mode
	// TODO Perhaps do gamma adjustment?
	switch ( control->mode )
    2dec:	7803      	ldrb	r3, [r0, #0]
	uint8_t        amount;
	uint16_t       index;
} LedControl;

void LED_control( LedControl *control )
{
    2dee:	b510      	push	{r4, lr}
		return;
	*/

	// Configure based upon the given mode
	// TODO Perhaps do gamma adjustment?
	switch ( control->mode )
    2df0:	2b05      	cmp	r3, #5
    2df2:	d837      	bhi.n	2e64 <LED_control+0x78>
    2df4:	e8df f003 	tbb	[pc, r3]
    2df8:	17120a03 	.word	0x17120a03
    2dfc:	2e23      	.short	0x2e23
	{
	case LedControlMode_brightness_decrease:
		// Don't worry about rolling over, the cycle is quick
		LED_pageBuffer.buffer[ control->index ] -= control->amount;
    2dfe:	4a1f      	ldr	r2, [pc, #124]	; (2e7c <LED_control+0x90>)
    2e00:	8843      	ldrh	r3, [r0, #2]
    2e02:	7841      	ldrb	r1, [r0, #1]
    2e04:	4413      	add	r3, r2
    2e06:	789a      	ldrb	r2, [r3, #2]
    2e08:	1a52      	subs	r2, r2, r1
    2e0a:	e005      	b.n	2e18 <LED_control+0x2c>
		break;

	case LedControlMode_brightness_increase:
		// Don't worry about rolling over, the cycle is quick
		LED_pageBuffer.buffer[ control->index ] += control->amount;
    2e0c:	4a1b      	ldr	r2, [pc, #108]	; (2e7c <LED_control+0x90>)
    2e0e:	8843      	ldrh	r3, [r0, #2]
    2e10:	4413      	add	r3, r2
    2e12:	7842      	ldrb	r2, [r0, #1]
    2e14:	7899      	ldrb	r1, [r3, #2]
    2e16:	440a      	add	r2, r1
    2e18:	709a      	strb	r2, [r3, #2]
		break;
    2e1a:	e023      	b.n	2e64 <LED_control+0x78>

	case LedControlMode_brightness_set:
		LED_pageBuffer.buffer[ control->index ] = control->amount;
    2e1c:	8843      	ldrh	r3, [r0, #2]
    2e1e:	4917      	ldr	r1, [pc, #92]	; (2e7c <LED_control+0x90>)
    2e20:	7842      	ldrb	r2, [r0, #1]
    2e22:	440b      	add	r3, r1
    2e24:	e7f8      	b.n	2e18 <LED_control+0x2c>
    2e26:	4b16      	ldr	r3, [pc, #88]	; (2e80 <LED_control+0x94>)
    2e28:	f103 0190 	add.w	r1, r3, #144	; 0x90

	case LedControlMode_brightness_decrease_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
		{
			// Don't worry about rolling over, the cycle is quick
			LED_pageBuffer.buffer[ channel ] -= control->amount;
    2e2c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    2e30:	7844      	ldrb	r4, [r0, #1]
	case LedControlMode_brightness_set:
		LED_pageBuffer.buffer[ control->index ] = control->amount;
		break;

	case LedControlMode_brightness_decrease_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e32:	428b      	cmp	r3, r1
		{
			// Don't worry about rolling over, the cycle is quick
			LED_pageBuffer.buffer[ channel ] -= control->amount;
    2e34:	eba2 0204 	sub.w	r2, r2, r4
    2e38:	701a      	strb	r2, [r3, #0]
	case LedControlMode_brightness_set:
		LED_pageBuffer.buffer[ control->index ] = control->amount;
		break;

	case LedControlMode_brightness_decrease_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e3a:	d1f7      	bne.n	2e2c <LED_control+0x40>
    2e3c:	e012      	b.n	2e64 <LED_control+0x78>
    2e3e:	4b10      	ldr	r3, [pc, #64]	; (2e80 <LED_control+0x94>)
    2e40:	f103 0190 	add.w	r1, r3, #144	; 0x90

	case LedControlMode_brightness_increase_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
		{
			// Don't worry about rolling over, the cycle is quick
			LED_pageBuffer.buffer[ channel ] += control->amount;
    2e44:	f813 4f01 	ldrb.w	r4, [r3, #1]!
    2e48:	7842      	ldrb	r2, [r0, #1]
			LED_pageBuffer.buffer[ channel ] -= control->amount;
		}
		break;

	case LedControlMode_brightness_increase_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e4a:	428b      	cmp	r3, r1
		{
			// Don't worry about rolling over, the cycle is quick
			LED_pageBuffer.buffer[ channel ] += control->amount;
    2e4c:	4422      	add	r2, r4
    2e4e:	701a      	strb	r2, [r3, #0]
			LED_pageBuffer.buffer[ channel ] -= control->amount;
		}
		break;

	case LedControlMode_brightness_increase_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e50:	d1f8      	bne.n	2e44 <LED_control+0x58>
    2e52:	e007      	b.n	2e64 <LED_control+0x78>
    2e54:	4b0a      	ldr	r3, [pc, #40]	; (2e80 <LED_control+0x94>)
    2e56:	f103 0290 	add.w	r2, r3, #144	; 0x90
		break;

	case LedControlMode_brightness_set_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
		{
			LED_pageBuffer.buffer[ channel ] = control->amount;
    2e5a:	7841      	ldrb	r1, [r0, #1]
    2e5c:	f803 1f01 	strb.w	r1, [r3, #1]!
			LED_pageBuffer.buffer[ channel ] += control->amount;
		}
		break;

	case LedControlMode_brightness_set_all:
		for ( uint8_t channel = 0; channel < LED_TotalChannels; channel++ )
    2e60:	4293      	cmp	r3, r2
    2e62:	d1fa      	bne.n	2e5a <LED_control+0x6e>
		break;
	}

	// Sync LED buffer with ISSI chip buffer
	// TODO Support multiple frames
	LED_pageBuffer.i2c_addr = 0xE8; // Chip 1
    2e64:	4805      	ldr	r0, [pc, #20]	; (2e7c <LED_control+0x90>)
    2e66:	23e8      	movs	r3, #232	; 0xe8
    2e68:	7003      	strb	r3, [r0, #0]
	LED_pageBuffer.reg_addr = 0x24; // Brightness section
    2e6a:	2324      	movs	r3, #36	; 0x24
    2e6c:	7043      	strb	r3, [r0, #1]
	LED_sendPage( (uint8_t*)&LED_pageBuffer, sizeof( LED_Buffer ), 0 );
    2e6e:	2192      	movs	r1, #146	; 0x92
    2e70:	2200      	movs	r2, #0
}
    2e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	// Sync LED buffer with ISSI chip buffer
	// TODO Support multiple frames
	LED_pageBuffer.i2c_addr = 0xE8; // Chip 1
	LED_pageBuffer.reg_addr = 0x24; // Brightness section
	LED_sendPage( (uint8_t*)&LED_pageBuffer, sizeof( LED_Buffer ), 0 );
    2e76:	f7ff bd93 	b.w	29a0 <LED_sendPage>
    2e7a:	bf00      	nop
    2e7c:	1fff9aa1 	.word	0x1fff9aa1
    2e80:	1fff9aa2 	.word	0x1fff9aa2

00002e84 <cliFunc_ledCtrl>:
	print( NL ); // No \r\n by default after the command is entered
	LED_zeroPages( 0x00, 8, 0x24, 0xB4 ); // Only PWMs
}

void cliFunc_ledCtrl( char* args )
{
    2e84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char* arg2Ptr = args;
	LedControl control;

	// First process mode
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2e86:	a901      	add	r1, sp, #4
    2e88:	aa02      	add	r2, sp, #8

void cliFunc_ledCtrl( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    2e8a:	9002      	str	r0, [sp, #8]
	LedControl control;

	// First process mode
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2e8c:	f004 fbc4 	bl	7618 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    2e90:	9801      	ldr	r0, [sp, #4]
    2e92:	7803      	ldrb	r3, [r0, #0]
    2e94:	b30b      	cbz	r3, 2eda <cliFunc_ledCtrl+0x56>
		return;
	control.mode = numToInt( arg1Ptr );
    2e96:	f004 ff81 	bl	7d9c <numToInt>


	// Next process amount
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2e9a:	a901      	add	r1, sp, #4
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
		return;
	control.mode = numToInt( arg1Ptr );
    2e9c:	f88d 000c 	strb.w	r0, [sp, #12]


	// Next process amount
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2ea0:	aa02      	add	r2, sp, #8
    2ea2:	9802      	ldr	r0, [sp, #8]
    2ea4:	f004 fbb8 	bl	7618 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    2ea8:	9801      	ldr	r0, [sp, #4]
    2eaa:	7803      	ldrb	r3, [r0, #0]
    2eac:	b1ab      	cbz	r3, 2eda <cliFunc_ledCtrl+0x56>
		return;
	control.amount = numToInt( arg1Ptr );
    2eae:	f004 ff75 	bl	7d9c <numToInt>


	// Finally process led index, if it exists
	// Default to 0
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2eb2:	a901      	add	r1, sp, #4
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
		return;
	control.amount = numToInt( arg1Ptr );
    2eb4:	f88d 000d 	strb.w	r0, [sp, #13]


	// Finally process led index, if it exists
	// Default to 0
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    2eb8:	aa02      	add	r2, sp, #8
    2eba:	9802      	ldr	r0, [sp, #8]
    2ebc:	f004 fbac 	bl	7618 <CLI_argumentIsolation>
	control.index = *arg1Ptr == '\0' ? 0 : numToInt( arg1Ptr );
    2ec0:	9801      	ldr	r0, [sp, #4]
    2ec2:	7803      	ldrb	r3, [r0, #0]
    2ec4:	b11b      	cbz	r3, 2ece <cliFunc_ledCtrl+0x4a>
    2ec6:	f004 ff69 	bl	7d9c <numToInt>
    2eca:	b280      	uxth	r0, r0
    2ecc:	e000      	b.n	2ed0 <cliFunc_ledCtrl+0x4c>
    2ece:	4618      	mov	r0, r3
    2ed0:	f8ad 000e 	strh.w	r0, [sp, #14]

	// Process request
	LED_control( &control );
    2ed4:	a803      	add	r0, sp, #12
    2ed6:	f7ff ff89 	bl	2dec <LED_control>
}
    2eda:	b005      	add	sp, #20
    2edc:	f85d fb04 	ldr.w	pc, [sp], #4

00002ee0 <LED_control_capability>:

uint8_t LED_control_timer = 0;
void LED_control_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    2ee0:	29ff      	cmp	r1, #255	; 0xff
	LED_sendPage( (uint8_t*)&LED_pageBuffer, sizeof( LED_Buffer ), 0 );
}

uint8_t LED_control_timer = 0;
void LED_control_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    2ee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2ee4:	460b      	mov	r3, r1
    2ee6:	4605      	mov	r5, r0
    2ee8:	4614      	mov	r4, r2
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    2eea:	d107      	bne.n	2efc <LED_control_capability+0x1c>
    2eec:	28ff      	cmp	r0, #255	; 0xff
    2eee:	d108      	bne.n	2f02 <LED_control_capability+0x22>
	{
		print("LED_control_capability(mode,amount,index)");
    2ef0:	481c      	ldr	r0, [pc, #112]	; (2f64 <LED_control_capability+0x84>)
		return;
#endif

	// Modify led state of this node
	LED_control( control );
}
    2ef2:	b002      	add	sp, #8
    2ef4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void LED_control_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("LED_control_capability(mode,amount,index)");
    2ef8:	f004 be56 	b.w	7ba8 <_print>
		return;
	}

	// Only use capability on press
	// TODO Analog
	if ( stateType == 0x00 && state == 0x03 ) // Not on release
    2efc:	b909      	cbnz	r1, 2f02 <LED_control_capability+0x22>
    2efe:	2803      	cmp	r0, #3
    2f00:	d02d      	beq.n	2f5e <LED_control_capability+0x7e>
	// XXX
	// ISSI Chip locks up if we spam updates too quickly (might be an I2C bug on this side too -HaaTa)
	// Make sure we only send an update every 30 milliseconds at most
	// It may be possible to optimize speed even further, but will likely require serious time with a logic analyzer

	uint8_t currentTime = (uint8_t)systick_millis_count;
    2f02:	4a19      	ldr	r2, [pc, #100]	; (2f68 <LED_control_capability+0x88>)
	int8_t compare = (int8_t)(currentTime - LED_control_timer) & 0x7F;
    2f04:	4819      	ldr	r0, [pc, #100]	; (2f6c <LED_control_capability+0x8c>)
	// XXX
	// ISSI Chip locks up if we spam updates too quickly (might be an I2C bug on this side too -HaaTa)
	// Make sure we only send an update every 30 milliseconds at most
	// It may be possible to optimize speed even further, but will likely require serious time with a logic analyzer

	uint8_t currentTime = (uint8_t)systick_millis_count;
    2f06:	6811      	ldr	r1, [r2, #0]
	int8_t compare = (int8_t)(currentTime - LED_control_timer) & 0x7F;
    2f08:	7802      	ldrb	r2, [r0, #0]
	// XXX
	// ISSI Chip locks up if we spam updates too quickly (might be an I2C bug on this side too -HaaTa)
	// Make sure we only send an update every 30 milliseconds at most
	// It may be possible to optimize speed even further, but will likely require serious time with a logic analyzer

	uint8_t currentTime = (uint8_t)systick_millis_count;
    2f0a:	b2c9      	uxtb	r1, r1
	int8_t compare = (int8_t)(currentTime - LED_control_timer) & 0x7F;
    2f0c:	1a8a      	subs	r2, r1, r2
	if ( compare < 30 )
    2f0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    2f12:	2a1d      	cmp	r2, #29
    2f14:	dd23      	ble.n	2f5e <LED_control_capability+0x7e>
	uint8_t send_packet = 0;
	uint8_t ignore_node = 0;

	// By default send to the *next* node, which will determine where to go next
	extern uint8_t Connect_id; // connect_scan.c
	uint8_t addr = Connect_id + 1;
    2f16:	4a16      	ldr	r2, [pc, #88]	; (2f70 <LED_control_capability+0x90>)
	int8_t compare = (int8_t)(currentTime - LED_control_timer) & 0x7F;
	if ( compare < 30 )
	{
		return;
	}
	LED_control_timer = currentTime;
    2f18:	7001      	strb	r1, [r0, #0]
	uint8_t send_packet = 0;
	uint8_t ignore_node = 0;

	// By default send to the *next* node, which will determine where to go next
	extern uint8_t Connect_id; // connect_scan.c
	uint8_t addr = Connect_id + 1;
    2f1a:	7810      	ldrb	r0, [r2, #0]

	switch ( control->mode )
    2f1c:	7822      	ldrb	r2, [r4, #0]
    2f1e:	2a05      	cmp	r2, #5
    2f20:	d817      	bhi.n	2f52 <LED_control_capability+0x72>
    2f22:	e8df f002 	tbb	[pc, r2]
    2f26:	0303      	.short	0x0303
    2f28:	0a0a0a03 	.word	0x0a0a0a03
	// Otherwise, ignore
	case LedControlMode_brightness_decrease:
	case LedControlMode_brightness_increase:
	case LedControlMode_brightness_set:
		// Ignore if led is on this node
		if ( control->index < LED_TotalChannels )
    2f2c:	8862      	ldrh	r2, [r4, #2]
    2f2e:	2a8f      	cmp	r2, #143	; 0x8f
    2f30:	d90f      	bls.n	2f52 <LED_control_capability+0x72>
			break;

		// Calculate new led index
		control->index -= LED_TotalChannels;
    2f32:	3a90      	subs	r2, #144	; 0x90
    2f34:	8062      	strh	r2, [r4, #2]

		ignore_node = 1;
    2f36:	2601      	movs	r6, #1
		send_packet = 1;
		break;
    2f38:	e000      	b.n	2f3c <LED_control_capability+0x5c>
	LedControl *control = (LedControl*)args;

	// Interconnect broadcasting
#if defined(ConnectEnabled_define)
	uint8_t send_packet = 0;
	uint8_t ignore_node = 0;
    2f3a:	2600      	movs	r6, #0
	{
		// generatedKeymap.h
		extern const Capability CapabilitiesList[];

		// Broadcast layerStackExact remote capability (0xFF is the broadcast id)
		Connect_send_RemoteCapability(
    2f3c:	4a0d      	ldr	r2, [pc, #52]	; (2f74 <LED_control_capability+0x94>)
    2f3e:	7d12      	ldrb	r2, [r2, #20]
	uint8_t send_packet = 0;
	uint8_t ignore_node = 0;

	// By default send to the *next* node, which will determine where to go next
	extern uint8_t Connect_id; // connect_scan.c
	uint8_t addr = Connect_id + 1;
    2f40:	3001      	adds	r0, #1
	{
		// generatedKeymap.h
		extern const Capability CapabilitiesList[];

		// Broadcast layerStackExact remote capability (0xFF is the broadcast id)
		Connect_send_RemoteCapability(
    2f42:	e88d 0014 	stmia.w	sp, {r2, r4}
    2f46:	b2c0      	uxtb	r0, r0
    2f48:	2102      	movs	r1, #2
    2f4a:	462a      	mov	r2, r5
    2f4c:	f001 fa6e 	bl	442c <Connect_send_RemoteCapability>
			args
		);
	}

	// If there is nothing to do on this node, ignore
	if ( ignore_node )
    2f50:	b92e      	cbnz	r6, 2f5e <LED_control_capability+0x7e>
		return;
#endif

	// Modify led state of this node
	LED_control( control );
    2f52:	4620      	mov	r0, r4
}
    2f54:	b002      	add	sp, #8
    2f56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if ( ignore_node )
		return;
#endif

	// Modify led state of this node
	LED_control( control );
    2f5a:	f7ff bf47 	b.w	2dec <LED_control>
}
    2f5e:	b002      	add	sp, #8
    2f60:	bd70      	pop	{r4, r5, r6, pc}
    2f62:	bf00      	nop
    2f64:	00008147 	.word	0x00008147
    2f68:	1fff9184 	.word	0x1fff9184
    2f6c:	1fff918c 	.word	0x1fff918c
    2f70:	1fff89c5 	.word	0x1fff89c5
    2f74:	00009ef8 	.word	0x00009ef8

00002f78 <cliFunc_matrixInfo>:


// ----- CLI Command Functions -----

void cliFunc_matrixInfo( char* args )
{
    2f78:	b510      	push	{r4, lr}
	print( NL );
    2f7a:	4c10      	ldr	r4, [pc, #64]	; (2fbc <cliFunc_matrixInfo+0x44>)
    2f7c:	4620      	mov	r0, r4
    2f7e:	f004 fe13 	bl	7ba8 <_print>
	info_msg("Columns:  ");
    2f82:	480f      	ldr	r0, [pc, #60]	; (2fc0 <cliFunc_matrixInfo+0x48>)
    2f84:	f004 fe10 	bl	7ba8 <_print>
	printHex( Matrix_colsNum );
    2f88:	2101      	movs	r1, #1
    2f8a:	2009      	movs	r0, #9
    2f8c:	f004 feae 	bl	7cec <printHex_op>

	print( NL );
    2f90:	4620      	mov	r0, r4
    2f92:	f004 fe09 	bl	7ba8 <_print>
	info_msg("Rows:     ");
    2f96:	480b      	ldr	r0, [pc, #44]	; (2fc4 <cliFunc_matrixInfo+0x4c>)
    2f98:	f004 fe06 	bl	7ba8 <_print>
	printHex( Matrix_rowsNum );
    2f9c:	2101      	movs	r1, #1
    2f9e:	2005      	movs	r0, #5
    2fa0:	f004 fea4 	bl	7cec <printHex_op>

	print( NL );
    2fa4:	4620      	mov	r0, r4
    2fa6:	f004 fdff 	bl	7ba8 <_print>
	info_msg("Max Keys: ");
    2faa:	4807      	ldr	r0, [pc, #28]	; (2fc8 <cliFunc_matrixInfo+0x50>)
    2fac:	f004 fdfc 	bl	7ba8 <_print>
	printHex( Matrix_maxKeys );
    2fb0:	202d      	movs	r0, #45	; 0x2d
    2fb2:	2101      	movs	r1, #1
}
    2fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	info_msg("Rows:     ");
	printHex( Matrix_rowsNum );

	print( NL );
	info_msg("Max Keys: ");
	printHex( Matrix_maxKeys );
    2fb8:	f004 be98 	b.w	7cec <printHex_op>
    2fbc:	0000bc21 	.word	0x0000bc21
    2fc0:	0000841a 	.word	0x0000841a
    2fc4:	00008437 	.word	0x00008437
    2fc8:	00008454 	.word	0x00008454

00002fcc <cliFunc_matrixState>:
	info_msg("Matrix Debug Mode: ");
	printInt8( matrixDebugMode );
}

void cliFunc_matrixState( char* args )
{
    2fcc:	b513      	push	{r0, r1, r4, lr}
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );

	// Default to 1 if no argument is given
	matrixDebugStateCounter = 1;
    2fce:	4c07      	ldr	r4, [pc, #28]	; (2fec <cliFunc_matrixState+0x20>)
{
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    2fd0:	4669      	mov	r1, sp
    2fd2:	aa01      	add	r2, sp, #4
    2fd4:	f004 fb20 	bl	7618 <CLI_argumentIsolation>

	// Default to 1 if no argument is given
	matrixDebugStateCounter = 1;
    2fd8:	2301      	movs	r3, #1

	if ( arg1Ptr[0] != '\0' )
    2fda:	9800      	ldr	r0, [sp, #0]
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );

	// Default to 1 if no argument is given
	matrixDebugStateCounter = 1;
    2fdc:	8023      	strh	r3, [r4, #0]

	if ( arg1Ptr[0] != '\0' )
    2fde:	7803      	ldrb	r3, [r0, #0]
    2fe0:	b113      	cbz	r3, 2fe8 <cliFunc_matrixState+0x1c>
	{
		matrixDebugStateCounter = (uint16_t)numToInt( arg1Ptr );
    2fe2:	f004 fedb 	bl	7d9c <numToInt>
    2fe6:	8020      	strh	r0, [r4, #0]
	}
}
    2fe8:	b002      	add	sp, #8
    2fea:	bd10      	pop	{r4, pc}
    2fec:	1fff9196 	.word	0x1fff9196

00002ff0 <cliFunc_matrixDebug>:
	info_msg("Max Keys: ");
	printHex( Matrix_maxKeys );
}

void cliFunc_matrixDebug( char* args )
{
    2ff0:	b507      	push	{r0, r1, r2, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    2ff2:	4669      	mov	r1, sp
    2ff4:	aa01      	add	r2, sp, #4
    2ff6:	f004 fb0f 	bl	7618 <CLI_argumentIsolation>

	// Set the matrix debug flag depending on the argument
	// If no argument, set to scan code only
	// If set to T, set to state transition
	switch ( arg1Ptr[0] )
    2ffa:	9b00      	ldr	r3, [sp, #0]
    2ffc:	781b      	ldrb	r3, [r3, #0]
    2ffe:	2b54      	cmp	r3, #84	; 0x54
    3000:	d00a      	beq.n	3018 <cliFunc_matrixDebug+0x28>
    3002:	2b74      	cmp	r3, #116	; 0x74
    3004:	d008      	beq.n	3018 <cliFunc_matrixDebug+0x28>
    3006:	b9c3      	cbnz	r3, 303a <cliFunc_matrixDebug+0x4a>
		matrixDebugMode = matrixDebugMode != 2 ? 2 : 0;
		break;

	// No argument
	case '\0':
		matrixDebugMode = matrixDebugMode != 1 ? 1 : 0;
    3008:	4a0d      	ldr	r2, [pc, #52]	; (3040 <cliFunc_matrixDebug+0x50>)
    300a:	7813      	ldrb	r3, [r2, #0]
    300c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
    3010:	bf18      	it	ne
    3012:	2301      	movne	r3, #1
    3014:	7013      	strb	r3, [r2, #0]
		break;
    3016:	e006      	b.n	3026 <cliFunc_matrixDebug+0x36>
	switch ( arg1Ptr[0] )
	{
	// T as argument
	case 'T':
	case 't':
		matrixDebugMode = matrixDebugMode != 2 ? 2 : 0;
    3018:	4b09      	ldr	r3, [pc, #36]	; (3040 <cliFunc_matrixDebug+0x50>)
    301a:	781a      	ldrb	r2, [r3, #0]
    301c:	2a02      	cmp	r2, #2
    301e:	bf14      	ite	ne
    3020:	2202      	movne	r2, #2
    3022:	2200      	moveq	r2, #0
    3024:	701a      	strb	r2, [r3, #0]
	// Invalid argument
	default:
		return;
	}

	print( NL );
    3026:	4807      	ldr	r0, [pc, #28]	; (3044 <cliFunc_matrixDebug+0x54>)
    3028:	f004 fdbe 	bl	7ba8 <_print>
	info_msg("Matrix Debug Mode: ");
    302c:	4806      	ldr	r0, [pc, #24]	; (3048 <cliFunc_matrixDebug+0x58>)
    302e:	f004 fdbb 	bl	7ba8 <_print>
	printInt8( matrixDebugMode );
    3032:	4b03      	ldr	r3, [pc, #12]	; (3040 <cliFunc_matrixDebug+0x50>)
    3034:	7818      	ldrb	r0, [r3, #0]
    3036:	f004 fde6 	bl	7c06 <printInt8>
}
    303a:	b003      	add	sp, #12
    303c:	f85d fb04 	ldr.w	pc, [sp], #4
    3040:	1fff9194 	.word	0x1fff9194
    3044:	0000bc21 	.word	0x0000bc21
    3048:	00008471 	.word	0x00008471

0000304c <Matrix_pin>:

// Pin action (Strobe, Sense, Strobe Setup, Sense Setup)
// NOTE: This function is highly dependent upon the organization of the register map
//       Only guaranteed to work with Freescale MK20 series uCs
uint8_t Matrix_pin( GPIO_Pin gpio, Type type )
{
    304c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    304e:	b2c3      	uxtb	r3, r0
    3050:	f8ad 0004 	strh.w	r0, [sp, #4]
    3054:	f3c0 2007 	ubfx	r0, r0, #8, #8
	// Register width is defined as size of a pointer
	unsigned int gpio_offset = gpio.port * 0x40   / sizeof(unsigned int*);
    3058:	011a      	lsls	r2, r3, #4
	unsigned int port_offset = gpio.port * 0x1000 / sizeof(unsigned int*) + gpio.pin;
    305a:	eb00 2383 	add.w	r3, r0, r3, lsl #10
	#ifndef GHOSTING_MATRIX
	volatile unsigned int *GPIO_PSOR = (unsigned int*)(&GPIOA_PSOR) + gpio_offset;
	#endif
	volatile unsigned int *GPIO_PCOR = (unsigned int*)(&GPIOA_PCOR) + gpio_offset;
	volatile unsigned int *GPIO_PDIR = (unsigned int*)(&GPIOA_PDIR) + gpio_offset;
	volatile unsigned int *PORT_PCR  = (unsigned int*)(&PORTA_PCR0) + port_offset;
    305e:	009b      	lsls	r3, r3, #2
    3060:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
	unsigned int gpio_offset = gpio.port * 0x40   / sizeof(unsigned int*);
	unsigned int port_offset = gpio.port * 0x1000 / sizeof(unsigned int*) + gpio.pin;

	// Assumes 0x40 between GPIO Port registers and 0x1000 between PORT pin registers
	// See Lib/mk20dx.h
	volatile unsigned int *GPIO_PDDR = (unsigned int*)(&GPIOA_PDDR) + gpio_offset;
    3064:	4c26      	ldr	r4, [pc, #152]	; (3100 <Matrix_pin+0xb4>)
	#ifndef GHOSTING_MATRIX
	volatile unsigned int *GPIO_PSOR = (unsigned int*)(&GPIOA_PSOR) + gpio_offset;
	#endif
	volatile unsigned int *GPIO_PCOR = (unsigned int*)(&GPIOA_PCOR) + gpio_offset;
	volatile unsigned int *GPIO_PDIR = (unsigned int*)(&GPIOA_PDIR) + gpio_offset;
	volatile unsigned int *PORT_PCR  = (unsigned int*)(&PORTA_PCR0) + port_offset;
    3066:	f503 2392 	add.w	r3, r3, #299008	; 0x49000

	// Operation depends on Type
	switch ( type )
    306a:	2904      	cmp	r1, #4
    306c:	d845      	bhi.n	30fa <Matrix_pin+0xae>
    306e:	e8df f001 	tbb	[pc, r1]
    3072:	0503      	.short	0x0503
    3074:	200e      	.short	0x200e
    3076:	2a          	.byte	0x2a
    3077:	00          	.byte	0x00

	// Assumes 0x40 between GPIO Port registers and 0x1000 between PORT pin registers
	// See Lib/mk20dx.h
	volatile unsigned int *GPIO_PDDR = (unsigned int*)(&GPIOA_PDDR) + gpio_offset;
	#ifndef GHOSTING_MATRIX
	volatile unsigned int *GPIO_PSOR = (unsigned int*)(&GPIOA_PSOR) + gpio_offset;
    3078:	4922      	ldr	r1, [pc, #136]	; (3104 <Matrix_pin+0xb8>)
    307a:	e000      	b.n	307e <Matrix_pin+0x32>
	#endif
	volatile unsigned int *GPIO_PCOR = (unsigned int*)(&GPIOA_PCOR) + gpio_offset;
    307c:	4922      	ldr	r1, [pc, #136]	; (3108 <Matrix_pin+0xbc>)
	case Type_StrobeOff:
		#ifdef GHOSTING_MATRIX
		// Ghosting martix needs to put not used (off) strobes in high impedance state
		*GPIO_PDDR &= ~(1 << gpio.pin);  // input, high Z state
		#endif
		*GPIO_PCOR |= (1 << gpio.pin);
    307e:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
    3082:	2301      	movs	r3, #1
    3084:	4083      	lsls	r3, r0
    3086:	4323      	orrs	r3, r4
    3088:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    308c:	e035      	b.n	30fa <Matrix_pin+0xae>
		#ifdef GHOSTING_MATRIX
		*GPIO_PDDR &= ~(1 << gpio.pin);  // input, high Z state
		*GPIO_PCOR |= (1 << gpio.pin);
		#else
		// Set as output pin
		*GPIO_PDDR |= (1 << gpio.pin);
    308e:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
    3092:	2101      	movs	r1, #1
    3094:	4081      	lsls	r1, r0
    3096:	4329      	orrs	r1, r5
    3098:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
		#endif

		// Configure pin with slow slew, high drive strength and GPIO mux
		*PORT_PCR = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    309c:	f44f 72a2 	mov.w	r2, #324	; 0x144
    30a0:	601a      	str	r2, [r3, #0]

		// Enabling open-drain if specified
		switch ( Matrix_type )
    30a2:	4a1a      	ldr	r2, [pc, #104]	; (310c <Matrix_pin+0xc0>)
    30a4:	7812      	ldrb	r2, [r2, #0]
    30a6:	2a02      	cmp	r2, #2
    30a8:	d127      	bne.n	30fa <Matrix_pin+0xae>
		{
		case Config_Opendrain:
			*PORT_PCR |= PORT_PCR_ODE;
    30aa:	681a      	ldr	r2, [r3, #0]
    30ac:	f042 0220 	orr.w	r2, r2, #32
    30b0:	e022      	b.n	30f8 <Matrix_pin+0xac>
	volatile unsigned int *GPIO_PDDR = (unsigned int*)(&GPIOA_PDDR) + gpio_offset;
	#ifndef GHOSTING_MATRIX
	volatile unsigned int *GPIO_PSOR = (unsigned int*)(&GPIOA_PSOR) + gpio_offset;
	#endif
	volatile unsigned int *GPIO_PCOR = (unsigned int*)(&GPIOA_PCOR) + gpio_offset;
	volatile unsigned int *GPIO_PDIR = (unsigned int*)(&GPIOA_PDIR) + gpio_offset;
    30b2:	4b17      	ldr	r3, [pc, #92]	; (3110 <Matrix_pin+0xc4>)

	case Type_Sense:
		#ifdef GHOSTING_MATRIX  // inverted
		return *GPIO_PDIR & (1 << gpio.pin) ? 0 : 1;
		#else
		return *GPIO_PDIR & (1 << gpio.pin) ? 1 : 0;
    30b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    30b8:	2301      	movs	r3, #1
    30ba:	4083      	lsls	r3, r0
    30bc:	421a      	tst	r2, r3
    30be:	bf14      	ite	ne
    30c0:	2001      	movne	r0, #1
    30c2:	2000      	moveq	r0, #0
    30c4:	e01a      	b.n	30fc <Matrix_pin+0xb0>
		#endif

	case Type_SenseSetup:
		// Set as input pin
		*GPIO_PDDR &= ~(1 << gpio.pin);
    30c6:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
    30ca:	2101      	movs	r1, #1
    30cc:	4081      	lsls	r1, r0
    30ce:	ea25 0101 	bic.w	r1, r5, r1
    30d2:	f844 1022 	str.w	r1, [r4, r2, lsl #2]

		// Configure pin with passive filter and GPIO mux
		*PORT_PCR = PORT_PCR_PFE | PORT_PCR_MUX(1);
    30d6:	f44f 7288 	mov.w	r2, #272	; 0x110
    30da:	601a      	str	r2, [r3, #0]

		// Pull resistor config
		switch ( Matrix_type )
    30dc:	4a0b      	ldr	r2, [pc, #44]	; (310c <Matrix_pin+0xc0>)
    30de:	7810      	ldrb	r0, [r2, #0]
    30e0:	b128      	cbz	r0, 30ee <Matrix_pin+0xa2>
    30e2:	2801      	cmp	r0, #1
    30e4:	d109      	bne.n	30fa <Matrix_pin+0xae>
		case Config_Pullup:
			*PORT_PCR |= PORT_PCR_PE | PORT_PCR_PS;
			break;

		case Config_Pulldown:
			*PORT_PCR |= PORT_PCR_PE;
    30e6:	681a      	ldr	r2, [r3, #0]
    30e8:	f042 0202 	orr.w	r2, r2, #2
    30ec:	e004      	b.n	30f8 <Matrix_pin+0xac>

		// Pull resistor config
		switch ( Matrix_type )
		{
		case Config_Pullup:
			*PORT_PCR |= PORT_PCR_PE | PORT_PCR_PS;
    30ee:	681a      	ldr	r2, [r3, #0]
    30f0:	f042 0203 	orr.w	r2, r2, #3
    30f4:	601a      	str	r2, [r3, #0]
			break;
    30f6:	e001      	b.n	30fc <Matrix_pin+0xb0>

		case Config_Pulldown:
			*PORT_PCR |= PORT_PCR_PE;
    30f8:	601a      	str	r2, [r3, #0]
			break;
		}
		break;
	}

	return 0;
    30fa:	2000      	movs	r0, #0
}
    30fc:	b003      	add	sp, #12
    30fe:	bd30      	pop	{r4, r5, pc}
    3100:	400ff014 	.word	0x400ff014
    3104:	400ff004 	.word	0x400ff004
    3108:	400ff008 	.word	0x400ff008
    310c:	1fff89c4 	.word	0x1fff89c4
    3110:	400ff010 	.word	0x400ff010

00003114 <Matrix_setup>:

// Setup GPIO pins for matrix scanning
void Matrix_setup()
{
    3114:	b538      	push	{r3, r4, r5, lr}
	// Register Matrix CLI dictionary
	CLI_registerDictionary( matrixCLIDict, matrixCLIDictName );
    3116:	481e      	ldr	r0, [pc, #120]	; (3190 <Matrix_setup+0x7c>)
    3118:	491e      	ldr	r1, [pc, #120]	; (3194 <Matrix_setup+0x80>)
    311a:	f004 faf1 	bl	7700 <CLI_registerDictionary>
    311e:	2400      	movs	r4, #0

	// Setup Strobe Pins
	for ( uint8_t pin = 0; pin < Matrix_colsNum; pin++ )
	{
		Matrix_pin( Matrix_cols[ pin ], Type_StrobeSetup );
    3120:	4b1d      	ldr	r3, [pc, #116]	; (3198 <Matrix_setup+0x84>)
    3122:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
    3126:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    312a:	2102      	movs	r1, #2
    312c:	7858      	ldrb	r0, [r3, #1]
    312e:	3401      	adds	r4, #1
    3130:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    3134:	f7ff ff8a 	bl	304c <Matrix_pin>
{
	// Register Matrix CLI dictionary
	CLI_registerDictionary( matrixCLIDict, matrixCLIDictName );

	// Setup Strobe Pins
	for ( uint8_t pin = 0; pin < Matrix_colsNum; pin++ )
    3138:	2c09      	cmp	r4, #9
    313a:	d1f1      	bne.n	3120 <Matrix_setup+0xc>
    313c:	2400      	movs	r4, #0
	}

	// Setup Sense Pins
	for ( uint8_t pin = 0; pin < Matrix_rowsNum; pin++ )
	{
		Matrix_pin( Matrix_rows[ pin ], Type_SenseSetup );
    313e:	4b17      	ldr	r3, [pc, #92]	; (319c <Matrix_setup+0x88>)
    3140:	f813 2014 	ldrb.w	r2, [r3, r4, lsl #1]
    3144:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    3148:	2104      	movs	r1, #4
    314a:	7858      	ldrb	r0, [r3, #1]
    314c:	3401      	adds	r4, #1
    314e:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    3152:	f7ff ff7b 	bl	304c <Matrix_pin>
		col_ghost_old[pin] = 0;
		#endif
	}

	// Setup Sense Pins
	for ( uint8_t pin = 0; pin < Matrix_rowsNum; pin++ )
    3156:	2c05      	cmp	r4, #5
    3158:	d1f1      	bne.n	313e <Matrix_setup+0x2a>
    315a:	4a11      	ldr	r2, [pc, #68]	; (31a0 <Matrix_setup+0x8c>)
    315c:	2100      	movs	r1, #0
    315e:	4615      	mov	r5, r2
	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
		Matrix_scanArray[ item ].curState         = KeyState_Off;
		Matrix_scanArray[ item ].activeCount      = 0;
    3160:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
	}

	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
    3164:	2300      	movs	r3, #0
		Matrix_scanArray[ item ].curState         = KeyState_Off;
		Matrix_scanArray[ item ].activeCount      = 0;
    3166:	1928      	adds	r0, r5, r4
    3168:	3101      	adds	r1, #1
	}

	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
    316a:	7113      	strb	r3, [r2, #4]
		Matrix_scanArray[ item ].curState         = KeyState_Off;
    316c:	7153      	strb	r3, [r2, #5]
		row_ghost_old[pin] = 0;
		#endif
	}

	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
    316e:	292d      	cmp	r1, #45	; 0x2d
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
		Matrix_scanArray[ item ].curState         = KeyState_Off;
		Matrix_scanArray[ item ].activeCount      = 0;
    3170:	552b      	strb	r3, [r5, r4]
		Matrix_scanArray[ item ].inactiveCount    = DebounceDivThreshold_define; // Start at 'off' steady state
    3172:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
	{
		Matrix_scanArray[ item ].prevState        = KeyState_Off;
		Matrix_scanArray[ item ].curState         = KeyState_Off;
		Matrix_scanArray[ item ].activeCount      = 0;
    3176:	7043      	strb	r3, [r0, #1]
		Matrix_scanArray[ item ].inactiveCount    = DebounceDivThreshold_define; // Start at 'off' steady state
    3178:	7084      	strb	r4, [r0, #2]
    317a:	70c4      	strb	r4, [r0, #3]
    317c:	f102 0207 	add.w	r2, r2, #7
		Matrix_scanArray[ item ].prevDecisionTime = 0;
    3180:	f802 3c01 	strb.w	r3, [r2, #-1]
		row_ghost_old[pin] = 0;
		#endif
	}

	// Clear out Debounce Array
	for ( uint8_t item = 0; item < Matrix_maxKeys; item++ )
    3184:	d1ec      	bne.n	3160 <Matrix_setup+0x4c>
		Matrix_ghostArray[ item ].saved           = KeyState_Off;
		#endif
	}

	// Clear scan stats counters
	matrixMaxScans  = 0;
    3186:	4a07      	ldr	r2, [pc, #28]	; (31a4 <Matrix_setup+0x90>)
    3188:	8013      	strh	r3, [r2, #0]
	matrixPrevScans = 0;
    318a:	4a07      	ldr	r2, [pc, #28]	; (31a8 <Matrix_setup+0x94>)
    318c:	8013      	strh	r3, [r2, #0]
    318e:	bd38      	pop	{r3, r4, r5, pc}
    3190:	000086c4 	.word	0x000086c4
    3194:	000086aa 	.word	0x000086aa
    3198:	1fff89a8 	.word	0x1fff89a8
    319c:	1fff89ba 	.word	0x1fff89ba
    31a0:	1fff9c5f 	.word	0x1fff9c5f
    31a4:	1fff9192 	.word	0x1fff9192
    31a8:	1fff9190 	.word	0x1fff9190

000031ac <Matrix_keyPositionDebug>:
}

void Matrix_keyPositionDebug( KeyPosition pos )
{
	// Depending on the state, use a different flag + color
	switch ( pos )
    31ac:	2803      	cmp	r0, #3
    31ae:	d80b      	bhi.n	31c8 <Matrix_keyPositionDebug+0x1c>
    31b0:	e8df f000 	tbb	[pc, r0]
    31b4:	08060402 	.word	0x08060402
	{
	case KeyState_Off:
		print("\033[1mO\033[0m");
    31b8:	4805      	ldr	r0, [pc, #20]	; (31d0 <Matrix_keyPositionDebug+0x24>)
    31ba:	e006      	b.n	31ca <Matrix_keyPositionDebug+0x1e>
		break;

	case KeyState_Press:
		print("\033[1;33mP\033[0m");
    31bc:	4805      	ldr	r0, [pc, #20]	; (31d4 <Matrix_keyPositionDebug+0x28>)
    31be:	e004      	b.n	31ca <Matrix_keyPositionDebug+0x1e>
		break;

	case KeyState_Hold:
		print("\033[1;32mH\033[0m");
    31c0:	4805      	ldr	r0, [pc, #20]	; (31d8 <Matrix_keyPositionDebug+0x2c>)
    31c2:	e002      	b.n	31ca <Matrix_keyPositionDebug+0x1e>
		break;

	case KeyState_Release:
		print("\033[1;35mR\033[0m");
    31c4:	4805      	ldr	r0, [pc, #20]	; (31dc <Matrix_keyPositionDebug+0x30>)
    31c6:	e000      	b.n	31ca <Matrix_keyPositionDebug+0x1e>
		break;

	case KeyState_Invalid:
	default:
		print("\033[1;31mI\033[0m");
    31c8:	4805      	ldr	r0, [pc, #20]	; (31e0 <Matrix_keyPositionDebug+0x34>)
    31ca:	f004 bced 	b.w	7ba8 <_print>
    31ce:	bf00      	nop
    31d0:	00008497 	.word	0x00008497
    31d4:	000084a1 	.word	0x000084a1
    31d8:	000084ae 	.word	0x000084ae
    31dc:	000084bb 	.word	0x000084bb
    31e0:	000084c8 	.word	0x000084c8

000031e4 <Matrix_scan>:


// Scan the matrix for keypresses
// NOTE: scanNum should be reset to 0 after a USB send (to reset all the counters)
void Matrix_scan( uint16_t scanNum )
{
    31e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ( !( Matrix_divCounter++ & (1 << ( DebounceThrottleDiv_define - 1 )) ) )
		return;
#endif

	// Increment stats counters
	if ( scanNum > matrixMaxScans ) matrixMaxScans = scanNum;
    31e8:	4b9d      	ldr	r3, [pc, #628]	; (3460 <Matrix_scan+0x27c>)
    31ea:	9301      	str	r3, [sp, #4]
    31ec:	881a      	ldrh	r2, [r3, #0]
    31ee:	4282      	cmp	r2, r0
    31f0:	bf38      	it	cc
    31f2:	8018      	strhcc	r0, [r3, #0]


// Scan the matrix for keypresses
// NOTE: scanNum should be reset to 0 after a USB send (to reset all the counters)
void Matrix_scan( uint16_t scanNum )
{
    31f4:	4607      	mov	r7, r0
    31f6:	4b9b      	ldr	r3, [pc, #620]	; (3464 <Matrix_scan+0x280>)
		return;
#endif

	// Increment stats counters
	if ( scanNum > matrixMaxScans ) matrixMaxScans = scanNum;
	if ( scanNum == 0 )
    31f8:	b920      	cbnz	r0, 3204 <Matrix_scan+0x20>
	{
		matrixPrevScans = matrixCurScans;
    31fa:	4a9b      	ldr	r2, [pc, #620]	; (3468 <Matrix_scan+0x284>)
    31fc:	8819      	ldrh	r1, [r3, #0]
    31fe:	8011      	strh	r1, [r2, #0]
		matrixCurScans = 0;
    3200:	8018      	strh	r0, [r3, #0]
    3202:	e002      	b.n	320a <Matrix_scan+0x26>
	}
	else
	{
		matrixCurScans++;
    3204:	881a      	ldrh	r2, [r3, #0]
    3206:	3201      	adds	r2, #1
    3208:	801a      	strh	r2, [r3, #0]
	}

	// Read systick for event scheduling
	uint8_t currentTime = (uint8_t)systick_millis_count;
    320a:	4b98      	ldr	r3, [pc, #608]	; (346c <Matrix_scan+0x288>)
    320c:	681b      	ldr	r3, [r3, #0]
    320e:	2600      	movs	r6, #0
    3210:	fa5f fb83 	uxtb.w	fp, r3
		uint32_t start = micros();
		while ((micros() - start) < STROBE_DELAY);
		#endif

		// Strobe Pin
		Matrix_pin( Matrix_cols[ strobe ], Type_StrobeOn );
    3214:	f8df a26c 	ldr.w	sl, [pc, #620]	; 3484 <Matrix_scan+0x2a0>
    3218:	0072      	lsls	r2, r6, #1
    321a:	9200      	str	r2, [sp, #0]
    321c:	4452      	add	r2, sl
    321e:	f81a 3016 	ldrb.w	r3, [sl, r6, lsl #1]
    3222:	7850      	ldrb	r0, [r2, #1]
    3224:	2100      	movs	r1, #0
    3226:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    322a:	f7ff ff0f 	bl	304c <Matrix_pin>
    322e:	b2f4      	uxtb	r4, r6
    3230:	f04f 0800 	mov.w	r8, #0
    3234:	4d8e      	ldr	r5, [pc, #568]	; (3470 <Matrix_scan+0x28c>)
    3236:	ea4f 09c4 	mov.w	r9, r4, lsl #3
			// Key position
			uint8_t key = Matrix_colsNum * sense + strobe;
			KeyState *state = &Matrix_scanArray[ key ];

			// If first scan, reset state
			if ( scanNum == 0 )
    323a:	b937      	cbnz	r7, 324a <Matrix_scan+0x66>
			{
				// Set previous state, and reset current state
				state->prevState = state->curState;
    323c:	ebc4 0209 	rsb	r2, r4, r9
    3240:	442a      	add	r2, r5
    3242:	7951      	ldrb	r1, [r2, #5]
    3244:	7111      	strb	r1, [r2, #4]
				state->curState  = KeyState_Invalid;
    3246:	2104      	movs	r1, #4
    3248:	7151      	strb	r1, [r2, #5]
			// This means there is a maximum of scan 13 cycles on a perfect off to on transition
			//  (coming from a steady state 0xFFFF off scans)
			// Somewhat longer with switch bounciness
			// The advantage of this is that the count is ongoing and never needs to be reset
			// State still needs to be kept track of to deal with what to send to the Macro module
			if ( Matrix_pin( Matrix_rows[ sense ], Type_Sense ) )
    324a:	4a8a      	ldr	r2, [pc, #552]	; (3474 <Matrix_scan+0x290>)
    324c:	f812 1018 	ldrb.w	r1, [r2, r8, lsl #1]
    3250:	eb02 0248 	add.w	r2, r2, r8, lsl #1
    3254:	7850      	ldrb	r0, [r2, #1]
    3256:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    325a:	2103      	movs	r1, #3
    325c:	f7ff fef6 	bl	304c <Matrix_pin>
    3260:	b178      	cbz	r0, 3282 <Matrix_scan+0x9e>
			{
				// Only update if not going to wrap around
				if ( state->activeCount < DebounceDivThreshold_define ) state->activeCount += 1;
    3262:	ebc4 0109 	rsb	r1, r4, r9
    3266:	f64f 70ff 	movw	r0, #65535	; 0xffff
    326a:	5a6a      	ldrh	r2, [r5, r1]
    326c:	4282      	cmp	r2, r0
    326e:	bf1c      	itt	ne
    3270:	3201      	addne	r2, #1
    3272:	526a      	strhne	r2, [r5, r1]
				state->inactiveCount >>= 1;
    3274:	ebc4 0209 	rsb	r2, r4, r9
    3278:	442a      	add	r2, r5
    327a:	8851      	ldrh	r1, [r2, #2]
    327c:	0849      	lsrs	r1, r1, #1
    327e:	8051      	strh	r1, [r2, #2]
    3280:	e00e      	b.n	32a0 <Matrix_scan+0xbc>
			}
			// Signal Not Detected
			else
			{
				// Only update if not going to wrap around
				if ( state->inactiveCount < DebounceDivThreshold_define ) state->inactiveCount += 1;
    3282:	ebc4 0209 	rsb	r2, r4, r9
    3286:	442a      	add	r2, r5
    3288:	f64f 70ff 	movw	r0, #65535	; 0xffff
    328c:	8851      	ldrh	r1, [r2, #2]
    328e:	4281      	cmp	r1, r0
    3290:	bf1c      	itt	ne
    3292:	3101      	addne	r1, #1
    3294:	8051      	strhne	r1, [r2, #2]
				state->activeCount >>= 1;
    3296:	ebc4 0109 	rsb	r1, r4, r9
    329a:	5a6a      	ldrh	r2, [r5, r1]
    329c:	0852      	lsrs	r2, r2, #1
    329e:	526a      	strh	r2, [r5, r1]
			// Check for state change if it hasn't been set
			// But only if enough time has passed since last state change
			// Only check if the minimum number of scans has been met
			//   the current state is invalid
			//   and either active or inactive count is over the debounce threshold
			if ( state->curState == KeyState_Invalid )
    32a0:	ebc4 0209 	rsb	r2, r4, r9
    32a4:	442a      	add	r2, r5
    32a6:	7951      	ldrb	r1, [r2, #5]
    32a8:	2904      	cmp	r1, #4
    32aa:	d157      	bne.n	335c <Matrix_scan+0x178>
			{
				// Determine time since last decision
				uint8_t lastTransition = currentTime - state->prevDecisionTime;
    32ac:	7991      	ldrb	r1, [r2, #6]

				// Attempt state transition
				switch ( state->prevState )
    32ae:	7910      	ldrb	r0, [r2, #4]
			//   the current state is invalid
			//   and either active or inactive count is over the debounce threshold
			if ( state->curState == KeyState_Invalid )
			{
				// Determine time since last decision
				uint8_t lastTransition = currentTime - state->prevDecisionTime;
    32b0:	ebc1 010b 	rsb	r1, r1, fp
    32b4:	b2c9      	uxtb	r1, r1

				// Attempt state transition
				switch ( state->prevState )
    32b6:	2803      	cmp	r0, #3
    32b8:	d824      	bhi.n	3304 <Matrix_scan+0x120>
    32ba:	e8df f000 	tbb	[pc, r0]
    32be:	0211      	.short	0x0211
    32c0:	1102      	.short	0x1102
				{
				case KeyState_Press:
				case KeyState_Hold:
					if ( state->activeCount > state->inactiveCount )
    32c2:	ebc4 0209 	rsb	r2, r4, r9
    32c6:	442a      	add	r2, r5
    32c8:	f8b2 c000 	ldrh.w	ip, [r2]
    32cc:	f8b2 e002 	ldrh.w	lr, [r2, #2]
    32d0:	45f4      	cmp	ip, lr
    32d2:	d901      	bls.n	32d8 <Matrix_scan+0xf4>
					{
						state->curState = KeyState_Hold;
    32d4:	2102      	movs	r1, #2
    32d6:	e011      	b.n	32fc <Matrix_scan+0x118>
					}
					else
					{
						// If not enough time has passed since Hold
						// Keep previous state
						if ( lastTransition < MinDebounceTime_define )
    32d8:	2904      	cmp	r1, #4
    32da:	d90c      	bls.n	32f6 <Matrix_scan+0x112>
							//warn_print("FAST Release stopped");
							state->curState = state->prevState;
							continue;
						}

						state->curState = KeyState_Release;
    32dc:	2103      	movs	r1, #3
    32de:	e00d      	b.n	32fc <Matrix_scan+0x118>
					}
					break;

				case KeyState_Release:
				case KeyState_Off:
					if ( state->activeCount > state->inactiveCount )
    32e0:	ebc4 0209 	rsb	r2, r4, r9
    32e4:	442a      	add	r2, r5
    32e6:	f8b2 c000 	ldrh.w	ip, [r2]
    32ea:	f8b2 e002 	ldrh.w	lr, [r2, #2]
    32ee:	45f4      	cmp	ip, lr
    32f0:	d906      	bls.n	3300 <Matrix_scan+0x11c>
					{
						// If not enough time has passed since Hold
						// Keep previous state
						if ( lastTransition < MinDebounceTime_define )
    32f2:	2904      	cmp	r1, #4
    32f4:	d801      	bhi.n	32fa <Matrix_scan+0x116>
						{
							//warn_print("FAST Press stopped");
							state->curState = state->prevState;
    32f6:	7150      	strb	r0, [r2, #5]
							continue;
    32f8:	e030      	b.n	335c <Matrix_scan+0x178>
						}

						state->curState = KeyState_Press;
    32fa:	2101      	movs	r1, #1
    32fc:	7151      	strb	r1, [r2, #5]
    32fe:	e004      	b.n	330a <Matrix_scan+0x126>
					}
					else
					{
						state->curState = KeyState_Off;
    3300:	2100      	movs	r1, #0
    3302:	e7fb      	b.n	32fc <Matrix_scan+0x118>
					}
					break;

				case KeyState_Invalid:
				default:
					erro_print("Matrix scan bug!! Report me!");
    3304:	485c      	ldr	r0, [pc, #368]	; (3478 <Matrix_scan+0x294>)
    3306:	f004 fc4f 	bl	7ba8 <_print>
					break;
				}

				// Update decision time
				state->prevDecisionTime = currentTime;
    330a:	ebc4 0309 	rsb	r3, r4, r9
    330e:	eb05 0903 	add.w	r9, r5, r3

				// Send keystate to macro module
				#ifndef GHOSTING_MATRIX
				Macro_keyState( key, state->curState );
    3312:	4620      	mov	r0, r4
					erro_print("Matrix scan bug!! Report me!");
					break;
				}

				// Update decision time
				state->prevDecisionTime = currentTime;
    3314:	f889 b006 	strb.w	fp, [r9, #6]

				// Send keystate to macro module
				#ifndef GHOSTING_MATRIX
				Macro_keyState( key, state->curState );
    3318:	f899 1005 	ldrb.w	r1, [r9, #5]
    331c:	f002 f868 	bl	53f0 <Macro_keyState>
				#endif

				// Matrix Debug, only if there is a state change
				if ( matrixDebugMode && state->curState != state->prevState )
    3320:	4a56      	ldr	r2, [pc, #344]	; (347c <Matrix_scan+0x298>)
    3322:	7812      	ldrb	r2, [r2, #0]
    3324:	b1d2      	cbz	r2, 335c <Matrix_scan+0x178>
    3326:	f899 1005 	ldrb.w	r1, [r9, #5]
    332a:	f899 0004 	ldrb.w	r0, [r9, #4]
    332e:	4288      	cmp	r0, r1
    3330:	d014      	beq.n	335c <Matrix_scan+0x178>
				{
					// Basic debug output
					if ( matrixDebugMode == 1 && state->curState == KeyState_Press )
    3332:	2a01      	cmp	r2, #1
    3334:	d105      	bne.n	3342 <Matrix_scan+0x15e>
    3336:	2901      	cmp	r1, #1
    3338:	d110      	bne.n	335c <Matrix_scan+0x178>
					{
						printHex( key );
    333a:	4620      	mov	r0, r4
    333c:	f004 fcd6 	bl	7cec <printHex_op>
    3340:	e009      	b.n	3356 <Matrix_scan+0x172>
						print(" ");
					}
					// State transition debug output
					else if ( matrixDebugMode == 2 )
    3342:	2a02      	cmp	r2, #2
    3344:	d10a      	bne.n	335c <Matrix_scan+0x178>
					{
						printHex( key );
    3346:	4620      	mov	r0, r4
    3348:	2101      	movs	r1, #1
    334a:	f004 fccf 	bl	7cec <printHex_op>
						Matrix_keyPositionDebug( state->curState );
    334e:	f899 0005 	ldrb.w	r0, [r9, #5]
    3352:	f7ff ff2b 	bl	31ac <Matrix_keyPositionDebug>
						print(" ");
    3356:	484a      	ldr	r0, [pc, #296]	; (3480 <Matrix_scan+0x29c>)
    3358:	f004 fc26 	bl	7ba8 <_print>
    335c:	f108 0801 	add.w	r8, r8, #1
    3360:	3409      	adds	r4, #9
		start = micros();
		while ((micros() - start) < STROBE_DELAY);
		#endif

		// Scan each of the sense pins
		for ( uint8_t sense = 0; sense < Matrix_rowsNum; sense++ )
    3362:	f1b8 0f05 	cmp.w	r8, #5
    3366:	b2e4      	uxtb	r4, r4
    3368:	f47f af64 	bne.w	3234 <Matrix_scan+0x50>
				}
			}
		}

		// Unstrobe Pin
		Matrix_pin( Matrix_cols[ strobe ], Type_StrobeOff );
    336c:	9a00      	ldr	r2, [sp, #0]
    336e:	f81a 3016 	ldrb.w	r3, [sl, r6, lsl #1]
    3372:	4691      	mov	r9, r2
    3374:	4a43      	ldr	r2, [pc, #268]	; (3484 <Matrix_scan+0x2a0>)
    3376:	4491      	add	r9, r2
    3378:	2101      	movs	r1, #1
    337a:	f899 0001 	ldrb.w	r0, [r9, #1]
    337e:	3601      	adds	r6, #1
    3380:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    3384:	f7ff fe62 	bl	304c <Matrix_pin>

	// Read systick for event scheduling
	uint8_t currentTime = (uint8_t)systick_millis_count;

	// For each strobe, scan each of the sense pins
	for ( uint8_t strobe = 0; strobe < Matrix_colsNum; strobe++ )
    3388:	2e09      	cmp	r6, #9
    338a:	f47f af43 	bne.w	3214 <Matrix_scan+0x30>
#endif
	// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .


	// State Table Output Debug
	if ( matrixDebugStateCounter > 0 )
    338e:	4a3e      	ldr	r2, [pc, #248]	; (3488 <Matrix_scan+0x2a4>)
    3390:	8813      	ldrh	r3, [r2, #0]
    3392:	2b00      	cmp	r3, #0
    3394:	d060      	beq.n	3458 <Matrix_scan+0x274>
	{
		// Decrement counter
		matrixDebugStateCounter--;
    3396:	3b01      	subs	r3, #1

		// Output stats on number of scans being done per USB send
		print( NL );
    3398:	483c      	ldr	r0, [pc, #240]	; (348c <Matrix_scan+0x2a8>)

	// State Table Output Debug
	if ( matrixDebugStateCounter > 0 )
	{
		// Decrement counter
		matrixDebugStateCounter--;
    339a:	8013      	strh	r3, [r2, #0]

		// Output stats on number of scans being done per USB send
		print( NL );
    339c:	f004 fc04 	bl	7ba8 <_print>
		info_msg("Max scans:      ");
    33a0:	483b      	ldr	r0, [pc, #236]	; (3490 <Matrix_scan+0x2ac>)
    33a2:	4e33      	ldr	r6, [pc, #204]	; (3470 <Matrix_scan+0x28c>)
    33a4:	f004 fc00 	bl	7ba8 <_print>
		printHex( matrixMaxScans );
    33a8:	9b01      	ldr	r3, [sp, #4]
    33aa:	2101      	movs	r1, #1
    33ac:	8818      	ldrh	r0, [r3, #0]
    33ae:	f004 fc9d 	bl	7cec <printHex_op>
		print( NL );
    33b2:	4836      	ldr	r0, [pc, #216]	; (348c <Matrix_scan+0x2a8>)
    33b4:	f004 fbf8 	bl	7ba8 <_print>
		info_msg("Previous scans: ");
    33b8:	4836      	ldr	r0, [pc, #216]	; (3494 <Matrix_scan+0x2b0>)
    33ba:	f004 fbf5 	bl	7ba8 <_print>
		printHex( matrixPrevScans );
    33be:	4b2a      	ldr	r3, [pc, #168]	; (3468 <Matrix_scan+0x284>)
    33c0:	2101      	movs	r1, #1
    33c2:	8818      	ldrh	r0, [r3, #0]
    33c4:	f004 fc92 	bl	7cec <printHex_op>
		print( NL );
    33c8:	4830      	ldr	r0, [pc, #192]	; (348c <Matrix_scan+0x2a8>)
    33ca:	f004 fbed 	bl	7ba8 <_print>

		// Output current scan number
		info_msg("Scan Number:    ");
    33ce:	4832      	ldr	r0, [pc, #200]	; (3498 <Matrix_scan+0x2b4>)
    33d0:	f004 fbea 	bl	7ba8 <_print>
		printHex( scanNum );
    33d4:	2101      	movs	r1, #1
    33d6:	4638      	mov	r0, r7
    33d8:	f004 fc88 	bl	7cec <printHex_op>
		print( NL );
    33dc:	482b      	ldr	r0, [pc, #172]	; (348c <Matrix_scan+0x2a8>)
    33de:	f004 fbe3 	bl	7ba8 <_print>

		// Display the state info for each key
		print("<key>:<previous state><current state> <active count> <inactive count>");
    33e2:	482e      	ldr	r0, [pc, #184]	; (349c <Matrix_scan+0x2b8>)
    33e4:	f004 fbe0 	bl	7ba8 <_print>
    33e8:	2400      	movs	r4, #0
		for ( uint8_t key = 0; key < Matrix_maxKeys; key++ )
		{
			// Every 4 keys, put a newline
			if ( key % 4 == 0 )
    33ea:	07a3      	lsls	r3, r4, #30
    33ec:	d102      	bne.n	33f4 <Matrix_scan+0x210>
				print( NL );
    33ee:	4827      	ldr	r0, [pc, #156]	; (348c <Matrix_scan+0x2a8>)
    33f0:	f004 fbda 	bl	7ba8 <_print>

			print("\033[1m0x");
    33f4:	482a      	ldr	r0, [pc, #168]	; (34a0 <Matrix_scan+0x2bc>)
    33f6:	f004 fbd7 	bl	7ba8 <_print>
			printHex_op( key, 2 );
    33fa:	2102      	movs	r1, #2
    33fc:	b2a0      	uxth	r0, r4
    33fe:	f004 fc75 	bl	7cec <printHex_op>
			print("\033[0m");
    3402:	4828      	ldr	r0, [pc, #160]	; (34a4 <Matrix_scan+0x2c0>)
    3404:	f004 fbd0 	bl	7ba8 <_print>
			print(":");
    3408:	4827      	ldr	r0, [pc, #156]	; (34a8 <Matrix_scan+0x2c4>)
    340a:	f004 fbcd 	bl	7ba8 <_print>
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].prevState );
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].curState );
			print(" 0x");
			printHex_op( Matrix_scanArray[ key ].activeCount, 4 );
    340e:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3

			print("\033[1m0x");
			printHex_op( key, 2 );
			print("\033[0m");
			print(":");
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].prevState );
    3412:	7930      	ldrb	r0, [r6, #4]
    3414:	f7ff feca 	bl	31ac <Matrix_keyPositionDebug>
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].curState );
			print(" 0x");
			printHex_op( Matrix_scanArray[ key ].activeCount, 4 );
    3418:	442f      	add	r7, r5
			print("\033[1m0x");
			printHex_op( key, 2 );
			print("\033[0m");
			print(":");
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].prevState );
			Matrix_keyPositionDebug( Matrix_scanArray[ key ].curState );
    341a:	7970      	ldrb	r0, [r6, #5]
    341c:	f7ff fec6 	bl	31ac <Matrix_keyPositionDebug>
			print(" 0x");
    3420:	4822      	ldr	r0, [pc, #136]	; (34ac <Matrix_scan+0x2c8>)
    3422:	f004 fbc1 	bl	7ba8 <_print>
			printHex_op( Matrix_scanArray[ key ].activeCount, 4 );
    3426:	2104      	movs	r1, #4
    3428:	8838      	ldrh	r0, [r7, #0]
    342a:	f004 fc5f 	bl	7cec <printHex_op>
			print(" 0x");
    342e:	481f      	ldr	r0, [pc, #124]	; (34ac <Matrix_scan+0x2c8>)
    3430:	f004 fbba 	bl	7ba8 <_print>
			printHex_op( Matrix_scanArray[ key ].inactiveCount, 4 );
    3434:	8878      	ldrh	r0, [r7, #2]
    3436:	2104      	movs	r1, #4
    3438:	f004 fc58 	bl	7cec <printHex_op>
    343c:	3401      	adds	r4, #1
			print(" ");
    343e:	4810      	ldr	r0, [pc, #64]	; (3480 <Matrix_scan+0x29c>)
    3440:	f004 fbb2 	bl	7ba8 <_print>
		printHex( scanNum );
		print( NL );

		// Display the state info for each key
		print("<key>:<previous state><current state> <active count> <inactive count>");
		for ( uint8_t key = 0; key < Matrix_maxKeys; key++ )
    3444:	2c2d      	cmp	r4, #45	; 0x2d
    3446:	f106 0607 	add.w	r6, r6, #7
    344a:	d1ce      	bne.n	33ea <Matrix_scan+0x206>
			print(" 0x");
			printHex_op( Matrix_scanArray[ key ].inactiveCount, 4 );
			print(" ");
		}

		print( NL );
    344c:	480f      	ldr	r0, [pc, #60]	; (348c <Matrix_scan+0x2a8>)
	}
}
    344e:	b003      	add	sp, #12
    3450:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			print(" 0x");
			printHex_op( Matrix_scanArray[ key ].inactiveCount, 4 );
			print(" ");
		}

		print( NL );
    3454:	f004 bba8 	b.w	7ba8 <_print>
	}
}
    3458:	b003      	add	sp, #12
    345a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    345e:	bf00      	nop
    3460:	1fff9192 	.word	0x1fff9192
    3464:	1fff918e 	.word	0x1fff918e
    3468:	1fff9190 	.word	0x1fff9190
    346c:	1fff9184 	.word	0x1fff9184
    3470:	1fff9c5f 	.word	0x1fff9c5f
    3474:	1fff89ba 	.word	0x1fff89ba
    3478:	000084d5 	.word	0x000084d5
    347c:	1fff9194 	.word	0x1fff9194
    3480:	0000852a 	.word	0x0000852a
    3484:	1fff89a8 	.word	0x1fff89a8
    3488:	1fff9196 	.word	0x1fff9196
    348c:	0000bc21 	.word	0x0000bc21
    3490:	00008509 	.word	0x00008509
    3494:	0000852c 	.word	0x0000852c
    3498:	0000854f 	.word	0x0000854f
    349c:	00008572 	.word	0x00008572
    34a0:	000085b8 	.word	0x000085b8
    34a4:	0000ac7c 	.word	0x0000ac7c
    34a8:	000085bf 	.word	0x000085bf
    34ac:	000085c1 	.word	0x000085c1

000034b0 <Matrix_currentChange>:


// Called by parent scan module whenever the available current changes
// current - mA
void Matrix_currentChange( unsigned int current )
{
    34b0:	4770      	bx	lr
    34b2:	0000      	movs	r0, r0

000034b4 <cliFunc_lcdColor>:
	print( NL );
	LCD_writeControlReg( cmd );
}

void cliFunc_lcdColor( char* args )
{
    34b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    34b6:	2400      	movs	r4, #0
    34b8:	9001      	str	r0, [sp, #4]

	// Parse integers from 3 arguments
	for ( uint8_t color = 0; color < 3; color++ )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    34ba:	9801      	ldr	r0, [sp, #4]
    34bc:	4669      	mov	r1, sp
    34be:	aa01      	add	r2, sp, #4
    34c0:	f004 f8aa 	bl	7618 <CLI_argumentIsolation>

		// Give up if not enough args given
		if ( *arg1Ptr == '\0' )
    34c4:	9800      	ldr	r0, [sp, #0]
    34c6:	7803      	ldrb	r3, [r0, #0]
    34c8:	b18b      	cbz	r3, 34ee <cliFunc_lcdColor+0x3a>
			return;

		// Convert argument to integer
		rgb[ color ] = numToInt( arg1Ptr );
    34ca:	f004 fc67 	bl	7d9c <numToInt>
    34ce:	ab02      	add	r3, sp, #8
    34d0:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
    34d4:	3401      	adds	r4, #1

	// Colors
	uint16_t rgb[3]; // Red, Green, Blue

	// Parse integers from 3 arguments
	for ( uint8_t color = 0; color < 3; color++ )
    34d6:	2c03      	cmp	r4, #3
    34d8:	d1ef      	bne.n	34ba <cliFunc_lcdColor+0x6>
		// Convert argument to integer
		rgb[ color ] = numToInt( arg1Ptr );
	}

	// Set PWM channels
	FTM0_C0V = rgb[0];
    34da:	4b06      	ldr	r3, [pc, #24]	; (34f4 <cliFunc_lcdColor+0x40>)
    34dc:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    34e0:	601a      	str	r2, [r3, #0]
	FTM0_C1V = rgb[1];
    34e2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    34e6:	609a      	str	r2, [r3, #8]
	FTM0_C2V = rgb[2];
    34e8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    34ec:	611a      	str	r2, [r3, #16]
}
    34ee:	b004      	add	sp, #16
    34f0:	bd10      	pop	{r4, pc}
    34f2:	bf00      	nop
    34f4:	40038010 	.word	0x40038010

000034f8 <SPI_write>:
		| SPI_CTAR_PBR(0) | SPI_CTAR_BR(7);
}

// Write buffer to SPI FIFO
void SPI_write( uint8_t *buffer, uint8_t len )
{
    34f8:	b530      	push	{r4, r5, lr}

	for ( uint8_t byte = 0; byte < len; byte++ )
    34fa:	4602      	mov	r2, r0
    34fc:	1a13      	subs	r3, r2, r0
    34fe:	b2db      	uxtb	r3, r3
    3500:	428b      	cmp	r3, r1
    3502:	d217      	bcs.n	3534 <L_107_delayMicroseconds+0x24>
	{
		// Wait for SPI TxFIFO to have 4 or fewer entries
		while ( !( SPI0_SR & SPI_SR_TFFF ) )
    3504:	4b0c      	ldr	r3, [pc, #48]	; (3538 <L_107_delayMicroseconds+0x28>)
    3506:	681c      	ldr	r4, [r3, #0]
    3508:	01a4      	lsls	r4, r4, #6
    350a:	d404      	bmi.n	3516 <L_107_delayMicroseconds+0x6>
    350c:	f44f 73a0 	mov.w	r3, #320	; 0x140

00003510 <L_107_delayMicroseconds>:
    3510:	3b01      	subs	r3, #1
    3512:	d1fd      	bne.n	3510 <L_107_delayMicroseconds>
    3514:	e7f6      	b.n	3504 <SPI_write+0xc>
			delayMicroseconds(10);

		// Write byte to TxFIFO
		// CS0, CTAR0
		SPI0_PUSHR = ( buffer[ byte ] & 0xff ) | SPI_PUSHR_PCS(1);
    3516:	f812 4b01 	ldrb.w	r4, [r2], #1
    351a:	4d08      	ldr	r5, [pc, #32]	; (353c <L_107_delayMicroseconds+0x2c>)
    351c:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
    3520:	602c      	str	r4, [r5, #0]

		// Indicate transfer has completed
		while ( !( SPI0_SR & SPI_SR_TCF ) );
    3522:	681d      	ldr	r5, [r3, #0]
    3524:	4c04      	ldr	r4, [pc, #16]	; (3538 <L_107_delayMicroseconds+0x28>)
    3526:	2d00      	cmp	r5, #0
    3528:	dafb      	bge.n	3522 <L_107_delayMicroseconds+0x12>
		SPI0_SR |= SPI_SR_TCF;
    352a:	6823      	ldr	r3, [r4, #0]
    352c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3530:	6023      	str	r3, [r4, #0]
    3532:	e7e3      	b.n	34fc <SPI_write+0x4>
	}
}
    3534:	bd30      	pop	{r4, r5, pc}
    3536:	bf00      	nop
    3538:	4002c02c 	.word	0x4002c02c
    353c:	4002c034 	.word	0x4002c034

00003540 <LCD_writeControlReg>:

// Write to a control register
void LCD_writeControlReg( uint8_t byte )
{
    3540:	b513      	push	{r0, r1, r4, lr}
    3542:	f88d 0007 	strb.w	r0, [sp, #7]
	// Wait for TxFIFO to be empt
	while ( SPI0_TxFIFO_CNT != 0 );
    3546:	4b0f      	ldr	r3, [pc, #60]	; (3584 <L_195_delayMicroseconds+0x12>)
    3548:	681a      	ldr	r2, [r3, #0]
    354a:	f412 4f70 	tst.w	r2, #61440	; 0xf000
    354e:	461c      	mov	r4, r3
    3550:	d1f9      	bne.n	3546 <LCD_writeControlReg+0x6>

	// Set A0 low to enter control register mode
	GPIOC_PCOR |= (1<<7);
    3552:	4a0d      	ldr	r2, [pc, #52]	; (3588 <L_195_delayMicroseconds+0x16>)
    3554:	6813      	ldr	r3, [r2, #0]
    3556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    355a:	6013      	str	r3, [r2, #0]

	// Write byte to SPI FIFO
	SPI_write( &byte, 1 );
    355c:	f10d 0007 	add.w	r0, sp, #7
    3560:	2101      	movs	r1, #1
    3562:	f7ff ffc9 	bl	34f8 <SPI_write>

	// Wait for TxFIFO to be empty
	while ( SPI0_TxFIFO_CNT != 0 );
    3566:	6823      	ldr	r3, [r4, #0]
    3568:	f413 4f70 	tst.w	r3, #61440	; 0xf000
    356c:	d1fb      	bne.n	3566 <LCD_writeControlReg+0x26>
    356e:	f44f 73a0 	mov.w	r3, #320	; 0x140

00003572 <L_195_delayMicroseconds>:
    3572:	3b01      	subs	r3, #1
    3574:	d1fd      	bne.n	3572 <L_195_delayMicroseconds>

	// Make sure data has transferred
	delayMicroseconds(10); // XXX Adjust if SPI speed changes

	// Set A0 high to go back to display register mode
	GPIOC_PSOR |= (1<<7);
    3576:	4a05      	ldr	r2, [pc, #20]	; (358c <L_195_delayMicroseconds+0x1a>)
    3578:	6813      	ldr	r3, [r2, #0]
    357a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    357e:	6013      	str	r3, [r2, #0]
}
    3580:	b002      	add	sp, #8
    3582:	bd10      	pop	{r4, pc}
    3584:	4002c02c 	.word	0x4002c02c
    3588:	400ff088 	.word	0x400ff088
    358c:	400ff084 	.word	0x400ff084

00003590 <cliFunc_lcdCmd>:
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
		LCD_writeDisplayReg( page, (uint8_t *)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
}

void cliFunc_lcdCmd( char* args )
{
    3590:	b513      	push	{r0, r1, r4, lr}
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    3592:	9001      	str	r0, [sp, #4]

	print( NL ); // No \r\n by default after the command is entered
    3594:	4810      	ldr	r0, [pc, #64]	; (35d8 <cliFunc_lcdCmd+0x48>)
    3596:	f004 fb07 	bl	7ba8 <_print>

	curArgs = arg2Ptr; // Use the previous 2nd arg pointer to separate the next arg from the list
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    359a:	9801      	ldr	r0, [sp, #4]
    359c:	4669      	mov	r1, sp
    359e:	aa01      	add	r2, sp, #4
    35a0:	f004 f83a 	bl	7618 <CLI_argumentIsolation>

	// No args
	if ( *arg1Ptr == '\0' )
    35a4:	9800      	ldr	r0, [sp, #0]
    35a6:	7803      	ldrb	r3, [r0, #0]
    35a8:	b1a3      	cbz	r3, 35d4 <cliFunc_lcdCmd+0x44>
		return;

	// SPI Command
	uint8_t cmd = (uint8_t)numToInt( arg1Ptr );
    35aa:	f004 fbf7 	bl	7d9c <numToInt>

	curArgs = arg2Ptr; // Use the previous 2nd arg pointer to separate the next arg from the list
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    35ae:	aa01      	add	r2, sp, #4
	// No args
	if ( *arg1Ptr == '\0' )
		return;

	// SPI Command
	uint8_t cmd = (uint8_t)numToInt( arg1Ptr );
    35b0:	b2c4      	uxtb	r4, r0

	curArgs = arg2Ptr; // Use the previous 2nd arg pointer to separate the next arg from the list
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    35b2:	4669      	mov	r1, sp
    35b4:	9801      	ldr	r0, [sp, #4]
    35b6:	f004 f82f 	bl	7618 <CLI_argumentIsolation>
	if ( *arg1Ptr == '\0' )
		goto cmd;

	// TODO Deal with a0
cmd:
	info_msg("Sending - ");
    35ba:	4808      	ldr	r0, [pc, #32]	; (35dc <cliFunc_lcdCmd+0x4c>)
    35bc:	f004 faf4 	bl	7ba8 <_print>
	printHex( cmd );
    35c0:	4620      	mov	r0, r4
    35c2:	2101      	movs	r1, #1
    35c4:	f004 fb92 	bl	7cec <printHex_op>
	print( NL );
    35c8:	4803      	ldr	r0, [pc, #12]	; (35d8 <cliFunc_lcdCmd+0x48>)
    35ca:	f004 faed 	bl	7ba8 <_print>
	LCD_writeControlReg( cmd );
    35ce:	4620      	mov	r0, r4
    35d0:	f7ff ffb6 	bl	3540 <LCD_writeControlReg>
}
    35d4:	b002      	add	sp, #8
    35d6:	bd10      	pop	{r4, pc}
    35d8:	0000bc21 	.word	0x0000bc21
    35dc:	00008cac 	.word	0x00008cac

000035e0 <cliFunc_lcdDisp>:
	FTM0_C1V = rgb[1];
	FTM0_C2V = rgb[2];
}

void cliFunc_lcdDisp( char* args )
{
    35e0:	b530      	push	{r4, r5, lr}
    35e2:	b085      	sub	sp, #20
	char* arg1Ptr;
	char* arg2Ptr = args;

	// First process page and starting address
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    35e4:	a902      	add	r1, sp, #8
    35e6:	aa03      	add	r2, sp, #12

void cliFunc_lcdDisp( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    35e8:	9003      	str	r0, [sp, #12]

	// First process page and starting address
	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    35ea:	f004 f815 	bl	7618 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    35ee:	9802      	ldr	r0, [sp, #8]
    35f0:	7803      	ldrb	r3, [r0, #0]
    35f2:	b373      	cbz	r3, 3652 <cliFunc_lcdDisp+0x72>
		return;
	uint8_t page = numToInt( arg1Ptr );
    35f4:	f004 fbd2 	bl	7d9c <numToInt>

	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    35f8:	a902      	add	r1, sp, #8
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
		return;
	uint8_t page = numToInt( arg1Ptr );
    35fa:	4604      	mov	r4, r0

	curArgs = arg2Ptr;
	CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    35fc:	aa03      	add	r2, sp, #12
    35fe:	9803      	ldr	r0, [sp, #12]
    3600:	f004 f80a 	bl	7618 <CLI_argumentIsolation>

	// Stop processing args if no more are found
	if ( *arg1Ptr == '\0' )
    3604:	9802      	ldr	r0, [sp, #8]
    3606:	7803      	ldrb	r3, [r0, #0]
    3608:	b31b      	cbz	r3, 3652 <cliFunc_lcdDisp+0x72>
		return;
	uint8_t address = numToInt( arg1Ptr );
    360a:	f004 fbc7 	bl	7d9c <numToInt>
    360e:	b2c5      	uxtb	r5, r0

	// Set the register page
	LCD_writeControlReg( 0xB0 | ( 0x0F & page ) );
    3610:	f004 000f 	and.w	r0, r4, #15
    3614:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
    3618:	f7ff ff92 	bl	3540 <LCD_writeControlReg>

	// Set starting address
	LCD_writeControlReg( 0x10 | ( ( 0xF0 & address ) >> 4 ) );
    361c:	0928      	lsrs	r0, r5, #4
    361e:	f040 0010 	orr.w	r0, r0, #16
    3622:	f7ff ff8d 	bl	3540 <LCD_writeControlReg>
	LCD_writeControlReg( 0x00 | ( 0x0F & address ));
    3626:	f005 000f 	and.w	r0, r5, #15
    362a:	f7ff ff89 	bl	3540 <LCD_writeControlReg>

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    362e:	9803      	ldr	r0, [sp, #12]
    3630:	a902      	add	r1, sp, #8
    3632:	aa03      	add	r2, sp, #12
    3634:	f003 fff0 	bl	7618 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    3638:	9802      	ldr	r0, [sp, #8]
    363a:	7803      	ldrb	r3, [r0, #0]
    363c:	b14b      	cbz	r3, 3652 <cliFunc_lcdDisp+0x72>
			break;

		uint8_t value = numToInt( arg1Ptr );
    363e:	f004 fbad 	bl	7d9c <numToInt>
    3642:	ab04      	add	r3, sp, #16

		// Write buffer to SPI
		SPI_write( &value, 1 );
    3644:	2101      	movs	r1, #1

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
			break;

		uint8_t value = numToInt( arg1Ptr );
    3646:	f803 0d09 	strb.w	r0, [r3, #-9]!

		// Write buffer to SPI
		SPI_write( &value, 1 );
    364a:	4618      	mov	r0, r3
    364c:	f7ff ff54 	bl	34f8 <SPI_write>
	}
    3650:	e7ed      	b.n	362e <cliFunc_lcdDisp+0x4e>
}
    3652:	b005      	add	sp, #20
    3654:	bd30      	pop	{r4, r5, pc}

00003656 <LCD_writeDisplayReg>:

// Write to display register
// Pages 0-7 normal display
// Page  8   icon buffer
void LCD_writeDisplayReg( uint8_t page, uint8_t *buffer, uint8_t len )
{
    3656:	b538      	push	{r3, r4, r5, lr}
	// Set the register page
	LCD_writeControlReg( 0xB0 | ( 0x0F & page ) );
    3658:	f000 000f 	and.w	r0, r0, #15
    365c:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0

// Write to display register
// Pages 0-7 normal display
// Page  8   icon buffer
void LCD_writeDisplayReg( uint8_t page, uint8_t *buffer, uint8_t len )
{
    3660:	460d      	mov	r5, r1
    3662:	4614      	mov	r4, r2
	// Set the register page
	LCD_writeControlReg( 0xB0 | ( 0x0F & page ) );
    3664:	f7ff ff6c 	bl	3540 <LCD_writeControlReg>

	// Set display start line
	LCD_writeControlReg( 0x40 );
    3668:	2040      	movs	r0, #64	; 0x40
    366a:	f7ff ff69 	bl	3540 <LCD_writeControlReg>

	// Reset Column Address
	LCD_writeControlReg( 0x10 );
    366e:	2010      	movs	r0, #16
    3670:	f7ff ff66 	bl	3540 <LCD_writeControlReg>
	LCD_writeControlReg( 0x00 );
    3674:	2000      	movs	r0, #0
    3676:	f7ff ff63 	bl	3540 <LCD_writeControlReg>

	// Write buffer to SPI
	SPI_write( buffer, len );
    367a:	4628      	mov	r0, r5
    367c:	4621      	mov	r1, r4
}
    367e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	// Reset Column Address
	LCD_writeControlReg( 0x10 );
	LCD_writeControlReg( 0x00 );

	// Write buffer to SPI
	SPI_write( buffer, len );
    3682:	f7ff bf39 	b.w	34f8 <SPI_write>
    3686:	0000      	movs	r0, r0

00003688 <cliFunc_lcdTest>:
{
	LCD_initialize();
}

void cliFunc_lcdTest( char* args )
{
    3688:	b510      	push	{r4, lr}
    368a:	2400      	movs	r4, #0
	// Write default image
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
		LCD_writeDisplayReg( page, (uint8_t *)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
    368c:	4905      	ldr	r1, [pc, #20]	; (36a4 <cliFunc_lcdTest+0x1c>)
    368e:	b2e0      	uxtb	r0, r4
    3690:	eb01 11c4 	add.w	r1, r1, r4, lsl #7
    3694:	2280      	movs	r2, #128	; 0x80
    3696:	3401      	adds	r4, #1
    3698:	f7ff ffdd 	bl	3656 <LCD_writeDisplayReg>
}

void cliFunc_lcdTest( char* args )
{
	// Write default image
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
    369c:	2c04      	cmp	r4, #4
    369e:	d1f5      	bne.n	368c <cliFunc_lcdTest+0x4>
		LCD_writeDisplayReg( page, (uint8_t *)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
}
    36a0:	bd10      	pop	{r4, pc}
    36a2:	bf00      	nop
    36a4:	00008d91 	.word	0x00008d91

000036a8 <LCD_clear>:
	while ( SPI0_TxFIFO_CNT != 0 );
}

// Clear Display
void LCD_clear()
{
    36a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    36aa:	2500      	movs	r5, #0
}

inline void LCD_clearPage( uint8_t page )
{
	// Set the register page
	LCD_writeControlReg( 0xB0 | ( 0x0F & page ) );
    36ac:	f065 004f 	orn	r0, r5, #79	; 0x4f
    36b0:	b2c0      	uxtb	r0, r0
    36b2:	f7ff ff45 	bl	3540 <LCD_writeControlReg>

	// Set display start line
	LCD_writeControlReg( 0x40 );
    36b6:	2040      	movs	r0, #64	; 0x40
    36b8:	f7ff ff42 	bl	3540 <LCD_writeControlReg>

	// Reset Column Address
	LCD_writeControlReg( 0x10 );
    36bc:	2010      	movs	r0, #16
    36be:	f7ff ff3f 	bl	3540 <LCD_writeControlReg>
	LCD_writeControlReg( 0x00 );
    36c2:	2000      	movs	r0, #0
    36c4:	f7ff ff3c 	bl	3540 <LCD_writeControlReg>
    36c8:	2481      	movs	r4, #129	; 0x81

	for ( uint8_t page_reg = 0; page_reg < LCD_PAGE_LEN; page_reg++ )
    36ca:	3c01      	subs	r4, #1
    36cc:	d007      	beq.n	36de <LCD_clear+0x36>
	{
		uint8_t byte = 0;
    36ce:	a802      	add	r0, sp, #8
    36d0:	2300      	movs	r3, #0
    36d2:	f800 3d01 	strb.w	r3, [r0, #-1]!

		// Write buffer to SPI
		SPI_write( &byte, 1 );
    36d6:	2101      	movs	r1, #1
    36d8:	f7ff ff0e 	bl	34f8 <SPI_write>
    36dc:	e7f5      	b.n	36ca <LCD_clear+0x22>
	}

	// Wait for TxFIFO to be empty
	while ( SPI0_TxFIFO_CNT != 0 );
    36de:	4b0b      	ldr	r3, [pc, #44]	; (370c <LCD_clear+0x64>)
    36e0:	681c      	ldr	r4, [r3, #0]
    36e2:	f3c4 3403 	ubfx	r4, r4, #12, #4
    36e6:	2c00      	cmp	r4, #0
    36e8:	d1f9      	bne.n	36de <LCD_clear+0x36>
    36ea:	3501      	adds	r5, #1

// Clear Display
void LCD_clear()
{
	// Setup each page
	for ( uint8_t page = 0; page < LCD_TOTAL_PAGES; page++ )
    36ec:	2d09      	cmp	r5, #9
    36ee:	d1dd      	bne.n	36ac <LCD_clear+0x4>
		LCD_clearPage( page );
	}

	// Reset Page, Start Line, and Column Address
	// Page
	LCD_writeControlReg( 0xB0 );
    36f0:	20b0      	movs	r0, #176	; 0xb0
    36f2:	f7ff ff25 	bl	3540 <LCD_writeControlReg>

	// Start Line
	LCD_writeControlReg( 0x40 );
    36f6:	2040      	movs	r0, #64	; 0x40
    36f8:	f7ff ff22 	bl	3540 <LCD_writeControlReg>

	// Reset Column Address
	LCD_writeControlReg( 0x10 );
    36fc:	2010      	movs	r0, #16
    36fe:	f7ff ff1f 	bl	3540 <LCD_writeControlReg>
	LCD_writeControlReg( 0x00 );
    3702:	4620      	mov	r0, r4
    3704:	f7ff ff1c 	bl	3540 <LCD_writeControlReg>
}
    3708:	b003      	add	sp, #12
    370a:	bd30      	pop	{r4, r5, pc}
    370c:	4002c02c 	.word	0x4002c02c

00003710 <LCD_initialize>:

// Intialize display
void LCD_initialize()
{
    3710:	b508      	push	{r3, lr}
	// ADC Select (Normal)
	LCD_writeControlReg( 0xA0 );
    3712:	20a0      	movs	r0, #160	; 0xa0
    3714:	f7ff ff14 	bl	3540 <LCD_writeControlReg>

	// LCD Off
	LCD_writeControlReg( 0xAE );
    3718:	20ae      	movs	r0, #174	; 0xae
    371a:	f7ff ff11 	bl	3540 <LCD_writeControlReg>

	// COM Scan Output Direction
	LCD_writeControlReg( 0xC0 );
    371e:	20c0      	movs	r0, #192	; 0xc0
    3720:	f7ff ff0e 	bl	3540 <LCD_writeControlReg>

	// LCD Bias (1/6 bias)
	LCD_writeControlReg( 0xA2 );
    3724:	20a2      	movs	r0, #162	; 0xa2
    3726:	f7ff ff0b 	bl	3540 <LCD_writeControlReg>

	// Power Supply Operating Mode (Internal Only)
	LCD_writeControlReg( 0x2F );
    372a:	202f      	movs	r0, #47	; 0x2f
    372c:	f7ff ff08 	bl	3540 <LCD_writeControlReg>

	// Internal Rb/Ra Ratio
	LCD_writeControlReg( 0x26 );
    3730:	2026      	movs	r0, #38	; 0x26
    3732:	f7ff ff05 	bl	3540 <LCD_writeControlReg>

	// Reset
	LCD_writeControlReg( 0xE2 );
    3736:	20e2      	movs	r0, #226	; 0xe2
    3738:	f7ff ff02 	bl	3540 <LCD_writeControlReg>

	// Electric volume mode set, and value
	LCD_writeControlReg( 0x81 );
    373c:	2081      	movs	r0, #129	; 0x81
    373e:	f7ff feff 	bl	3540 <LCD_writeControlReg>
	LCD_writeControlReg( 0x00 );
    3742:	2000      	movs	r0, #0
    3744:	f7ff fefc 	bl	3540 <LCD_writeControlReg>

	// LCD On
	LCD_writeControlReg( 0xAF );
    3748:	20af      	movs	r0, #175	; 0xaf
    374a:	f7ff fef9 	bl	3540 <LCD_writeControlReg>

	// Clear Display RAM
	LCD_clear();
}
    374e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	// LCD On
	LCD_writeControlReg( 0xAF );

	// Clear Display RAM
	LCD_clear();
    3752:	f7ff bfa9 	b.w	36a8 <LCD_clear>

00003756 <cliFunc_lcdInit>:

// ----- CLI Command Functions -----

void cliFunc_lcdInit( char* args )
{
	LCD_initialize();
    3756:	f7ff bfdb 	b.w	3710 <LCD_initialize>
    375a:	0000      	movs	r0, r0

0000375c <LCD_setup>:
	LCD_clear();
}

// Setup
inline void LCD_setup()
{
    375c:	b538      	push	{r3, r4, r5, lr}
// ----- Functions -----

inline void SPI_setup()
{
	// Enable SPI internal clock
	SIM_SCGC6 |= SIM_SCGC6_SPI0;
    375e:	4c35      	ldr	r4, [pc, #212]	; (3834 <LCD_setup+0xd8>)

// Setup
inline void LCD_setup()
{
	// Register Scan CLI dictionary
	CLI_registerDictionary( lcdCLIDict, lcdCLIDictName );
    3760:	4835      	ldr	r0, [pc, #212]	; (3838 <LCD_setup+0xdc>)
    3762:	4936      	ldr	r1, [pc, #216]	; (383c <LCD_setup+0xe0>)
    3764:	f003 ffcc 	bl	7700 <CLI_registerDictionary>
// ----- Functions -----

inline void SPI_setup()
{
	// Enable SPI internal clock
	SIM_SCGC6 |= SIM_SCGC6_SPI0;
    3768:	6823      	ldr	r3, [r4, #0]

	// Setup MOSI (SOUT) and SCLK (SCK)
	PORTC_PCR6 = PORT_PCR_DSE | PORT_PCR_MUX(2);
    376a:	4a35      	ldr	r2, [pc, #212]	; (3840 <LCD_setup+0xe4>)
// ----- Functions -----

inline void SPI_setup()
{
	// Enable SPI internal clock
	SIM_SCGC6 |= SIM_SCGC6_SPI0;
    376c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    3770:	6023      	str	r3, [r4, #0]

	// Setup MOSI (SOUT) and SCLK (SCK)
	PORTC_PCR6 = PORT_PCR_DSE | PORT_PCR_MUX(2);
    3772:	f44f 7310 	mov.w	r3, #576	; 0x240
    3776:	6013      	str	r3, [r2, #0]
	PORTC_PCR5 = PORT_PCR_DSE | PORT_PCR_MUX(2);
    3778:	f842 3c04 	str.w	r3, [r2, #-4]

	// Setup SS (PCS)
	PORTC_PCR4 = PORT_PCR_DSE | PORT_PCR_MUX(2);
    377c:	f842 3c08 	str.w	r3, [r2, #-8]

	// Master Mode, CS0
	SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(1);
    3780:	4b30      	ldr	r3, [pc, #192]	; (3844 <LCD_setup+0xe8>)
    3782:	4a31      	ldr	r2, [pc, #196]	; (3848 <LCD_setup+0xec>)
    3784:	601a      	str	r2, [r3, #0]

	// DSPI Clock and Transfer Attributes
	// Frame Size: 8 bits
	// MSB First
	// CLK Low by default
	SPI0_CTAR0 = SPI_CTAR_FMSZ(7)
    3786:	4a31      	ldr	r2, [pc, #196]	; (384c <LCD_setup+0xf0>)
    3788:	60da      	str	r2, [r3, #12]
	// Initialize SPI
	SPI_setup();

	// Setup Register Control Signal (A0)
	// Start in display register mode (1)
	GPIOC_PDDR |= (1<<7);
    378a:	4a31      	ldr	r2, [pc, #196]	; (3850 <LCD_setup+0xf4>)
    378c:	6813      	ldr	r3, [r2, #0]
    378e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3792:	6013      	str	r3, [r2, #0]
	PORTC_PCR7 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    3794:	4b2f      	ldr	r3, [pc, #188]	; (3854 <LCD_setup+0xf8>)
    3796:	f44f 70a2 	mov.w	r0, #324	; 0x144
    379a:	6018      	str	r0, [r3, #0]
	GPIOC_PSOR |= (1<<7);
    379c:	f503 2334 	add.w	r3, r3, #737280	; 0xb4000
    37a0:	3368      	adds	r3, #104	; 0x68
    37a2:	6819      	ldr	r1, [r3, #0]
    37a4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
    37a8:	6019      	str	r1, [r3, #0]

	// Setup LCD Reset pin (RST)
	// 0 - Reset, 1 - Normal Operation
	// Start in normal mode (1)
	GPIOC_PDDR |= (1<<8);
    37aa:	6811      	ldr	r1, [r2, #0]
    37ac:	f441 7180 	orr.w	r1, r1, #256	; 0x100
    37b0:	6011      	str	r1, [r2, #0]
	PORTC_PCR8 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    37b2:	f5a2 2234 	sub.w	r2, r2, #737280	; 0xb4000
    37b6:	3a74      	subs	r2, #116	; 0x74
    37b8:	6010      	str	r0, [r2, #0]
	GPIOC_PSOR |= (1<<8);
    37ba:	681a      	ldr	r2, [r3, #0]
    37bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    37c0:	601a      	str	r2, [r3, #0]

	// Run LCD intialization sequence
	LCD_initialize();
    37c2:	f7ff ffa5 	bl	3710 <LCD_initialize>
    37c6:	2500      	movs	r5, #0

	// Write default image to LCD
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
		LCD_writeDisplayReg( page, (uint8_t*)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
    37c8:	4923      	ldr	r1, [pc, #140]	; (3858 <LCD_setup+0xfc>)
    37ca:	b2e8      	uxtb	r0, r5
    37cc:	eb01 11c5 	add.w	r1, r1, r5, lsl #7
    37d0:	2280      	movs	r2, #128	; 0x80
    37d2:	3501      	adds	r5, #1
    37d4:	f7ff ff3f 	bl	3656 <LCD_writeDisplayReg>

	// Run LCD intialization sequence
	LCD_initialize();

	// Write default image to LCD
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
    37d8:	2d04      	cmp	r5, #4
    37da:	d1f5      	bne.n	37c8 <LCD_setup+0x6c>
		LCD_writeDisplayReg( page, (uint8_t*)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );

	// Setup Backlight
	SIM_SCGC6 |= SIM_SCGC6_FTM0;
    37dc:	6823      	ldr	r3, [r4, #0]
	// System clock, /w prescalar setting
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS( STLcdBacklightPrescalar_define );

	// Red
	FTM0_C0V = STLcdBacklightRed_define;
	PORTC_PCR1 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(4);
    37de:	491f      	ldr	r1, [pc, #124]	; (385c <LCD_setup+0x100>)
	// Write default image to LCD
	for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
		LCD_writeDisplayReg( page, (uint8_t*)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );

	// Setup Backlight
	SIM_SCGC6 |= SIM_SCGC6_FTM0;
    37e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    37e4:	6023      	str	r3, [r4, #0]
	FTM0_CNT = 0; // Reset counter
    37e6:	4b1e      	ldr	r3, [pc, #120]	; (3860 <LCD_setup+0x104>)
    37e8:	2200      	movs	r2, #0
    37ea:	601a      	str	r2, [r3, #0]

	// PWM Period
	// 16-bit maximum
	FTM0_MOD = 0xFFFF;
    37ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
    37f0:	605a      	str	r2, [r3, #4]

	// Set FTM to PWM output - Edge Aligned, Low-true pulses
	FTM0_C0SC = 0x24; // MSnB:MSnA = 10, ELSnB:ELSnA = 01
    37f2:	4a1c      	ldr	r2, [pc, #112]	; (3864 <LCD_setup+0x108>)
    37f4:	2324      	movs	r3, #36	; 0x24
    37f6:	6013      	str	r3, [r2, #0]
	FTM0_C1SC = 0x24;
    37f8:	6093      	str	r3, [r2, #8]
	FTM0_C2SC = 0x24;
    37fa:	6113      	str	r3, [r2, #16]
	// 7 - 562 500  Hz ->   4 Hz
	// Using a higher pre-scalar without flicker is possible but FTM0_MOD will need to be reduced
	// Which will reduce the brightness range

	// System clock, /w prescalar setting
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS( STLcdBacklightPrescalar_define );
    37fc:	4b1a      	ldr	r3, [pc, #104]	; (3868 <LCD_setup+0x10c>)
    37fe:	2208      	movs	r2, #8
    3800:	601a      	str	r2, [r3, #0]

	// Red
	FTM0_C0V = STLcdBacklightRed_define;
    3802:	f640 72ff 	movw	r2, #4095	; 0xfff
    3806:	611a      	str	r2, [r3, #16]
	PORTC_PCR1 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(4);
    3808:	f240 4344 	movw	r3, #1092	; 0x444
    380c:	600b      	str	r3, [r1, #0]

	// Green
	FTM0_C1V = STLcdBacklightGreen_define;
    380e:	f5a1 3197 	sub.w	r1, r1, #77312	; 0x12e00
    3812:	f5a1 71f6 	sub.w	r1, r1, #492	; 0x1ec
    3816:	600a      	str	r2, [r1, #0]
	PORTC_PCR2 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(4);
    3818:	f501 3197 	add.w	r1, r1, #77312	; 0x12e00
    381c:	f501 71f8 	add.w	r1, r1, #496	; 0x1f0
    3820:	600b      	str	r3, [r1, #0]

	// Blue
	FTM0_C2V = STLcdBacklightBlue_define;
    3822:	f5a1 3197 	sub.w	r1, r1, #77312	; 0x12e00
    3826:	f5a1 71f4 	sub.w	r1, r1, #488	; 0x1e8
    382a:	600a      	str	r2, [r1, #0]
	PORTC_PCR3 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(4);
    382c:	4a0f      	ldr	r2, [pc, #60]	; (386c <LCD_setup+0x110>)
    382e:	6013      	str	r3, [r2, #0]
    3830:	bd38      	pop	{r3, r4, r5, pc}
    3832:	bf00      	nop
    3834:	4004803c 	.word	0x4004803c
    3838:	00008c64 	.word	0x00008c64
    383c:	00008c4a 	.word	0x00008c4a
    3840:	4004b018 	.word	0x4004b018
    3844:	4002c000 	.word	0x4002c000
    3848:	80010000 	.word	0x80010000
    384c:	38007777 	.word	0x38007777
    3850:	400ff094 	.word	0x400ff094
    3854:	4004b01c 	.word	0x4004b01c
    3858:	00008d91 	.word	0x00008d91
    385c:	4004b004 	.word	0x4004b004
    3860:	40038004 	.word	0x40038004
    3864:	4003800c 	.word	0x4003800c
    3868:	40038000 	.word	0x40038000
    386c:	4004b00c 	.word	0x4004b00c

00003870 <LCD_scan>:

// LCD State processing loop
inline uint8_t LCD_scan()
{
	return 0;
}
    3870:	2000      	movs	r0, #0
    3872:	4770      	bx	lr

00003874 <LCD_currentChange>:


// Signal from parent Scan Module that available current has changed
// current - mA
void LCD_currentChange( unsigned int current )
{
    3874:	4770      	bx	lr
    3876:	0000      	movs	r0, r0

00003878 <LCD_layerStackExact_capability>:
typedef struct LCD_layerStackExact_args {
	uint8_t numArgs;
	uint16_t layers[4];
} LCD_layerStackExact_args;
void LCD_layerStackExact_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    3878:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    387a:	29ff      	cmp	r1, #255	; 0xff
typedef struct LCD_layerStackExact_args {
	uint8_t numArgs;
	uint16_t layers[4];
} LCD_layerStackExact_args;
void LCD_layerStackExact_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    387c:	f2ad 5d44 	subw	sp, sp, #1348	; 0x544
    3880:	4616      	mov	r6, r2
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    3882:	d105      	bne.n	3890 <LCD_layerStackExact_capability+0x18>
    3884:	28ff      	cmp	r0, #255	; 0xff
    3886:	d103      	bne.n	3890 <LCD_layerStackExact_capability+0x18>
	{
		print("LCD_layerStackExact_capability(num,layer1,layer2,layer3,layer4)");
    3888:	483a      	ldr	r0, [pc, #232]	; (3974 <LCD_layerStackExact_capability+0xfc>)
    388a:	f004 f98d 	bl	7ba8 <_print>
    388e:	e06d      	b.n	396c <LCD_layerStackExact_capability+0xf4>

	// Read arguments
	LCD_layerStackExact_args *stack_args = (LCD_layerStackExact_args*)args;

	// Number data for LCD
	const uint8_t numbers[10][128] = {
    3890:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    3894:	a810      	add	r0, sp, #64	; 0x40
    3896:	4938      	ldr	r1, [pc, #224]	; (3978 <LCD_layerStackExact_capability+0x100>)
    3898:	f7fe fe6e 	bl	2578 <memcpy>
		{ STLcdNumber8_define },
		{ STLcdNumber9_define },
	};

	// Color data for numbers
	const uint16_t colors[10][3] = {
    389c:	4b37      	ldr	r3, [pc, #220]	; (397c <LCD_layerStackExact_capability+0x104>)
    389e:	ad01      	add	r5, sp, #4
    38a0:	462a      	mov	r2, r5
    38a2:	f103 0738 	add.w	r7, r3, #56	; 0x38
    38a6:	6818      	ldr	r0, [r3, #0]
    38a8:	6859      	ldr	r1, [r3, #4]
    38aa:	4614      	mov	r4, r2
    38ac:	c403      	stmia	r4!, {r0, r1}
    38ae:	3308      	adds	r3, #8
    38b0:	42bb      	cmp	r3, r7
    38b2:	4622      	mov	r2, r4
    38b4:	d1f7      	bne.n	38a6 <LCD_layerStackExact_capability+0x2e>
    38b6:	6818      	ldr	r0, [r3, #0]
    38b8:	6020      	str	r0, [r4, #0]
		{ STLcdNumber8Color_define },
		{ STLcdNumber9Color_define },
	};

	// Only display if there are layers active
	if ( stack_args->numArgs > 0 )
    38ba:	7834      	ldrb	r4, [r6, #0]
    38bc:	4830      	ldr	r0, [pc, #192]	; (3980 <LCD_layerStackExact_capability+0x108>)
    38be:	4931      	ldr	r1, [pc, #196]	; (3984 <LCD_layerStackExact_capability+0x10c>)
    38c0:	4a31      	ldr	r2, [pc, #196]	; (3988 <LCD_layerStackExact_capability+0x110>)
    38c2:	2c00      	cmp	r4, #0
    38c4:	d043      	beq.n	394e <LCD_layerStackExact_capability+0xd6>
	{
		// Set the color according to the "top-of-stack" layer
		uint16_t layerIndex = stack_args->layers[0];
		FTM0_C0V = colors[ layerIndex ][0];
    38c6:	8874      	ldrh	r4, [r6, #2]
    38c8:	2306      	movs	r3, #6
    38ca:	4363      	muls	r3, r4
    38cc:	18ec      	adds	r4, r5, r3
    38ce:	5aeb      	ldrh	r3, [r5, r3]
    38d0:	6003      	str	r3, [r0, #0]
		FTM0_C1V = colors[ layerIndex ][1];
    38d2:	8863      	ldrh	r3, [r4, #2]
    38d4:	600b      	str	r3, [r1, #0]
		FTM0_C2V = colors[ layerIndex ][2];
    38d6:	88a3      	ldrh	r3, [r4, #4]
    38d8:	6013      	str	r3, [r2, #0]
    38da:	2500      	movs	r5, #0
		// XXX Many of the values here are hard-coded
		//     Eventually a proper font rendering engine should take care of things like this... -HaaTa
		for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
		{
			// Set the register page
			LCD_writeControlReg( 0xB0 | ( 0x0F & page ) );
    38dc:	f065 004f 	orn	r0, r5, #79	; 0x4f
    38e0:	b2c0      	uxtb	r0, r0
    38e2:	f7ff fe2d 	bl	3540 <LCD_writeControlReg>

			// Set starting address
			LCD_writeControlReg( 0x10 );
    38e6:	2010      	movs	r0, #16
    38e8:	f7ff fe2a 	bl	3540 <LCD_writeControlReg>
			LCD_writeControlReg( 0x00 );
    38ec:	2000      	movs	r0, #0
    38ee:	f7ff fe27 	bl	3540 <LCD_writeControlReg>
    38f2:	016f      	lsls	r7, r5, #5

			// Write data
			for ( uint16_t layer = 0; layer < stack_args->numArgs; layer++ )
    38f4:	2400      	movs	r4, #0
    38f6:	7832      	ldrb	r2, [r6, #0]
    38f8:	b2a3      	uxth	r3, r4
    38fa:	429a      	cmp	r2, r3
    38fc:	d90e      	bls.n	391c <LCD_layerStackExact_capability+0xa4>
			{
				layerIndex = stack_args->layers[ layer ];
    38fe:	eb06 0343 	add.w	r3, r6, r3, lsl #1
				{
					layerIndex = 0;
				}

				// Write page of number to display
				SPI_write( (uint8_t*)&numbers[ layerIndex ][ page * 32 ], 32 );
    3902:	2120      	movs	r1, #32
			LCD_writeControlReg( 0x00 );

			// Write data
			for ( uint16_t layer = 0; layer < stack_args->numArgs; layer++ )
			{
				layerIndex = stack_args->layers[ layer ];
    3904:	8858      	ldrh	r0, [r3, #2]

				// Default to 0, if over 9
				if ( layerIndex > 9 )
				{
					layerIndex = 0;
    3906:	280a      	cmp	r0, #10
    3908:	bf28      	it	cs
    390a:	2000      	movcs	r0, #0
				}

				// Write page of number to display
				SPI_write( (uint8_t*)&numbers[ layerIndex ][ page * 32 ], 32 );
    390c:	ab10      	add	r3, sp, #64	; 0x40
    390e:	eb07 10c0 	add.w	r0, r7, r0, lsl #7
    3912:	4418      	add	r0, r3
    3914:	f7ff fdf0 	bl	34f8 <SPI_write>
    3918:	3401      	adds	r4, #1
    391a:	e7ec      	b.n	38f6 <LCD_layerStackExact_capability+0x7e>
			}

			// Blank out rest of display
			uint8_t data = 0;
    391c:	2400      	movs	r4, #0
    391e:	f88d 4003 	strb.w	r4, [sp, #3]
			for ( uint8_t c = 0; c < 4 - stack_args->numArgs; c++ )
    3922:	7833      	ldrb	r3, [r6, #0]
    3924:	b2e2      	uxtb	r2, r4
    3926:	f1c3 0304 	rsb	r3, r3, #4
    392a:	429a      	cmp	r2, r3
    392c:	da0b      	bge.n	3946 <LCD_layerStackExact_capability+0xce>
    392e:	2720      	movs	r7, #32
			{
				for ( uint8_t byte = 0; byte < 32; byte++ )
				{
					SPI_write( &data, 1 );
    3930:	f10d 0003 	add.w	r0, sp, #3
    3934:	2101      	movs	r1, #1
    3936:	3f01      	subs	r7, #1
    3938:	f7ff fdde 	bl	34f8 <SPI_write>

			// Blank out rest of display
			uint8_t data = 0;
			for ( uint8_t c = 0; c < 4 - stack_args->numArgs; c++ )
			{
				for ( uint8_t byte = 0; byte < 32; byte++ )
    393c:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    3940:	d1f6      	bne.n	3930 <LCD_layerStackExact_capability+0xb8>
    3942:	3401      	adds	r4, #1
    3944:	e7ed      	b.n	3922 <LCD_layerStackExact_capability+0xaa>
    3946:	3501      	adds	r5, #1
		FTM0_C2V = colors[ layerIndex ][2];

		// Iterate through each of the pages
		// XXX Many of the values here are hard-coded
		//     Eventually a proper font rendering engine should take care of things like this... -HaaTa
		for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
    3948:	2d04      	cmp	r5, #4
    394a:	d1c7      	bne.n	38dc <LCD_layerStackExact_capability+0x64>
    394c:	e00e      	b.n	396c <LCD_layerStackExact_capability+0xf4>
		}
	}
	else
	{
		// Set default backlight
		FTM0_C0V = STLcdBacklightRed_define;
    394e:	f640 73ff 	movw	r3, #4095	; 0xfff
    3952:	6003      	str	r3, [r0, #0]
		FTM0_C1V = STLcdBacklightGreen_define;
    3954:	600b      	str	r3, [r1, #0]
		FTM0_C2V = STLcdBacklightBlue_define;
    3956:	6013      	str	r3, [r2, #0]

		// Write default image
		for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
			LCD_writeDisplayReg( page, (uint8_t *)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
    3958:	490c      	ldr	r1, [pc, #48]	; (398c <LCD_layerStackExact_capability+0x114>)
    395a:	b2e0      	uxtb	r0, r4
    395c:	eb01 11c4 	add.w	r1, r1, r4, lsl #7
    3960:	2280      	movs	r2, #128	; 0x80
    3962:	3401      	adds	r4, #1
    3964:	f7ff fe77 	bl	3656 <LCD_writeDisplayReg>
		FTM0_C0V = STLcdBacklightRed_define;
		FTM0_C1V = STLcdBacklightGreen_define;
		FTM0_C2V = STLcdBacklightBlue_define;

		// Write default image
		for ( uint8_t page = 0; page < LCD_TOTAL_VISIBLE_PAGES; page++ )
    3968:	2c04      	cmp	r4, #4
    396a:	d1f5      	bne.n	3958 <LCD_layerStackExact_capability+0xe0>
			LCD_writeDisplayReg( page, (uint8_t *)&STLcdDefaultImage[page * LCD_PAGE_LEN], LCD_PAGE_LEN );
	}
}
    396c:	f20d 5d44 	addw	sp, sp, #1348	; 0x544
    3970:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3972:	bf00      	nop
    3974:	00008cc9 	.word	0x00008cc9
    3978:	000086f4 	.word	0x000086f4
    397c:	00008bf4 	.word	0x00008bf4
    3980:	40038010 	.word	0x40038010
    3984:	40038018 	.word	0x40038018
    3988:	40038020 	.word	0x40038020
    398c:	00008d91 	.word	0x00008d91

00003990 <LCD_layerStack_capability>:
// Determines the current layer stack, and sets the LCD output accordingly
// Will only work on a master node when using the interconnect (use LCD_layerStackExact_capability instead)
uint16_t LCD_layerStack_prevSize = 0;
uint16_t LCD_layerStack_prevTop  = 0;
void LCD_layerStack_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    3990:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    3992:	29ff      	cmp	r1, #255	; 0xff
// Determines the current layer stack, and sets the LCD output accordingly
// Will only work on a master node when using the interconnect (use LCD_layerStackExact_capability instead)
uint16_t LCD_layerStack_prevSize = 0;
uint16_t LCD_layerStack_prevTop  = 0;
void LCD_layerStack_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    3994:	b087      	sub	sp, #28
    3996:	4605      	mov	r5, r0
    3998:	460c      	mov	r4, r1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    399a:	d105      	bne.n	39a8 <LCD_layerStack_capability+0x18>
    399c:	28ff      	cmp	r0, #255	; 0xff
    399e:	d103      	bne.n	39a8 <LCD_layerStack_capability+0x18>
	{
		print("LCD_layerStack_capability()");
    39a0:	4822      	ldr	r0, [pc, #136]	; (3a2c <LCD_layerStack_capability+0x9c>)
    39a2:	f004 f901 	bl	7ba8 <_print>
		return;
    39a6:	e03e      	b.n	3a26 <LCD_layerStack_capability+0x96>
	// Parse the layer stack, top to bottom
	extern uint16_t macroLayerIndexStack[];
	extern uint16_t macroLayerIndexStackSize;

	// Ignore if the stack size hasn't changed and the top of the stack is the same
	if ( macroLayerIndexStackSize == LCD_layerStack_prevSize
    39a8:	4921      	ldr	r1, [pc, #132]	; (3a30 <LCD_layerStack_capability+0xa0>)
    39aa:	4b22      	ldr	r3, [pc, #136]	; (3a34 <LCD_layerStack_capability+0xa4>)
    39ac:	880a      	ldrh	r2, [r1, #0]
    39ae:	8818      	ldrh	r0, [r3, #0]
    39b0:	4e21      	ldr	r6, [pc, #132]	; (3a38 <LCD_layerStack_capability+0xa8>)
    39b2:	4290      	cmp	r0, r2
    39b4:	460f      	mov	r7, r1
    39b6:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
    39ba:	4920      	ldr	r1, [pc, #128]	; (3a3c <LCD_layerStack_capability+0xac>)
    39bc:	d105      	bne.n	39ca <LCD_layerStack_capability+0x3a>
		&& macroLayerIndexStack[macroLayerIndexStackSize - 1] == LCD_layerStack_prevTop )
    39be:	f836 c010 	ldrh.w	ip, [r6, r0, lsl #1]
    39c2:	f8b1 e000 	ldrh.w	lr, [r1]
    39c6:	45f4      	cmp	ip, lr
    39c8:	d02d      	beq.n	3a26 <LCD_layerStack_capability+0x96>
	{
		return;
	}
	LCD_layerStack_prevSize = macroLayerIndexStackSize;
    39ca:	801a      	strh	r2, [r3, #0]
	LCD_layerStack_prevTop  = macroLayerIndexStack[macroLayerIndexStackSize - 1];
    39cc:	f836 3010 	ldrh.w	r3, [r6, r0, lsl #1]
    39d0:	800b      	strh	r3, [r1, #0]

	LCD_layerStackExact_args stack_args;
	memset( stack_args.layers, 0, sizeof( stack_args.layers ) );
    39d2:	2208      	movs	r2, #8
    39d4:	f10d 000e 	add.w	r0, sp, #14
    39d8:	2100      	movs	r1, #0
    39da:	f7fe fdc5 	bl	2568 <memset>

	// Use the LCD_layerStackExact_capability to set the LCD using the determined stack
	// Construct argument set for capability
	stack_args.numArgs = macroLayerIndexStackSize;
    39de:	883a      	ldrh	r2, [r7, #0]
    39e0:	f88d 200c 	strb.w	r2, [sp, #12]
	for ( uint16_t layer = 1; layer <= macroLayerIndexStackSize; layer++ )
    39e4:	2301      	movs	r3, #1
    39e6:	4293      	cmp	r3, r2
    39e8:	d80a      	bhi.n	3a00 <LCD_layerStack_capability+0x70>
	{
		stack_args.layers[ layer - 1 ] = macroLayerIndexStack[ macroLayerIndexStackSize - layer ];
    39ea:	1ad0      	subs	r0, r2, r3
    39ec:	a906      	add	r1, sp, #24
    39ee:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    39f2:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
    39f6:	f821 0c0c 	strh.w	r0, [r1, #-12]
	memset( stack_args.layers, 0, sizeof( stack_args.layers ) );

	// Use the LCD_layerStackExact_capability to set the LCD using the determined stack
	// Construct argument set for capability
	stack_args.numArgs = macroLayerIndexStackSize;
	for ( uint16_t layer = 1; layer <= macroLayerIndexStackSize; layer++ )
    39fa:	3301      	adds	r3, #1
    39fc:	b29b      	uxth	r3, r3
    39fe:	e7f2      	b.n	39e6 <LCD_layerStack_capability+0x56>
		stack_args.layers[ layer - 1 ] = macroLayerIndexStack[ macroLayerIndexStackSize - layer ];
	}

	// Only deal with the interconnect if it has been compiled in
#if defined(ConnectEnabled_define)
	if ( Connect_master )
    3a00:	4b0f      	ldr	r3, [pc, #60]	; (3a40 <LCD_layerStack_capability+0xb0>)
    3a02:	781b      	ldrb	r3, [r3, #0]
    3a04:	ae03      	add	r6, sp, #12
    3a06:	b14b      	cbz	r3, 3a1c <LCD_layerStack_capability+0x8c>
	{
		// generatedKeymap.h
		extern const Capability CapabilitiesList[];

		// Broadcast layerStackExact remote capability (0xFF is the broadcast id)
		Connect_send_RemoteCapability(
    3a08:	4b0e      	ldr	r3, [pc, #56]	; (3a44 <LCD_layerStack_capability+0xb4>)
    3a0a:	791b      	ldrb	r3, [r3, #4]
    3a0c:	20ff      	movs	r0, #255	; 0xff
    3a0e:	e88d 0048 	stmia.w	sp, {r3, r6}
    3a12:	2100      	movs	r1, #0
    3a14:	462a      	mov	r2, r5
    3a16:	4623      	mov	r3, r4
    3a18:	f000 fd08 	bl	442c <Connect_send_RemoteCapability>
			(uint8_t*)&stack_args
		);
	}
#endif
	// Call LCD_layerStackExact directly
	LCD_layerStackExact_capability( state, stateType, (uint8_t*)&stack_args );
    3a1c:	4628      	mov	r0, r5
    3a1e:	4621      	mov	r1, r4
    3a20:	4632      	mov	r2, r6
    3a22:	f7ff ff29 	bl	3878 <LCD_layerStackExact_capability>
}
    3a26:	b007      	add	sp, #28
    3a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a2a:	bf00      	nop
    3a2c:	00008d09 	.word	0x00008d09
    3a30:	1fff91c2 	.word	0x1fff91c2
    3a34:	1fff9198 	.word	0x1fff9198
    3a38:	1fff91c6 	.word	0x1fff91c6
    3a3c:	1fff919a 	.word	0x1fff919a
    3a40:	1fff91ba 	.word	0x1fff91ba
    3a44:	00009ef8 	.word	0x00009ef8

00003a48 <Connect_receive_Animation>:
	// Check whether the scan codes have finished sending
	return *pending_bytes == 0 ? 1 : 0;
}

uint8_t Connect_receive_Animation( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    3a48:	b508      	push	{r3, lr}
	dbug_print("Animation");
    3a4a:	4802      	ldr	r0, [pc, #8]	; (3a54 <Connect_receive_Animation+0xc>)
    3a4c:	f004 f8ac 	bl	7ba8 <_print>
	return 1;
}
    3a50:	2001      	movs	r0, #1
    3a52:	bd08      	pop	{r3, pc}
    3a54:	00009107 	.word	0x00009107

00003a58 <cliFunc_connectDbg>:
		break;
	}
}

void cliFunc_connectDbg( char* args )
{
    3a58:	b508      	push	{r3, lr}
	print( NL );
    3a5a:	4806      	ldr	r0, [pc, #24]	; (3a74 <cliFunc_connectDbg+0x1c>)
    3a5c:	f004 f8a4 	bl	7ba8 <_print>
	info_msg("Connect Debug Mode Toggle");
    3a60:	4805      	ldr	r0, [pc, #20]	; (3a78 <cliFunc_connectDbg+0x20>)
    3a62:	f004 f8a1 	bl	7ba8 <_print>
	Connect_debug = !Connect_debug;
    3a66:	4a05      	ldr	r2, [pc, #20]	; (3a7c <cliFunc_connectDbg+0x24>)
    3a68:	7813      	ldrb	r3, [r2, #0]
    3a6a:	fab3 f383 	clz	r3, r3
    3a6e:	095b      	lsrs	r3, r3, #5
    3a70:	7013      	strb	r3, [r2, #0]
    3a72:	bd08      	pop	{r3, pc}
    3a74:	0000bc21 	.word	0x0000bc21
    3a78:	00009126 	.word	0x00009126
    3a7c:	1fff91b1 	.word	0x1fff91b1

00003a80 <Connect_receive_CableCheck>:
uint32_t Connect_cableChecksSlave  = 0;
uint8_t  Connect_cableOkMaster = 0;
uint8_t  Connect_cableOkSlave  = 0;

uint8_t Connect_receive_CableCheck( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    3a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Check if this is the first byte
	if ( *pending_bytes == 0xFFFF )
    3a82:	880b      	ldrh	r3, [r1, #0]
uint32_t Connect_cableChecksSlave  = 0;
uint8_t  Connect_cableOkMaster = 0;
uint8_t  Connect_cableOkSlave  = 0;

uint8_t Connect_receive_CableCheck( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    3a84:	4616      	mov	r6, r2
	// Check if this is the first byte
	if ( *pending_bytes == 0xFFFF )
    3a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3a8a:	4293      	cmp	r3, r2
uint32_t Connect_cableChecksSlave  = 0;
uint8_t  Connect_cableOkMaster = 0;
uint8_t  Connect_cableOkSlave  = 0;

uint8_t Connect_receive_CableCheck( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    3a8c:	4605      	mov	r5, r0
    3a8e:	460c      	mov	r4, r1
	// Check if this is the first byte
	if ( *pending_bytes == 0xFFFF )
    3a90:	d117      	bne.n	3ac2 <Connect_receive_CableCheck+0x42>
	{
		*pending_bytes = byte;
    3a92:	b287      	uxth	r7, r0

		if ( Connect_debug )
    3a94:	4b38      	ldr	r3, [pc, #224]	; (3b78 <Connect_receive_CableCheck+0xf8>)
uint8_t Connect_receive_CableCheck( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
	// Check if this is the first byte
	if ( *pending_bytes == 0xFFFF )
	{
		*pending_bytes = byte;
    3a96:	800f      	strh	r7, [r1, #0]

		if ( Connect_debug )
    3a98:	781b      	ldrb	r3, [r3, #0]
    3a9a:	2b00      	cmp	r3, #0
    3a9c:	d04b      	beq.n	3b36 <Connect_receive_CableCheck+0xb6>
		{
			dbug_msg("PENDING SET -> ");
    3a9e:	4837      	ldr	r0, [pc, #220]	; (3b7c <Connect_receive_CableCheck+0xfc>)
    3aa0:	f004 f882 	bl	7ba8 <_print>
			printHex( byte );
    3aa4:	4638      	mov	r0, r7
    3aa6:	2101      	movs	r1, #1
    3aa8:	f004 f920 	bl	7cec <printHex_op>
			print(" ");
    3aac:	4834      	ldr	r0, [pc, #208]	; (3b80 <Connect_receive_CableCheck+0x100>)
    3aae:	f004 f87b 	bl	7ba8 <_print>
			printHex( *pending_bytes );
    3ab2:	8820      	ldrh	r0, [r4, #0]
    3ab4:	2101      	movs	r1, #1
    3ab6:	f004 f919 	bl	7cec <printHex_op>
			print( NL );
    3aba:	4832      	ldr	r0, [pc, #200]	; (3b84 <Connect_receive_CableCheck+0x104>)
    3abc:	f004 f874 	bl	7ba8 <_print>
    3ac0:	e039      	b.n	3b36 <Connect_receive_CableCheck+0xb6>
		}
	}
	// Verify byte
	else
	{
		(*pending_bytes)--;
    3ac2:	3b01      	subs	r3, #1

		// The argument bytes are always 0xD2 (11010010)
		if ( byte != 0xD2 )
    3ac4:	28d2      	cmp	r0, #210	; 0xd2
		}
	}
	// Verify byte
	else
	{
		(*pending_bytes)--;
    3ac6:	800b      	strh	r3, [r1, #0]

		// The argument bytes are always 0xD2 (11010010)
		if ( byte != 0xD2 )
    3ac8:	d024      	beq.n	3b14 <Connect_receive_CableCheck+0x94>
		{
			warn_print("Cable Fault!");
    3aca:	482f      	ldr	r0, [pc, #188]	; (3b88 <Connect_receive_CableCheck+0x108>)
    3acc:	f004 f86c 	bl	7ba8 <_print>

			// Check which side of the chain
			if ( uart_num == UART_Slave )
    3ad0:	b93e      	cbnz	r6, 3ae2 <Connect_receive_CableCheck+0x62>
			{
				Connect_cableFaultsSlave++;
    3ad2:	4a2e      	ldr	r2, [pc, #184]	; (3b8c <Connect_receive_CableCheck+0x10c>)
				Connect_cableOkSlave = 0;
				print(" Slave ");
    3ad4:	482e      	ldr	r0, [pc, #184]	; (3b90 <Connect_receive_CableCheck+0x110>)
			warn_print("Cable Fault!");

			// Check which side of the chain
			if ( uart_num == UART_Slave )
			{
				Connect_cableFaultsSlave++;
    3ad6:	6813      	ldr	r3, [r2, #0]
    3ad8:	3301      	adds	r3, #1
    3ada:	6013      	str	r3, [r2, #0]
				Connect_cableOkSlave = 0;
    3adc:	4b2d      	ldr	r3, [pc, #180]	; (3b94 <Connect_receive_CableCheck+0x114>)
    3ade:	701e      	strb	r6, [r3, #0]
    3ae0:	e00d      	b.n	3afe <Connect_receive_CableCheck+0x7e>
			else
			{
				// Lower current requirement during errors
				// USB minimum
				// Only if this is not the master node
				if ( Connect_id != 0 )
    3ae2:	4b2d      	ldr	r3, [pc, #180]	; (3b98 <Connect_receive_CableCheck+0x118>)
    3ae4:	781b      	ldrb	r3, [r3, #0]
    3ae6:	b113      	cbz	r3, 3aee <Connect_receive_CableCheck+0x6e>
				{
					Output_update_external_current( 100 );
    3ae8:	2064      	movs	r0, #100	; 0x64
    3aea:	f002 fc2f 	bl	634c <Output_update_external_current>
				}

				Connect_cableFaultsMaster++;
    3aee:	4a2b      	ldr	r2, [pc, #172]	; (3b9c <Connect_receive_CableCheck+0x11c>)
				Connect_cableOkMaster = 0;
				print(" Master ");
    3af0:	482b      	ldr	r0, [pc, #172]	; (3ba0 <Connect_receive_CableCheck+0x120>)
				if ( Connect_id != 0 )
				{
					Output_update_external_current( 100 );
				}

				Connect_cableFaultsMaster++;
    3af2:	6813      	ldr	r3, [r2, #0]
    3af4:	3301      	adds	r3, #1
    3af6:	6013      	str	r3, [r2, #0]
				Connect_cableOkMaster = 0;
    3af8:	4b2a      	ldr	r3, [pc, #168]	; (3ba4 <Connect_receive_CableCheck+0x124>)
    3afa:	2200      	movs	r2, #0
    3afc:	701a      	strb	r2, [r3, #0]
				print(" Master ");
    3afe:	f004 f853 	bl	7ba8 <_print>
			}
			printHex( byte );
    3b02:	4628      	mov	r0, r5
    3b04:	2101      	movs	r1, #1
    3b06:	f004 f8f1 	bl	7cec <printHex_op>
			print( NL );
    3b0a:	481e      	ldr	r0, [pc, #120]	; (3b84 <Connect_receive_CableCheck+0x104>)
    3b0c:	f004 f84c 	bl	7ba8 <_print>

			// Signal that the command should wait for a SYN again
			return 1;
    3b10:	2001      	movs	r0, #1
    3b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else
		{
			// Check which side of the chain
			if ( uart_num == UART_Slave )
    3b14:	b90e      	cbnz	r6, 3b1a <Connect_receive_CableCheck+0x9a>
			{
				Connect_cableChecksSlave++;
    3b16:	4a24      	ldr	r2, [pc, #144]	; (3ba8 <Connect_receive_CableCheck+0x128>)
    3b18:	e00a      	b.n	3b30 <Connect_receive_CableCheck+0xb0>
			}
			else
			{
				// If we already have an Id, then set max current again
				if ( Connect_id != 255 && Connect_id != 0 )
    3b1a:	4b1f      	ldr	r3, [pc, #124]	; (3b98 <Connect_receive_CableCheck+0x118>)
    3b1c:	781b      	ldrb	r3, [r3, #0]
    3b1e:	3b01      	subs	r3, #1
    3b20:	b2db      	uxtb	r3, r3
    3b22:	2bfd      	cmp	r3, #253	; 0xfd
    3b24:	d803      	bhi.n	3b2e <Connect_receive_CableCheck+0xae>
				{
					// TODO reset to original negotiated current
					Output_update_external_current( 500 );
    3b26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    3b2a:	f002 fc0f 	bl	634c <Output_update_external_current>
				}
				Connect_cableChecksMaster++;
    3b2e:	4a1f      	ldr	r2, [pc, #124]	; (3bac <Connect_receive_CableCheck+0x12c>)
    3b30:	6813      	ldr	r3, [r2, #0]
    3b32:	3301      	adds	r3, #1
    3b34:	6013      	str	r3, [r2, #0]
			}
		}
	}

	// If cable check was successful, set cable ok
	if ( *pending_bytes == 0 )
    3b36:	8823      	ldrh	r3, [r4, #0]
    3b38:	b92b      	cbnz	r3, 3b46 <Connect_receive_CableCheck+0xc6>
    3b3a:	2301      	movs	r3, #1
	{
		if ( uart_num == UART_Slave )
    3b3c:	b90e      	cbnz	r6, 3b42 <Connect_receive_CableCheck+0xc2>
		{
			Connect_cableOkSlave = 1;
    3b3e:	4a15      	ldr	r2, [pc, #84]	; (3b94 <Connect_receive_CableCheck+0x114>)
    3b40:	e000      	b.n	3b44 <Connect_receive_CableCheck+0xc4>
		}
		else
		{
			Connect_cableOkMaster = 1;
    3b42:	4a18      	ldr	r2, [pc, #96]	; (3ba4 <Connect_receive_CableCheck+0x124>)
    3b44:	7013      	strb	r3, [r2, #0]
		}
	}

	if ( Connect_debug )
    3b46:	4b0c      	ldr	r3, [pc, #48]	; (3b78 <Connect_receive_CableCheck+0xf8>)
    3b48:	781b      	ldrb	r3, [r3, #0]
    3b4a:	b183      	cbz	r3, 3b6e <Connect_receive_CableCheck+0xee>
	{
		dbug_msg("CABLECHECK RECEIVE - ");
    3b4c:	4818      	ldr	r0, [pc, #96]	; (3bb0 <Connect_receive_CableCheck+0x130>)
    3b4e:	f004 f82b 	bl	7ba8 <_print>
		printHex( byte );
    3b52:	2101      	movs	r1, #1
    3b54:	4628      	mov	r0, r5
    3b56:	f004 f8c9 	bl	7cec <printHex_op>
		print(" ");
    3b5a:	4809      	ldr	r0, [pc, #36]	; (3b80 <Connect_receive_CableCheck+0x100>)
    3b5c:	f004 f824 	bl	7ba8 <_print>
		printHex( *pending_bytes );
    3b60:	8820      	ldrh	r0, [r4, #0]
    3b62:	2101      	movs	r1, #1
    3b64:	f004 f8c2 	bl	7cec <printHex_op>
		print( NL );
    3b68:	4806      	ldr	r0, [pc, #24]	; (3b84 <Connect_receive_CableCheck+0x104>)
    3b6a:	f004 f81d 	bl	7ba8 <_print>
	}

	// Check whether the cable check has finished
	return *pending_bytes == 0 ? 1 : 0;
    3b6e:	8820      	ldrh	r0, [r4, #0]
    3b70:	fab0 f080 	clz	r0, r0
    3b74:	0940      	lsrs	r0, r0, #5
}
    3b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b78:	1fff91b1 	.word	0x1fff91b1
    3b7c:	00009152 	.word	0x00009152
    3b80:	0000852a 	.word	0x0000852a
    3b84:	0000bc21 	.word	0x0000bc21
    3b88:	00009175 	.word	0x00009175
    3b8c:	1fff91a4 	.word	0x1fff91a4
    3b90:	00009199 	.word	0x00009199
    3b94:	1fff91b8 	.word	0x1fff91b8
    3b98:	1fff89c5 	.word	0x1fff89c5
    3b9c:	1fff91ac 	.word	0x1fff91ac
    3ba0:	000091a1 	.word	0x000091a1
    3ba4:	1fff91a0 	.word	0x1fff91a0
    3ba8:	1fff91b4 	.word	0x1fff91b4
    3bac:	1fff91a8 	.word	0x1fff91a8
    3bb0:	000091aa 	.word	0x000091aa

00003bb4 <cliFunc_connectLst>:

	Connect_send_Idle( count );
}

void cliFunc_connectLst( char* args )
{
    3bb4:	b530      	push	{r4, r5, lr}
	const char *Command_strs[] = {
    3bb6:	4d11      	ldr	r5, [pc, #68]	; (3bfc <cliFunc_connectLst+0x48>)
    3bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}

	Connect_send_Idle( count );
}

void cliFunc_connectLst( char* args )
{
    3bba:	b08b      	sub	sp, #44	; 0x2c
	const char *Command_strs[] = {
    3bbc:	ac01      	add	r4, sp, #4
    3bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3bc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3bc4:	682b      	ldr	r3, [r5, #0]
		"RemoteCapability",
		"RemoteOutput",
		"RemoteInput",
	};

	print( NL );
    3bc6:	480e      	ldr	r0, [pc, #56]	; (3c00 <cliFunc_connectLst+0x4c>)
	Connect_send_Idle( count );
}

void cliFunc_connectLst( char* args )
{
	const char *Command_strs[] = {
    3bc8:	6023      	str	r3, [r4, #0]
		"RemoteCapability",
		"RemoteOutput",
		"RemoteInput",
	};

	print( NL );
    3bca:	f003 ffed 	bl	7ba8 <_print>
	info_msg("List of UARTConnect commands");
    3bce:	480d      	ldr	r0, [pc, #52]	; (3c04 <cliFunc_connectLst+0x50>)
    3bd0:	f003 ffea 	bl	7ba8 <_print>
    3bd4:	2400      	movs	r4, #0
    3bd6:	ad01      	add	r5, sp, #4
	for ( uint8_t cmd = 0; cmd < Command_TOP; cmd++ )
	{
		print( NL );
    3bd8:	4809      	ldr	r0, [pc, #36]	; (3c00 <cliFunc_connectLst+0x4c>)
    3bda:	f003 ffe5 	bl	7ba8 <_print>
		printInt8( cmd );
    3bde:	b2e0      	uxtb	r0, r4
    3be0:	f004 f811 	bl	7c06 <printInt8>
		print(" - ");
    3be4:	4808      	ldr	r0, [pc, #32]	; (3c08 <cliFunc_connectLst+0x54>)
    3be6:	f003 ffdf 	bl	7ba8 <_print>
		dPrint( (char*)Command_strs[ cmd ] );
    3bea:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    3bee:	3401      	adds	r4, #1
    3bf0:	f002 fb80 	bl	62f4 <Output_putstr>
		"RemoteInput",
	};

	print( NL );
	info_msg("List of UARTConnect commands");
	for ( uint8_t cmd = 0; cmd < Command_TOP; cmd++ )
    3bf4:	2c09      	cmp	r4, #9
    3bf6:	d1ef      	bne.n	3bd8 <cliFunc_connectLst+0x24>
		print( NL );
		printInt8( cmd );
		print(" - ");
		dPrint( (char*)Command_strs[ cmd ] );
	}
}
    3bf8:	b00b      	add	sp, #44	; 0x2c
    3bfa:	bd30      	pop	{r4, r5, pc}
    3bfc:	00009044 	.word	0x00009044
    3c00:	0000bc21 	.word	0x0000bc21
    3c04:	000091d3 	.word	0x000091d3
    3c08:	000095e7 	.word	0x000095e7

00003c0c <cliFunc_connectSts>:
	// Reset node id
	Connect_id = 0xFF;
}

void cliFunc_connectSts( char* args )
{
    3c0c:	b538      	push	{r3, r4, r5, lr}
	print( NL );
    3c0e:	4839      	ldr	r0, [pc, #228]	; (3cf4 <cliFunc_connectSts+0xe8>)
	print( NL "\tFaults:\t");
	printHex32( Connect_cableFaultsMaster );
	print("/");
	printHex32( Connect_cableChecksMaster );
	print( NL "\tRx:\t");
	printHex( uart_rx_status[UART_Master].status );
    3c10:	4d39      	ldr	r5, [pc, #228]	; (3cf8 <cliFunc_connectSts+0xec>)
	print( NL "\tTx:\t");
	printHex( uart_tx_status[UART_Master].status );
    3c12:	4c3a      	ldr	r4, [pc, #232]	; (3cfc <cliFunc_connectSts+0xf0>)
	Connect_id = 0xFF;
}

void cliFunc_connectSts( char* args )
{
	print( NL );
    3c14:	f003 ffc8 	bl	7ba8 <_print>
	info_msg("UARTConnect Status");
    3c18:	4839      	ldr	r0, [pc, #228]	; (3d00 <cliFunc_connectSts+0xf4>)
    3c1a:	f003 ffc5 	bl	7ba8 <_print>
	print( NL "Device Type:\t" );
    3c1e:	4839      	ldr	r0, [pc, #228]	; (3d04 <cliFunc_connectSts+0xf8>)
    3c20:	f003 ffc2 	bl	7ba8 <_print>
	print( Connect_master ? "Master" : "Slave" );
    3c24:	4b38      	ldr	r3, [pc, #224]	; (3d08 <cliFunc_connectSts+0xfc>)
    3c26:	4a39      	ldr	r2, [pc, #228]	; (3d0c <cliFunc_connectSts+0x100>)
    3c28:	7818      	ldrb	r0, [r3, #0]
    3c2a:	4b39      	ldr	r3, [pc, #228]	; (3d10 <cliFunc_connectSts+0x104>)
    3c2c:	2800      	cmp	r0, #0
    3c2e:	bf14      	ite	ne
    3c30:	4610      	movne	r0, r2
    3c32:	4618      	moveq	r0, r3
    3c34:	f003 ffb8 	bl	7ba8 <_print>
	print( NL "Device Id:\t" );
    3c38:	4836      	ldr	r0, [pc, #216]	; (3d14 <cliFunc_connectSts+0x108>)
    3c3a:	f003 ffb5 	bl	7ba8 <_print>
	printHex( Connect_id );
    3c3e:	4b36      	ldr	r3, [pc, #216]	; (3d18 <cliFunc_connectSts+0x10c>)
    3c40:	2101      	movs	r1, #1
    3c42:	7818      	ldrb	r0, [r3, #0]
    3c44:	f004 f852 	bl	7cec <printHex_op>
	print( NL "Max Id:\t" );
    3c48:	4834      	ldr	r0, [pc, #208]	; (3d1c <cliFunc_connectSts+0x110>)
    3c4a:	f003 ffad 	bl	7ba8 <_print>
	printHex( Connect_maxId );
    3c4e:	4b34      	ldr	r3, [pc, #208]	; (3d20 <cliFunc_connectSts+0x114>)
    3c50:	2101      	movs	r1, #1
    3c52:	7818      	ldrb	r0, [r3, #0]
    3c54:	f004 f84a 	bl	7cec <printHex_op>
	print( NL "Master <=" NL "\tStatus:\t");
    3c58:	4832      	ldr	r0, [pc, #200]	; (3d24 <cliFunc_connectSts+0x118>)
    3c5a:	f003 ffa5 	bl	7ba8 <_print>
	printHex( Connect_cableOkMaster );
    3c5e:	4b32      	ldr	r3, [pc, #200]	; (3d28 <cliFunc_connectSts+0x11c>)
    3c60:	2101      	movs	r1, #1
    3c62:	7818      	ldrb	r0, [r3, #0]
    3c64:	f004 f842 	bl	7cec <printHex_op>
	print( NL "\tFaults:\t");
    3c68:	4830      	ldr	r0, [pc, #192]	; (3d2c <cliFunc_connectSts+0x120>)
    3c6a:	f003 ff9d 	bl	7ba8 <_print>
	printHex32( Connect_cableFaultsMaster );
    3c6e:	4b30      	ldr	r3, [pc, #192]	; (3d30 <cliFunc_connectSts+0x124>)
    3c70:	2101      	movs	r1, #1
    3c72:	6818      	ldr	r0, [r3, #0]
    3c74:	f004 f872 	bl	7d5c <printHex32_op>
	print("/");
    3c78:	482e      	ldr	r0, [pc, #184]	; (3d34 <cliFunc_connectSts+0x128>)
    3c7a:	f003 ff95 	bl	7ba8 <_print>
	printHex32( Connect_cableChecksMaster );
    3c7e:	4b2e      	ldr	r3, [pc, #184]	; (3d38 <cliFunc_connectSts+0x12c>)
    3c80:	2101      	movs	r1, #1
    3c82:	6818      	ldr	r0, [r3, #0]
    3c84:	f004 f86a 	bl	7d5c <printHex32_op>
	print( NL "\tRx:\t");
    3c88:	482c      	ldr	r0, [pc, #176]	; (3d3c <cliFunc_connectSts+0x130>)
    3c8a:	f003 ff8d 	bl	7ba8 <_print>
	printHex( uart_rx_status[UART_Master].status );
    3c8e:	7928      	ldrb	r0, [r5, #4]
    3c90:	2101      	movs	r1, #1
    3c92:	f004 f82b 	bl	7cec <printHex_op>
	print( NL "\tTx:\t");
    3c96:	482a      	ldr	r0, [pc, #168]	; (3d40 <cliFunc_connectSts+0x134>)
    3c98:	f003 ff86 	bl	7ba8 <_print>
	printHex( uart_tx_status[UART_Master].status );
    3c9c:	78a0      	ldrb	r0, [r4, #2]
    3c9e:	2101      	movs	r1, #1
    3ca0:	f004 f824 	bl	7cec <printHex_op>
	print( NL "Slave <=" NL "\tStatus:\t");
    3ca4:	4827      	ldr	r0, [pc, #156]	; (3d44 <cliFunc_connectSts+0x138>)
    3ca6:	f003 ff7f 	bl	7ba8 <_print>
	printHex( Connect_cableOkSlave );
    3caa:	4b27      	ldr	r3, [pc, #156]	; (3d48 <cliFunc_connectSts+0x13c>)
    3cac:	2101      	movs	r1, #1
    3cae:	7818      	ldrb	r0, [r3, #0]
    3cb0:	f004 f81c 	bl	7cec <printHex_op>
	print( NL "\tFaults:\t");
    3cb4:	481d      	ldr	r0, [pc, #116]	; (3d2c <cliFunc_connectSts+0x120>)
    3cb6:	f003 ff77 	bl	7ba8 <_print>
	printHex32( Connect_cableFaultsSlave );
    3cba:	4b24      	ldr	r3, [pc, #144]	; (3d4c <cliFunc_connectSts+0x140>)
    3cbc:	2101      	movs	r1, #1
    3cbe:	6818      	ldr	r0, [r3, #0]
    3cc0:	f004 f84c 	bl	7d5c <printHex32_op>
	print("/");
    3cc4:	481b      	ldr	r0, [pc, #108]	; (3d34 <cliFunc_connectSts+0x128>)
    3cc6:	f003 ff6f 	bl	7ba8 <_print>
	printHex32( Connect_cableChecksSlave );
    3cca:	4b21      	ldr	r3, [pc, #132]	; (3d50 <cliFunc_connectSts+0x144>)
    3ccc:	2101      	movs	r1, #1
    3cce:	6818      	ldr	r0, [r3, #0]
    3cd0:	f004 f844 	bl	7d5c <printHex32_op>
	print( NL "\tRx:\t");
    3cd4:	4819      	ldr	r0, [pc, #100]	; (3d3c <cliFunc_connectSts+0x130>)
    3cd6:	f003 ff67 	bl	7ba8 <_print>
	printHex( uart_rx_status[UART_Slave].status );
    3cda:	7828      	ldrb	r0, [r5, #0]
    3cdc:	2101      	movs	r1, #1
    3cde:	f004 f805 	bl	7cec <printHex_op>
	print( NL "\tTx:\t");
    3ce2:	4817      	ldr	r0, [pc, #92]	; (3d40 <cliFunc_connectSts+0x134>)
    3ce4:	f003 ff60 	bl	7ba8 <_print>
	printHex( uart_tx_status[UART_Slave].status );
    3ce8:	7820      	ldrb	r0, [r4, #0]
    3cea:	2101      	movs	r1, #1
}
    3cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	print("/");
	printHex32( Connect_cableChecksSlave );
	print( NL "\tRx:\t");
	printHex( uart_rx_status[UART_Slave].status );
	print( NL "\tTx:\t");
	printHex( uart_tx_status[UART_Slave].status );
    3cf0:	f003 bffc 	b.w	7cec <printHex_op>
    3cf4:	0000bc21 	.word	0x0000bc21
    3cf8:	1fff9ec4 	.word	0x1fff9ec4
    3cfc:	1fff9ea6 	.word	0x1fff9ea6
    3d00:	0000920f 	.word	0x0000920f
    3d04:	00009234 	.word	0x00009234
    3d08:	1fff91ba 	.word	0x1fff91ba
    3d0c:	00009202 	.word	0x00009202
    3d10:	00009209 	.word	0x00009209
    3d14:	00009244 	.word	0x00009244
    3d18:	1fff89c5 	.word	0x1fff89c5
    3d1c:	00009252 	.word	0x00009252
    3d20:	1fff91b0 	.word	0x1fff91b0
    3d24:	0000925d 	.word	0x0000925d
    3d28:	1fff91a0 	.word	0x1fff91a0
    3d2c:	00009274 	.word	0x00009274
    3d30:	1fff91ac 	.word	0x1fff91ac
    3d34:	00009280 	.word	0x00009280
    3d38:	1fff91a8 	.word	0x1fff91a8
    3d3c:	00009282 	.word	0x00009282
    3d40:	0000928a 	.word	0x0000928a
    3d44:	00009292 	.word	0x00009292
    3d48:	1fff91b8 	.word	0x1fff91b8
    3d4c:	1fff91a4 	.word	0x1fff91a4
    3d50:	1fff91b4 	.word	0x1fff91b4

00003d54 <cliFunc_connectMst>:
		dPrint( (char*)Command_strs[ cmd ] );
	}
}

void cliFunc_connectMst( char* args )
{
    3d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    3d56:	aa01      	add	r2, sp, #4
    3d58:	4669      	mov	r1, sp
    3d5a:	f003 fc5d 	bl	7618 <CLI_argumentIsolation>

	print( NL );
    3d5e:	4813      	ldr	r0, [pc, #76]	; (3dac <cliFunc_connectMst+0x58>)
    3d60:	4d13      	ldr	r5, [pc, #76]	; (3db0 <cliFunc_connectMst+0x5c>)
    3d62:	4c14      	ldr	r4, [pc, #80]	; (3db4 <cliFunc_connectMst+0x60>)
    3d64:	f003 ff20 	bl	7ba8 <_print>

	// Set override
	Connect_override = 1;
    3d68:	4b13      	ldr	r3, [pc, #76]	; (3db8 <cliFunc_connectMst+0x64>)
    3d6a:	2201      	movs	r2, #1
    3d6c:	701a      	strb	r2, [r3, #0]

	switch ( arg1Ptr[0] )
    3d6e:	9a00      	ldr	r2, [sp, #0]
    3d70:	7812      	ldrb	r2, [r2, #0]
    3d72:	2a53      	cmp	r2, #83	; 0x53
    3d74:	d00a      	beq.n	3d8c <cliFunc_connectMst+0x38>
    3d76:	d802      	bhi.n	3d7e <cliFunc_connectMst+0x2a>
    3d78:	2a44      	cmp	r2, #68	; 0x44
    3d7a:	d005      	beq.n	3d88 <cliFunc_connectMst+0x34>
    3d7c:	e00d      	b.n	3d9a <cliFunc_connectMst+0x46>
    3d7e:	2a64      	cmp	r2, #100	; 0x64
    3d80:	d002      	beq.n	3d88 <cliFunc_connectMst+0x34>
    3d82:	2a73      	cmp	r2, #115	; 0x73
    3d84:	d002      	beq.n	3d8c <cliFunc_connectMst+0x38>
    3d86:	e008      	b.n	3d9a <cliFunc_connectMst+0x46>
	{
	// Disable override
	case 'd':
	case 'D':
		Connect_override = 0;
    3d88:	2200      	movs	r2, #0
    3d8a:	701a      	strb	r2, [r3, #0]
	case 's':
	case 'S':
		info_msg("Setting device as slave.");
    3d8c:	480b      	ldr	r0, [pc, #44]	; (3dbc <cliFunc_connectMst+0x68>)
    3d8e:	f003 ff0b 	bl	7ba8 <_print>
		Connect_master = 0;
    3d92:	2300      	movs	r3, #0
    3d94:	702b      	strb	r3, [r5, #0]
		Connect_id = 0xFF;
    3d96:	23ff      	movs	r3, #255	; 0xff
    3d98:	e005      	b.n	3da6 <cliFunc_connectMst+0x52>
		break;

	case 'm':
	case 'M':
	default:
		info_msg("Setting device as master.");
    3d9a:	4809      	ldr	r0, [pc, #36]	; (3dc0 <cliFunc_connectMst+0x6c>)
    3d9c:	f003 ff04 	bl	7ba8 <_print>
		Connect_master = 1;
    3da0:	2301      	movs	r3, #1
    3da2:	702b      	strb	r3, [r5, #0]
		Connect_id = 0;
    3da4:	2300      	movs	r3, #0
    3da6:	7023      	strb	r3, [r4, #0]
		break;
	}
}
    3da8:	b003      	add	sp, #12
    3daa:	bd30      	pop	{r4, r5, pc}
    3dac:	0000bc21 	.word	0x0000bc21
    3db0:	1fff91ba 	.word	0x1fff91ba
    3db4:	1fff89c5 	.word	0x1fff89c5
    3db8:	1fff91b9 	.word	0x1fff91b9
    3dbc:	000092a8 	.word	0x000092a8
    3dc0:	000092d3 	.word	0x000092d3

00003dc4 <Connect_addBytes.part.1>:
UARTStatusTx uart_tx_status[UART_Num_Interfaces];


// -- Ring Buffer Convenience Functions --

void Connect_addBytes( uint8_t *buffer, uint8_t count, uint8_t uart )
    3dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3dc6:	4605      	mov	r5, r0
    3dc8:	460f      	mov	r7, r1
    3dca:	4616      	mov	r6, r2
		erro_print("Invalid UART to send from...");
		return;
	}

	// Delay UART copy until there's some space left
	while ( uart_tx_buf[ uart ].items + count > UART_Buffer_Size )
    3dcc:	4c27      	ldr	r4, [pc, #156]	; (3e6c <Connect_addBytes.part.1+0xa8>)
    3dce:	2383      	movs	r3, #131	; 0x83
    3dd0:	fb03 4306 	mla	r3, r3, r6, r4
    3dd4:	789b      	ldrb	r3, [r3, #2]
    3dd6:	443b      	add	r3, r7
    3dd8:	2b80      	cmp	r3, #128	; 0x80
    3dda:	dd0c      	ble.n	3df6 <Connect_addBytes.part.1+0x32>
	{
		warn_msg("Too much data to send on UART");
    3ddc:	4824      	ldr	r0, [pc, #144]	; (3e70 <Connect_addBytes.part.1+0xac>)
    3dde:	f003 fee3 	bl	7ba8 <_print>
		printInt8( uart );
    3de2:	4630      	mov	r0, r6
    3de4:	f003 ff0f 	bl	7c06 <printInt8>
		print( ", waiting..." NL );
    3de8:	4822      	ldr	r0, [pc, #136]	; (3e74 <Connect_addBytes.part.1+0xb0>)
    3dea:	f003 fedd 	bl	7ba8 <_print>
		delay( 1 );
    3dee:	2001      	movs	r0, #1
    3df0:	f7fe fbf2 	bl	25d8 <delay>
    3df4:	e7ea      	b.n	3dcc <Connect_addBytes.part.1+0x8>
    3df6:	442f      	add	r7, r5
	}

	// Append data to ring buffer
	for ( uint8_t c = 0; c < count; c++ )
    3df8:	42bd      	cmp	r5, r7
    3dfa:	d035      	beq.n	3e68 <Connect_addBytes.part.1+0xa4>
	{
		if ( Connect_debug )
    3dfc:	4b1e      	ldr	r3, [pc, #120]	; (3e78 <Connect_addBytes.part.1+0xb4>)
    3dfe:	781b      	ldrb	r3, [r3, #0]
    3e00:	b163      	cbz	r3, 3e1c <Connect_addBytes.part.1+0x58>
		{
			printHex( buffer[ c ] );
    3e02:	2101      	movs	r1, #1
    3e04:	7828      	ldrb	r0, [r5, #0]
    3e06:	f003 ff71 	bl	7cec <printHex_op>
			print(" +");
    3e0a:	481c      	ldr	r0, [pc, #112]	; (3e7c <Connect_addBytes.part.1+0xb8>)
    3e0c:	f003 fecc 	bl	7ba8 <_print>
			printInt8( uart );
    3e10:	4630      	mov	r0, r6
    3e12:	f003 fef8 	bl	7c06 <printInt8>
			print( NL );
    3e16:	481a      	ldr	r0, [pc, #104]	; (3e80 <Connect_addBytes.part.1+0xbc>)
    3e18:	f003 fec6 	bl	7ba8 <_print>
		}

		uart_tx_buf[ uart ].buffer[ uart_tx_buf[ uart ].tail++ ] = buffer[ c ];
    3e1c:	2383      	movs	r3, #131	; 0x83
    3e1e:	fb03 fe06 	mul.w	lr, r3, r6
    3e22:	eb04 000e 	add.w	r0, r4, lr
		uart_tx_buf[ uart ].items++;
		if ( uart_tx_buf[ uart ].tail >= UART_Buffer_Size )
			uart_tx_buf[ uart ].tail = 0;
		if ( uart_tx_buf[ uart ].head == uart_tx_buf[ uart ].tail )
    3e26:	4373      	muls	r3, r6
			print(" +");
			printInt8( uart );
			print( NL );
		}

		uart_tx_buf[ uart ].buffer[ uart_tx_buf[ uart ].tail++ ] = buffer[ c ];
    3e28:	7842      	ldrb	r2, [r0, #1]
    3e2a:	1c51      	adds	r1, r2, #1
    3e2c:	b2c9      	uxtb	r1, r1
    3e2e:	4472      	add	r2, lr
    3e30:	7041      	strb	r1, [r0, #1]
    3e32:	4422      	add	r2, r4
    3e34:	f815 cb01 	ldrb.w	ip, [r5], #1
    3e38:	f882 c003 	strb.w	ip, [r2, #3]
		uart_tx_buf[ uart ].items++;
    3e3c:	7882      	ldrb	r2, [r0, #2]
    3e3e:	3201      	adds	r2, #1
    3e40:	7082      	strb	r2, [r0, #2]
		if ( uart_tx_buf[ uart ].tail >= UART_Buffer_Size )
    3e42:	060a      	lsls	r2, r1, #24
			uart_tx_buf[ uart ].tail = 0;
    3e44:	bf44      	itt	mi
    3e46:	2200      	movmi	r2, #0
    3e48:	7042      	strbmi	r2, [r0, #1]
		if ( uart_tx_buf[ uart ].head == uart_tx_buf[ uart ].tail )
    3e4a:	18e2      	adds	r2, r4, r3
    3e4c:	5ce1      	ldrb	r1, [r4, r3]
    3e4e:	7852      	ldrb	r2, [r2, #1]
    3e50:	428a      	cmp	r2, r1
			uart_tx_buf[ uart ].head++;
    3e52:	bf04      	itt	eq
    3e54:	3201      	addeq	r2, #1
    3e56:	54e2      	strbeq	r2, [r4, r3]
		if ( uart_tx_buf[ uart ].head >= UART_Buffer_Size )
    3e58:	2383      	movs	r3, #131	; 0x83
    3e5a:	4373      	muls	r3, r6
    3e5c:	56e2      	ldrsb	r2, [r4, r3]
    3e5e:	2a00      	cmp	r2, #0
			uart_tx_buf[ uart ].head = 0;
    3e60:	bfbc      	itt	lt
    3e62:	2200      	movlt	r2, #0
    3e64:	54e2      	strblt	r2, [r4, r3]
    3e66:	e7c7      	b.n	3df8 <Connect_addBytes.part.1+0x34>
	}
}
    3e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e6a:	bf00      	nop
    3e6c:	1fff9d9a 	.word	0x1fff9d9a
    3e70:	000092ff 	.word	0x000092ff
    3e74:	00009332 	.word	0x00009332
    3e78:	1fff91b1 	.word	0x1fff91b1
    3e7c:	00009341 	.word	0x00009341
    3e80:	0000bc21 	.word	0x0000bc21

00003e84 <Connect_receive_ScanCode>:
TriggerGuide Connect_receive_ScanCodeBuffer;
uint8_t Connect_receive_ScanCodeBufferPos;
uint8_t Connect_receive_ScanCodeDeviceId;

uint8_t Connect_receive_ScanCode( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    3e84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	// Check the directionality
	if ( uart_num == UART_Master )
    3e86:	2a01      	cmp	r2, #1
TriggerGuide Connect_receive_ScanCodeBuffer;
uint8_t Connect_receive_ScanCodeBufferPos;
uint8_t Connect_receive_ScanCodeDeviceId;

uint8_t Connect_receive_ScanCode( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    3e88:	460d      	mov	r5, r1
    3e8a:	f88d 0007 	strb.w	r0, [sp, #7]
	// Check the directionality
	if ( uart_num == UART_Master )
    3e8e:	d102      	bne.n	3e96 <Connect_receive_ScanCode+0x12>
	{
		erro_print("Invalid ScanCode direction...");
    3e90:	484e      	ldr	r0, [pc, #312]	; (3fcc <Connect_receive_ScanCode+0x148>)
    3e92:	f003 fe89 	bl	7ba8 <_print>
	}

	// Master node, trigger scan codes
	if ( Connect_master ) switch ( (*pending_bytes)-- )
    3e96:	4b4e      	ldr	r3, [pc, #312]	; (3fd0 <Connect_receive_ScanCode+0x14c>)
    3e98:	781a      	ldrb	r2, [r3, #0]
    3e9a:	882b      	ldrh	r3, [r5, #0]
    3e9c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
    3ea0:	2a00      	cmp	r2, #0
    3ea2:	d051      	beq.n	3f48 <Connect_receive_ScanCode+0xc4>
    3ea4:	1e5a      	subs	r2, r3, #1
    3ea6:	428b      	cmp	r3, r1
    3ea8:	802a      	strh	r2, [r5, #0]
    3eaa:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3eae:	d005      	beq.n	3ebc <Connect_receive_ScanCode+0x38>
    3eb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3eb4:	428b      	cmp	r3, r1
    3eb6:	d108      	bne.n	3eca <Connect_receive_ScanCode+0x46>
	{
	// Byte count always starts at 0xFFFF
	case 0xFFFF: // Device Id
		Connect_receive_ScanCodeDeviceId = byte;
    3eb8:	4b46      	ldr	r3, [pc, #280]	; (3fd4 <Connect_receive_ScanCode+0x150>)
    3eba:	e004      	b.n	3ec6 <Connect_receive_ScanCode+0x42>
		break;

	case 0xFFFE: // Number of TriggerGuides in bytes (byte * 3)
		*pending_bytes = byte * sizeof( TriggerGuide );
    3ebc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
		Connect_receive_ScanCodeBufferPos = 0;
    3ec0:	4b45      	ldr	r3, [pc, #276]	; (3fd8 <Connect_receive_ScanCode+0x154>)
	case 0xFFFF: // Device Id
		Connect_receive_ScanCodeDeviceId = byte;
		break;

	case 0xFFFE: // Number of TriggerGuides in bytes (byte * 3)
		*pending_bytes = byte * sizeof( TriggerGuide );
    3ec2:	802a      	strh	r2, [r5, #0]
		Connect_receive_ScanCodeBufferPos = 0;
    3ec4:	2200      	movs	r2, #0
    3ec6:	701a      	strb	r2, [r3, #0]
		break;
    3ec8:	e07a      	b.n	3fc0 <Connect_receive_ScanCode+0x13c>

	default:
		// Set the specific TriggerGuide entry
		((uint8_t*)&Connect_receive_ScanCodeBuffer)[ Connect_receive_ScanCodeBufferPos++ ] = byte;
    3eca:	4943      	ldr	r1, [pc, #268]	; (3fd8 <Connect_receive_ScanCode+0x154>)
    3ecc:	4c43      	ldr	r4, [pc, #268]	; (3fdc <Connect_receive_ScanCode+0x158>)
    3ece:	7808      	ldrb	r0, [r1, #0]
    3ed0:	1c43      	adds	r3, r0, #1
    3ed2:	b2db      	uxtb	r3, r3

		// Reset the BufferPos if higher than sizeof TriggerGuide
		// And send the TriggerGuide to the Macro Module
		if ( Connect_receive_ScanCodeBufferPos >= sizeof( TriggerGuide ) )
    3ed4:	2b02      	cmp	r3, #2
		Connect_receive_ScanCodeBufferPos = 0;
		break;

	default:
		// Set the specific TriggerGuide entry
		((uint8_t*)&Connect_receive_ScanCodeBuffer)[ Connect_receive_ScanCodeBufferPos++ ] = byte;
    3ed6:	700b      	strb	r3, [r1, #0]
    3ed8:	5502      	strb	r2, [r0, r4]

		// Reset the BufferPos if higher than sizeof TriggerGuide
		// And send the TriggerGuide to the Macro Module
		if ( Connect_receive_ScanCodeBufferPos >= sizeof( TriggerGuide ) )
    3eda:	d971      	bls.n	3fc0 <Connect_receive_ScanCode+0x13c>
		{
			Connect_receive_ScanCodeBufferPos = 0;

			// Adjust ScanCode offset
			if ( Connect_receive_ScanCodeDeviceId > 0 )
    3edc:	4e3d      	ldr	r6, [pc, #244]	; (3fd4 <Connect_receive_ScanCode+0x150>)

		// Reset the BufferPos if higher than sizeof TriggerGuide
		// And send the TriggerGuide to the Macro Module
		if ( Connect_receive_ScanCodeBufferPos >= sizeof( TriggerGuide ) )
		{
			Connect_receive_ScanCodeBufferPos = 0;
    3ede:	2300      	movs	r3, #0
    3ee0:	700b      	strb	r3, [r1, #0]

			// Adjust ScanCode offset
			if ( Connect_receive_ScanCodeDeviceId > 0 )
    3ee2:	7833      	ldrb	r3, [r6, #0]
    3ee4:	b18b      	cbz	r3, 3f0a <Connect_receive_ScanCode+0x86>
			{
				// Check if this node is too large
				if ( Connect_receive_ScanCodeDeviceId >= InterconnectNodeMax )
    3ee6:	2b01      	cmp	r3, #1
    3ee8:	d90a      	bls.n	3f00 <Connect_receive_ScanCode+0x7c>
				{
					warn_msg("Not enough interconnect layout nodes configured: ");
    3eea:	483d      	ldr	r0, [pc, #244]	; (3fe0 <Connect_receive_ScanCode+0x15c>)
    3eec:	f003 fe5c 	bl	7ba8 <_print>
					printHex( Connect_receive_ScanCodeDeviceId );
    3ef0:	7830      	ldrb	r0, [r6, #0]
    3ef2:	2101      	movs	r1, #1
    3ef4:	f003 fefa 	bl	7cec <printHex_op>
					print( NL );
    3ef8:	483a      	ldr	r0, [pc, #232]	; (3fe4 <Connect_receive_ScanCode+0x160>)
    3efa:	f003 fe55 	bl	7ba8 <_print>
					break;
    3efe:	e05f      	b.n	3fc0 <Connect_receive_ScanCode+0x13c>
				}

				// This variable is in generatedKeymaps.h
				extern uint8_t InterconnectOffsetList[];
				Connect_receive_ScanCodeBuffer.scanCode = Connect_receive_ScanCodeBuffer.scanCode + InterconnectOffsetList[ Connect_receive_ScanCodeDeviceId - 1 ];
    3f00:	4b39      	ldr	r3, [pc, #228]	; (3fe8 <Connect_receive_ScanCode+0x164>)
    3f02:	781a      	ldrb	r2, [r3, #0]
    3f04:	78a3      	ldrb	r3, [r4, #2]
    3f06:	4413      	add	r3, r2
    3f08:	70a3      	strb	r3, [r4, #2]
			}

			// ScanCode receive debug
			if ( Connect_debug )
    3f0a:	4b38      	ldr	r3, [pc, #224]	; (3fec <Connect_receive_ScanCode+0x168>)
    3f0c:	781b      	ldrb	r3, [r3, #0]
    3f0e:	b1bb      	cbz	r3, 3f40 <Connect_receive_ScanCode+0xbc>
			{
				dbug_msg("");
    3f10:	4837      	ldr	r0, [pc, #220]	; (3ff0 <Connect_receive_ScanCode+0x16c>)
    3f12:	f003 fe49 	bl	7ba8 <_print>
				printHex( Connect_receive_ScanCodeBuffer.type );
    3f16:	2101      	movs	r1, #1
    3f18:	7820      	ldrb	r0, [r4, #0]
    3f1a:	f003 fee7 	bl	7cec <printHex_op>
				print(" ");
    3f1e:	4835      	ldr	r0, [pc, #212]	; (3ff4 <Connect_receive_ScanCode+0x170>)
    3f20:	f003 fe42 	bl	7ba8 <_print>
				printHex( Connect_receive_ScanCodeBuffer.state );
    3f24:	2101      	movs	r1, #1
    3f26:	7860      	ldrb	r0, [r4, #1]
    3f28:	f003 fee0 	bl	7cec <printHex_op>
				print(" ");
    3f2c:	4831      	ldr	r0, [pc, #196]	; (3ff4 <Connect_receive_ScanCode+0x170>)
    3f2e:	f003 fe3b 	bl	7ba8 <_print>
				printHex( Connect_receive_ScanCodeBuffer.scanCode );
    3f32:	78a0      	ldrb	r0, [r4, #2]
    3f34:	2101      	movs	r1, #1
    3f36:	f003 fed9 	bl	7cec <printHex_op>
				print( NL );
    3f3a:	482a      	ldr	r0, [pc, #168]	; (3fe4 <Connect_receive_ScanCode+0x160>)
    3f3c:	f003 fe34 	bl	7ba8 <_print>
			}

			// Send ScanCode to macro module
			Macro_interconnectAdd( &Connect_receive_ScanCodeBuffer );
    3f40:	4826      	ldr	r0, [pc, #152]	; (3fdc <Connect_receive_ScanCode+0x158>)
    3f42:	f001 f9f9 	bl	5338 <Macro_interconnectAdd>
    3f46:	e03b      	b.n	3fc0 <Connect_receive_ScanCode+0x13c>
		break;
	}
	// Propagate ScanCode packet
	// XXX It would be safer to buffer the scancodes first, before transmitting the packet -Jacob
	//     The current method is the more efficient/aggressive, but could cause issues if there were errors during transmission
	else switch ( (*pending_bytes)-- )
    3f48:	1e58      	subs	r0, r3, #1
    3f4a:	428b      	cmp	r3, r1
    3f4c:	8028      	strh	r0, [r5, #0]
    3f4e:	d01e      	beq.n	3f8e <Connect_receive_ScanCode+0x10a>
    3f50:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3f54:	4293      	cmp	r3, r2
    3f56:	d127      	bne.n	3fa8 <Connect_receive_ScanCode+0x124>
	{
	// Byte count always starts at 0xFFFF
	case 0xFFFF: // Device Id
	{
		Connect_receive_ScanCodeDeviceId = byte;
    3f58:	4b1e      	ldr	r3, [pc, #120]	; (3fd4 <Connect_receive_ScanCode+0x150>)
    3f5a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3f5e:	7018      	strb	r0, [r3, #0]

		// Lock the master Tx buffer
		uart_lockTx( UART_Master );
    3f60:	4b25      	ldr	r3, [pc, #148]	; (3ff8 <Connect_receive_ScanCode+0x174>)
    3f62:	78da      	ldrb	r2, [r3, #3]
    3f64:	2a00      	cmp	r2, #0
    3f66:	d1fd      	bne.n	3f64 <Connect_receive_ScanCode+0xe0>
    3f68:	2201      	movs	r2, #1
    3f6a:	7899      	ldrb	r1, [r3, #2]
    3f6c:	70da      	strb	r2, [r3, #3]
    3f6e:	2904      	cmp	r1, #4
    3f70:	d1fd      	bne.n	3f6e <Connect_receive_ScanCode+0xea>
    3f72:	2200      	movs	r2, #0
    3f74:	709a      	strb	r2, [r3, #2]

		// Send header + Id byte
		uint8_t header[] = { 0x16, 0x01, ScanCode, byte };
    3f76:	2316      	movs	r3, #22
    3f78:	2201      	movs	r2, #1
    3f7a:	f88d 000f 	strb.w	r0, [sp, #15]
    3f7e:	f88d 300c 	strb.w	r3, [sp, #12]
    3f82:	f88d 200d 	strb.w	r2, [sp, #13]
    3f86:	f88d 100e 	strb.w	r1, [sp, #14]
    3f8a:	a803      	add	r0, sp, #12
    3f8c:	e009      	b.n	3fa2 <Connect_receive_ScanCode+0x11e>
		Connect_addBytes( header, sizeof( header ), UART_Master );
		break;
	}
	case 0xFFFE: // Number of TriggerGuides in bytes
		*pending_bytes = byte * sizeof( TriggerGuide );
    3f8e:	a804      	add	r0, sp, #16
    3f90:	2101      	movs	r1, #1
    3f92:	f810 3d09 	ldrb.w	r3, [r0, #-9]!
    3f96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3f9a:	802b      	strh	r3, [r5, #0]
		Connect_receive_ScanCodeBufferPos = 0;
    3f9c:	4b0e      	ldr	r3, [pc, #56]	; (3fd8 <Connect_receive_ScanCode+0x154>)
    3f9e:	701a      	strb	r2, [r3, #0]
    3fa0:	460a      	mov	r2, r1
    3fa2:	f7ff ff0f 	bl	3dc4 <Connect_addBytes.part.1>
    3fa6:	e00b      	b.n	3fc0 <Connect_receive_ScanCode+0x13c>
    3fa8:	2101      	movs	r1, #1
    3faa:	460a      	mov	r2, r1
    3fac:	f10d 0007 	add.w	r0, sp, #7
    3fb0:	f7ff ff08 	bl	3dc4 <Connect_addBytes.part.1>
	default:
		// Pass through byte
		Connect_addBytes( &byte, 1, UART_Master );

		// Unlock Tx Buffer after sending last byte
		if ( *pending_bytes == 0 )
    3fb4:	882a      	ldrh	r2, [r5, #0]
    3fb6:	b91a      	cbnz	r2, 3fc0 <Connect_receive_ScanCode+0x13c>
			uart_unlockTx( UART_Master );
    3fb8:	4b0f      	ldr	r3, [pc, #60]	; (3ff8 <Connect_receive_ScanCode+0x174>)
    3fba:	2104      	movs	r1, #4
    3fbc:	7099      	strb	r1, [r3, #2]
    3fbe:	70da      	strb	r2, [r3, #3]
		break;
	}

	// Check whether the scan codes have finished sending
	return *pending_bytes == 0 ? 1 : 0;
    3fc0:	8828      	ldrh	r0, [r5, #0]
}
    3fc2:	fab0 f080 	clz	r0, r0
    3fc6:	0940      	lsrs	r0, r0, #5
    3fc8:	b004      	add	sp, #16
    3fca:	bd70      	pop	{r4, r5, r6, pc}
    3fcc:	00009344 	.word	0x00009344
    3fd0:	1fff91ba 	.word	0x1fff91ba
    3fd4:	1fff9ec3 	.word	0x1fff9ec3
    3fd8:	1fff9fd3 	.word	0x1fff9fd3
    3fdc:	1fff9fd0 	.word	0x1fff9fd0
    3fe0:	00009379 	.word	0x00009379
    3fe4:	0000bc21 	.word	0x0000bc21
    3fe8:	00009a8b 	.word	0x00009a8b
    3fec:	1fff91b1 	.word	0x1fff91b1
    3ff0:	000093c0 	.word	0x000093c0
    3ff4:	0000852a 	.word	0x0000852a
    3ff8:	1fff9ea6 	.word	0x1fff9ea6

00003ffc <Connect_addBytes>:
// -- Ring Buffer Convenience Functions --

void Connect_addBytes( uint8_t *buffer, uint8_t count, uint8_t uart )
{
	// Too big to fit into buffer
	if ( count > UART_Buffer_Size )
    3ffc:	2980      	cmp	r1, #128	; 0x80
    3ffe:	d901      	bls.n	4004 <Connect_addBytes+0x8>
	{
		erro_msg("Too big of a command to fit into the buffer...");
    4000:	4804      	ldr	r0, [pc, #16]	; (4014 <Connect_addBytes+0x18>)
    4002:	e004      	b.n	400e <Connect_addBytes+0x12>
		return;
	}

	// Invalid UART
	if ( uart >= UART_Num_Interfaces )
    4004:	2a01      	cmp	r2, #1
    4006:	d801      	bhi.n	400c <Connect_addBytes+0x10>
    4008:	f7ff bedc 	b.w	3dc4 <Connect_addBytes.part.1>
	{
		erro_print("Invalid UART to send from...");
    400c:	4802      	ldr	r0, [pc, #8]	; (4018 <Connect_addBytes+0x1c>)
    400e:	f003 bdcb 	b.w	7ba8 <_print>
    4012:	bf00      	nop
    4014:	000093d4 	.word	0x000093d4
    4018:	00009418 	.word	0x00009418

0000401c <Connect_receive_RemoteCapability>:
uint8_t Connect_receive_RemoteCapabilityArgs[Connect_receive_RemoteCapabilityMaxArgs];

uint8_t Connect_receive_RemoteCapability( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
	// Check which byte in the packet we are at
	switch ( (*pending_bytes)-- )
    401c:	880b      	ldrh	r3, [r1, #0]
#define Connect_receive_RemoteCapabilityMaxArgs 25 // XXX Calculate the max using kll
RemoteCapabilityCommand Connect_receive_RemoteCapabilityBuffer;
uint8_t Connect_receive_RemoteCapabilityArgs[Connect_receive_RemoteCapabilityMaxArgs];

uint8_t Connect_receive_RemoteCapability( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    401e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4020:	460f      	mov	r7, r1
	// Check which byte in the packet we are at
	switch ( (*pending_bytes)-- )
    4022:	1e59      	subs	r1, r3, #1
    4024:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
    4028:	b289      	uxth	r1, r1
    402a:	3bfb      	subs	r3, #251	; 0xfb
#define Connect_receive_RemoteCapabilityMaxArgs 25 // XXX Calculate the max using kll
RemoteCapabilityCommand Connect_receive_RemoteCapabilityBuffer;
uint8_t Connect_receive_RemoteCapabilityArgs[Connect_receive_RemoteCapabilityMaxArgs];

uint8_t Connect_receive_RemoteCapability( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    402c:	4616      	mov	r6, r2
	// Check which byte in the packet we are at
	switch ( (*pending_bytes)-- )
    402e:	8039      	strh	r1, [r7, #0]
    4030:	4d38      	ldr	r5, [pc, #224]	; (4114 <Connect_receive_RemoteCapability+0xf8>)
    4032:	2b04      	cmp	r3, #4
    4034:	d80f      	bhi.n	4056 <Connect_receive_RemoteCapability+0x3a>
    4036:	e8df f003 	tbb	[pc, r3]
    403a:	090b      	.short	0x090b
    403c:	0507      	.short	0x0507
    403e:	03          	.byte	0x03
    403f:	00          	.byte	0x00
	{
	// Byte count always starts at 0xFFFF
	case 0xFFFF: // Device Id
		Connect_receive_RemoteCapabilityBuffer.id = byte;
    4040:	7068      	strb	r0, [r5, #1]
		break;
    4042:	e060      	b.n	4106 <Connect_receive_RemoteCapability+0xea>

	case 0xFFFE: // Capability Index
		Connect_receive_RemoteCapabilityBuffer.capabilityIndex = byte;
    4044:	70a8      	strb	r0, [r5, #2]
		break;
    4046:	e05e      	b.n	4106 <Connect_receive_RemoteCapability+0xea>

	case 0xFFFD: // State
		Connect_receive_RemoteCapabilityBuffer.state = byte;
    4048:	70e8      	strb	r0, [r5, #3]
		break;
    404a:	e05c      	b.n	4106 <Connect_receive_RemoteCapability+0xea>

	case 0xFFFC: // StateType
		Connect_receive_RemoteCapabilityBuffer.stateType = byte;
    404c:	7128      	strb	r0, [r5, #4]
		break;
    404e:	e05a      	b.n	4106 <Connect_receive_RemoteCapability+0xea>

	case 0xFFFB: // Number of args
		Connect_receive_RemoteCapabilityBuffer.numArgs = byte;
    4050:	7168      	strb	r0, [r5, #5]
		*pending_bytes = byte;
    4052:	8038      	strh	r0, [r7, #0]
		break;
    4054:	e057      	b.n	4106 <Connect_receive_RemoteCapability+0xea>

	default:     // Args (# defined by previous byte)
		Connect_receive_RemoteCapabilityArgs[
			Connect_receive_RemoteCapabilityBuffer.numArgs - *pending_bytes + 1
    4056:	796a      	ldrb	r2, [r5, #5]
    4058:	1a53      	subs	r3, r2, r1
		] = byte;
    405a:	4a2f      	ldr	r2, [pc, #188]	; (4118 <Connect_receive_RemoteCapability+0xfc>)
    405c:	4413      	add	r3, r2
    405e:	7058      	strb	r0, [r3, #1]

		// If entire packet has been fully received
		if ( *pending_bytes == 0 )
    4060:	883b      	ldrh	r3, [r7, #0]
    4062:	2b00      	cmp	r3, #0
    4064:	d14f      	bne.n	4106 <Connect_receive_RemoteCapability+0xea>
		{
			// Determine if this is the node to run the capability on
			// Conditions: Matches or broadcast (0xFF)
			if ( Connect_receive_RemoteCapabilityBuffer.id == 0xFF
    4066:	4b2b      	ldr	r3, [pc, #172]	; (4114 <Connect_receive_RemoteCapability+0xf8>)
    4068:	785b      	ldrb	r3, [r3, #1]
    406a:	2bff      	cmp	r3, #255	; 0xff
    406c:	d003      	beq.n	4076 <Connect_receive_RemoteCapability+0x5a>
				|| Connect_receive_RemoteCapabilityBuffer.id == Connect_id )
    406e:	4a2b      	ldr	r2, [pc, #172]	; (411c <Connect_receive_RemoteCapability+0x100>)
    4070:	7812      	ldrb	r2, [r2, #0]
    4072:	429a      	cmp	r2, r3
    4074:	d107      	bne.n	4086 <Connect_receive_RemoteCapability+0x6a>
			{
				extern const Capability CapabilitiesList[]; // See generatedKeymap.h
				void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(
					CapabilitiesList[ Connect_receive_RemoteCapabilityBuffer.capabilityIndex ].func
    4076:	78aa      	ldrb	r2, [r5, #2]
				);
				capability(
    4078:	4b29      	ldr	r3, [pc, #164]	; (4120 <Connect_receive_RemoteCapability+0x104>)
    407a:	78e8      	ldrb	r0, [r5, #3]
    407c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4080:	7929      	ldrb	r1, [r5, #4]
    4082:	4a28      	ldr	r2, [pc, #160]	; (4124 <Connect_receive_RemoteCapability+0x108>)
    4084:	4798      	blx	r3
				);
			}

			// If this is not the correct node, keep sending it in the same direction (doesn't matter if more nodes exist)
			// or if this is a broadcast
			if ( Connect_receive_RemoteCapabilityBuffer.id == 0xFF
    4086:	786b      	ldrb	r3, [r5, #1]
    4088:	2bff      	cmp	r3, #255	; 0xff
    408a:	d003      	beq.n	4094 <Connect_receive_RemoteCapability+0x78>
				|| Connect_receive_RemoteCapabilityBuffer.id != Connect_id )
    408c:	4a23      	ldr	r2, [pc, #140]	; (411c <Connect_receive_RemoteCapability+0x100>)
    408e:	7812      	ldrb	r2, [r2, #0]
    4090:	429a      	cmp	r2, r3
    4092:	d038      	beq.n	4106 <Connect_receive_RemoteCapability+0xea>
			{
				// Prepare outgoing packet
				Connect_receive_RemoteCapabilityBuffer.command = RemoteCapability;

				// Send to the other UART (not the one receiving the packet from
				uint8_t uart_direction = uart_num == UART_Master ? UART_Slave : UART_Master;
    4094:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
			// or if this is a broadcast
			if ( Connect_receive_RemoteCapabilityBuffer.id == 0xFF
				|| Connect_receive_RemoteCapabilityBuffer.id != Connect_id )
			{
				// Prepare outgoing packet
				Connect_receive_RemoteCapabilityBuffer.command = RemoteCapability;
    4098:	f04f 0306 	mov.w	r3, #6

				// Send to the other UART (not the one receiving the packet from
				uint8_t uart_direction = uart_num == UART_Master ? UART_Slave : UART_Master;
    409c:	bf18      	it	ne
    409e:	2601      	movne	r6, #1
			// or if this is a broadcast
			if ( Connect_receive_RemoteCapabilityBuffer.id == 0xFF
				|| Connect_receive_RemoteCapabilityBuffer.id != Connect_id )
			{
				// Prepare outgoing packet
				Connect_receive_RemoteCapabilityBuffer.command = RemoteCapability;
    40a0:	702b      	strb	r3, [r5, #0]
    40a2:	4c21      	ldr	r4, [pc, #132]	; (4128 <Connect_receive_RemoteCapability+0x10c>)

				// Send to the other UART (not the one receiving the packet from
				uint8_t uart_direction = uart_num == UART_Master ? UART_Slave : UART_Master;

				// Lock Tx UART
				switch ( uart_direction )
    40a4:	b156      	cbz	r6, 40bc <Connect_receive_RemoteCapability+0xa0>
				{
				case UART_Master: uart_lockTx( UART_Master ); break;
    40a6:	78e3      	ldrb	r3, [r4, #3]
    40a8:	2b00      	cmp	r3, #0
    40aa:	d1fd      	bne.n	40a8 <Connect_receive_RemoteCapability+0x8c>
    40ac:	2301      	movs	r3, #1
    40ae:	70e3      	strb	r3, [r4, #3]
    40b0:	78a3      	ldrb	r3, [r4, #2]
    40b2:	2b04      	cmp	r3, #4
    40b4:	d1fd      	bne.n	40b2 <Connect_receive_RemoteCapability+0x96>
    40b6:	2300      	movs	r3, #0
    40b8:	70a3      	strb	r3, [r4, #2]
    40ba:	e009      	b.n	40d0 <Connect_receive_RemoteCapability+0xb4>
				case UART_Slave:  uart_lockTx( UART_Slave );  break;
    40bc:	7863      	ldrb	r3, [r4, #1]
    40be:	2b00      	cmp	r3, #0
    40c0:	d1fd      	bne.n	40be <Connect_receive_RemoteCapability+0xa2>
    40c2:	2301      	movs	r3, #1
    40c4:	7063      	strb	r3, [r4, #1]
    40c6:	7823      	ldrb	r3, [r4, #0]
    40c8:	2b04      	cmp	r3, #4
    40ca:	d1fd      	bne.n	40c8 <Connect_receive_RemoteCapability+0xac>
    40cc:	2300      	movs	r3, #0
    40ce:	7023      	strb	r3, [r4, #0]
				}

				// Send header
				uint8_t header[] = { 0x16, 0x01 };
    40d0:	4b16      	ldr	r3, [pc, #88]	; (412c <Connect_receive_RemoteCapability+0x110>)
				Connect_addBytes( header, sizeof( header ), uart_direction );
    40d2:	a801      	add	r0, sp, #4
				case UART_Master: uart_lockTx( UART_Master ); break;
				case UART_Slave:  uart_lockTx( UART_Slave );  break;
				}

				// Send header
				uint8_t header[] = { 0x16, 0x01 };
    40d4:	881b      	ldrh	r3, [r3, #0]
    40d6:	f8ad 3004 	strh.w	r3, [sp, #4]
				Connect_addBytes( header, sizeof( header ), uart_direction );
    40da:	2102      	movs	r1, #2
    40dc:	4632      	mov	r2, r6
    40de:	f7ff ff8d 	bl	3ffc <Connect_addBytes>

				// Send Remote Capability and arguments
				Connect_addBytes( (uint8_t*)&Connect_receive_RemoteCapabilityBuffer, sizeof( RemoteCapabilityCommand ), uart_direction );
    40e2:	480c      	ldr	r0, [pc, #48]	; (4114 <Connect_receive_RemoteCapability+0xf8>)
    40e4:	2106      	movs	r1, #6
    40e6:	4632      	mov	r2, r6
    40e8:	f7ff ff88 	bl	3ffc <Connect_addBytes>
				Connect_addBytes( Connect_receive_RemoteCapabilityArgs, Connect_receive_RemoteCapabilityBuffer.numArgs, uart_direction );
    40ec:	4632      	mov	r2, r6
    40ee:	480a      	ldr	r0, [pc, #40]	; (4118 <Connect_receive_RemoteCapability+0xfc>)
    40f0:	7969      	ldrb	r1, [r5, #5]
    40f2:	f7ff ff83 	bl	3ffc <Connect_addBytes>
    40f6:	2300      	movs	r3, #0
    40f8:	2204      	movs	r2, #4

				// Unlock Tx UART
				switch ( uart_direction )
    40fa:	b116      	cbz	r6, 4102 <Connect_receive_RemoteCapability+0xe6>
				{
				case UART_Master: uart_unlockTx( UART_Master ); break;
    40fc:	70a2      	strb	r2, [r4, #2]
    40fe:	70e3      	strb	r3, [r4, #3]
    4100:	e001      	b.n	4106 <Connect_receive_RemoteCapability+0xea>
				case UART_Slave:  uart_unlockTx( UART_Slave );  break;
    4102:	7022      	strb	r2, [r4, #0]
    4104:	7063      	strb	r3, [r4, #1]
		}
		break;
	}

	// Check whether the scan codes have finished sending
	return *pending_bytes == 0 ? 1 : 0;
    4106:	8838      	ldrh	r0, [r7, #0]
}
    4108:	fab0 f080 	clz	r0, r0
    410c:	0940      	lsrs	r0, r0, #5
    410e:	b003      	add	sp, #12
    4110:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4112:	bf00      	nop
    4114:	1fff9ea0 	.word	0x1fff9ea0
    4118:	1fff9eaa 	.word	0x1fff9eaa
    411c:	1fff89c5 	.word	0x1fff89c5
    4120:	00009ef8 	.word	0x00009ef8
    4124:	1fff9eac 	.word	0x1fff9eac
    4128:	1fff9ea6 	.word	0x1fff9ea6
    412c:	00009068 	.word	0x00009068

00004130 <Connect_send_CableCheck>:

// -- Connect send functions --

// patternLen defines how many bytes should the incrementing pattern have
void Connect_send_CableCheck( uint8_t patternLen )
{
    4130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Master, UART_Slave );
    4132:	4c21      	ldr	r4, [pc, #132]	; (41b8 <Connect_send_CableCheck+0x88>)
    4134:	78e2      	ldrb	r2, [r4, #3]
    4136:	7863      	ldrb	r3, [r4, #1]

// -- Connect send functions --

// patternLen defines how many bytes should the incrementing pattern have
void Connect_send_CableCheck( uint8_t patternLen )
{
    4138:	4607      	mov	r7, r0
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Master, UART_Slave );
    413a:	2a00      	cmp	r2, #0
    413c:	d1fd      	bne.n	413a <Connect_send_CableCheck+0xa>
    413e:	2b00      	cmp	r3, #0
    4140:	d1fd      	bne.n	413e <Connect_send_CableCheck+0xe>
    4142:	2301      	movs	r3, #1
    4144:	70e3      	strb	r3, [r4, #3]
    4146:	7063      	strb	r3, [r4, #1]
    4148:	7826      	ldrb	r6, [r4, #0]
    414a:	78a3      	ldrb	r3, [r4, #2]
    414c:	2b04      	cmp	r3, #4
    414e:	d1fd      	bne.n	414c <Connect_send_CableCheck+0x1c>
    4150:	2e04      	cmp	r6, #4
    4152:	d1fd      	bne.n	4150 <Connect_send_CableCheck+0x20>
    4154:	2500      	movs	r5, #0

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, CableCheck, patternLen };
    4156:	2316      	movs	r3, #22
    4158:	2201      	movs	r2, #1
    415a:	a801      	add	r0, sp, #4
    415c:	4631      	mov	r1, r6
    415e:	f88d 3004 	strb.w	r3, [sp, #4]
    4162:	f88d 2005 	strb.w	r2, [sp, #5]

// patternLen defines how many bytes should the incrementing pattern have
void Connect_send_CableCheck( uint8_t patternLen )
{
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Master, UART_Slave );
    4166:	70a5      	strb	r5, [r4, #2]
    4168:	7025      	strb	r5, [r4, #0]

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, CableCheck, patternLen };
    416a:	f88d 5006 	strb.w	r5, [sp, #6]
    416e:	f88d 7007 	strb.w	r7, [sp, #7]
    4172:	f7ff fe27 	bl	3dc4 <Connect_addBytes.part.1>
    4176:	a801      	add	r0, sp, #4
    4178:	4631      	mov	r1, r6
    417a:	462a      	mov	r2, r5
    417c:	f7ff fe22 	bl	3dc4 <Connect_addBytes.part.1>
	// Send header
	Connect_addBytes( header, sizeof( header ), UART_Master );
	Connect_addBytes( header, sizeof( header ), UART_Slave );

	// Send 0xD2 (11010010) for each argument
	uint8_t value = 0xD2;
    4180:	23d2      	movs	r3, #210	; 0xd2
    4182:	f88d 3003 	strb.w	r3, [sp, #3]
	for ( uint8_t c = 0; c < patternLen; c++ )
    4186:	42bd      	cmp	r5, r7
    4188:	d00d      	beq.n	41a6 <Connect_send_CableCheck+0x76>
    418a:	2101      	movs	r1, #1
    418c:	460a      	mov	r2, r1
    418e:	f10d 0003 	add.w	r0, sp, #3
    4192:	f7ff fe17 	bl	3dc4 <Connect_addBytes.part.1>
    4196:	f10d 0003 	add.w	r0, sp, #3
    419a:	2101      	movs	r1, #1
    419c:	2200      	movs	r2, #0
    419e:	f7ff fe11 	bl	3dc4 <Connect_addBytes.part.1>
    41a2:	3501      	adds	r5, #1
    41a4:	e7ef      	b.n	4186 <Connect_send_CableCheck+0x56>
		Connect_addBytes( &value, 1, UART_Master );
		Connect_addBytes( &value, 1, UART_Slave );
	}

	// Release Tx buffers
	uart_unlockTx( UART_Master );
    41a6:	2204      	movs	r2, #4
    41a8:	2300      	movs	r3, #0
    41aa:	70a2      	strb	r2, [r4, #2]
    41ac:	70e3      	strb	r3, [r4, #3]
	uart_unlockTx( UART_Slave );
    41ae:	7022      	strb	r2, [r4, #0]
    41b0:	7063      	strb	r3, [r4, #1]
}
    41b2:	b003      	add	sp, #12
    41b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41b6:	bf00      	nop
    41b8:	1fff9ea6 	.word	0x1fff9ea6

000041bc <Connect_send_IdRequest>:

void Connect_send_IdRequest()
{
    41bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    41be:	4c0d      	ldr	r4, [pc, #52]	; (41f4 <Connect_send_IdRequest+0x38>)
    41c0:	78e3      	ldrb	r3, [r4, #3]
    41c2:	2b00      	cmp	r3, #0
    41c4:	d1fd      	bne.n	41c2 <Connect_send_IdRequest+0x6>
    41c6:	2301      	movs	r3, #1
    41c8:	78a6      	ldrb	r6, [r4, #2]
    41ca:	70e3      	strb	r3, [r4, #3]
    41cc:	2e04      	cmp	r6, #4
    41ce:	d1fd      	bne.n	41cc <Connect_send_IdRequest+0x10>

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdRequest };
    41d0:	4b09      	ldr	r3, [pc, #36]	; (41f8 <Connect_send_IdRequest+0x3c>)
    41d2:	881a      	ldrh	r2, [r3, #0]
    41d4:	f8ad 2004 	strh.w	r2, [sp, #4]
}

void Connect_send_IdRequest()
{
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    41d8:	2500      	movs	r5, #0

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdRequest };
    41da:	789b      	ldrb	r3, [r3, #2]
}

void Connect_send_IdRequest()
{
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    41dc:	70a5      	strb	r5, [r4, #2]
    41de:	a801      	add	r0, sp, #4
    41e0:	2103      	movs	r1, #3
    41e2:	2201      	movs	r2, #1

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdRequest };
    41e4:	f88d 3006 	strb.w	r3, [sp, #6]
    41e8:	f7ff fdec 	bl	3dc4 <Connect_addBytes.part.1>

	// Send header
	Connect_addBytes( header, sizeof( header ), UART_Master );

	// Unlock Tx
	uart_unlockTx( UART_Master );
    41ec:	70a6      	strb	r6, [r4, #2]
    41ee:	70e5      	strb	r5, [r4, #3]
}
    41f0:	b002      	add	sp, #8
    41f2:	bd70      	pop	{r4, r5, r6, pc}
    41f4:	1fff9ea6 	.word	0x1fff9ea6
    41f8:	0000906a 	.word	0x0000906a

000041fc <Connect_send_IdEnumeration>:

// id is the value the next slave should enumerate as
void Connect_send_IdEnumeration( uint8_t id )
{
    41fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// Lock slave bound Tx
	uart_lockTx( UART_Slave );
    41fe:	4c0f      	ldr	r4, [pc, #60]	; (423c <Connect_send_IdEnumeration+0x40>)
    4200:	7863      	ldrb	r3, [r4, #1]
    4202:	2b00      	cmp	r3, #0
    4204:	d1fd      	bne.n	4202 <Connect_send_IdEnumeration+0x6>
    4206:	2301      	movs	r3, #1
    4208:	7826      	ldrb	r6, [r4, #0]
    420a:	7063      	strb	r3, [r4, #1]
    420c:	2e04      	cmp	r6, #4
    420e:	d1fd      	bne.n	420c <Connect_send_IdEnumeration+0x10>

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdEnumeration, id };
    4210:	2316      	movs	r3, #22

// id is the value the next slave should enumerate as
void Connect_send_IdEnumeration( uint8_t id )
{
	// Lock slave bound Tx
	uart_lockTx( UART_Slave );
    4212:	2500      	movs	r5, #0

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdEnumeration, id };
    4214:	f88d 3004 	strb.w	r3, [sp, #4]
    4218:	2301      	movs	r3, #1
    421a:	f88d 3005 	strb.w	r3, [sp, #5]
    421e:	f88d 0007 	strb.w	r0, [sp, #7]
    4222:	2302      	movs	r3, #2
    4224:	a801      	add	r0, sp, #4
    4226:	4631      	mov	r1, r6
    4228:	462a      	mov	r2, r5

// id is the value the next slave should enumerate as
void Connect_send_IdEnumeration( uint8_t id )
{
	// Lock slave bound Tx
	uart_lockTx( UART_Slave );
    422a:	7025      	strb	r5, [r4, #0]

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdEnumeration, id };
    422c:	f88d 3006 	strb.w	r3, [sp, #6]
    4230:	f7ff fdc8 	bl	3dc4 <Connect_addBytes.part.1>

	// Send header
	Connect_addBytes( header, sizeof( header ), UART_Slave );

	// Unlock Tx
	uart_unlockTx( UART_Slave );
    4234:	7026      	strb	r6, [r4, #0]
    4236:	7065      	strb	r5, [r4, #1]
}
    4238:	b002      	add	sp, #8
    423a:	bd70      	pop	{r4, r5, r6, pc}
    423c:	1fff9ea6 	.word	0x1fff9ea6

00004240 <Connect_receive_IdRequest>:
	// Check whether the cable check has finished
	return *pending_bytes == 0 ? 1 : 0;
}

uint8_t Connect_receive_IdRequest( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    4240:	b510      	push	{r4, lr}
	dbug_print("IdRequest");
    4242:	480a      	ldr	r0, [pc, #40]	; (426c <Connect_receive_IdRequest+0x2c>)
	// Check whether the cable check has finished
	return *pending_bytes == 0 ? 1 : 0;
}

uint8_t Connect_receive_IdRequest( uint8_t byte, uint16_t *pending_bytes, uint8_t uart_num )
{
    4244:	4614      	mov	r4, r2
	dbug_print("IdRequest");
    4246:	f003 fcaf 	bl	7ba8 <_print>
	// Check the directionality
	if ( uart_num == UART_Master )
    424a:	2c01      	cmp	r4, #1
    424c:	d102      	bne.n	4254 <Connect_receive_IdRequest+0x14>
	{
		erro_print("Invalid IdRequest direction...");
    424e:	4808      	ldr	r0, [pc, #32]	; (4270 <Connect_receive_IdRequest+0x30>)
    4250:	f003 fcaa 	bl	7ba8 <_print>
	}

	// Check if master, begin IdEnumeration
	if ( Connect_master )
    4254:	4b07      	ldr	r3, [pc, #28]	; (4274 <Connect_receive_IdRequest+0x34>)
    4256:	781b      	ldrb	r3, [r3, #0]
    4258:	b11b      	cbz	r3, 4262 <Connect_receive_IdRequest+0x22>
	{
		// The first device is always id 1
		// Id 0 is reserved for the master
		Connect_send_IdEnumeration( 1 );
    425a:	2001      	movs	r0, #1
    425c:	f7ff ffce 	bl	41fc <Connect_send_IdEnumeration>
    4260:	e001      	b.n	4266 <Connect_receive_IdRequest+0x26>
	}
	// Propagate IdRequest
	else
	{
		Connect_send_IdRequest();
    4262:	f7ff ffab 	bl	41bc <Connect_send_IdRequest>
	}

	return 1;
}
    4266:	2001      	movs	r0, #1
    4268:	bd10      	pop	{r4, pc}
    426a:	bf00      	nop
    426c:	0000944c 	.word	0x0000944c
    4270:	0000946b 	.word	0x0000946b
    4274:	1fff91ba 	.word	0x1fff91ba

00004278 <Connect_send_IdReport>:
	uart_unlockTx( UART_Slave );
}

// id is the currently assigned id to the slave
void Connect_send_IdReport( uint8_t id )
{
    4278:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    427a:	4c0f      	ldr	r4, [pc, #60]	; (42b8 <Connect_send_IdReport+0x40>)
    427c:	78e3      	ldrb	r3, [r4, #3]
    427e:	2b00      	cmp	r3, #0
    4280:	d1fd      	bne.n	427e <Connect_send_IdReport+0x6>
    4282:	2301      	movs	r3, #1
    4284:	78a5      	ldrb	r5, [r4, #2]
    4286:	70e3      	strb	r3, [r4, #3]
    4288:	2d04      	cmp	r5, #4
    428a:	d1fd      	bne.n	4288 <Connect_send_IdReport+0x10>

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdReport, id };
    428c:	2316      	movs	r3, #22

// id is the currently assigned id to the slave
void Connect_send_IdReport( uint8_t id )
{
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    428e:	2600      	movs	r6, #0

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdReport, id };
    4290:	f88d 3004 	strb.w	r3, [sp, #4]
    4294:	2201      	movs	r2, #1
    4296:	2303      	movs	r3, #3
    4298:	f88d 0007 	strb.w	r0, [sp, #7]
    429c:	4629      	mov	r1, r5
    429e:	a801      	add	r0, sp, #4

// id is the currently assigned id to the slave
void Connect_send_IdReport( uint8_t id )
{
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    42a0:	70a6      	strb	r6, [r4, #2]

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, IdReport, id };
    42a2:	f88d 2005 	strb.w	r2, [sp, #5]
    42a6:	f88d 3006 	strb.w	r3, [sp, #6]
    42aa:	f7ff fd8b 	bl	3dc4 <Connect_addBytes.part.1>

	// Send header
	Connect_addBytes( header, sizeof( header ), UART_Master );

	// Unlock Tx
	uart_unlockTx( UART_Master );
    42ae:	70a5      	strb	r5, [r4, #2]
    42b0:	70e6      	strb	r6, [r4, #3]
}
    42b2:	b002      	add	sp, #8
    42b4:	bd70      	pop	{r4, r5, r6, pc}
    42b6:	bf00      	nop
    42b8:	1fff9ea6 	.word	0x1fff9ea6

000042bc <Connect_receive_IdEnumeration>:

	return 1;
}

uint8_t Connect_receive_IdEnumeration( uint8_t id, uint16_t *pending_bytes, uint8_t uart_num )
{
    42bc:	b538      	push	{r3, r4, r5, lr}
    42be:	4604      	mov	r4, r0
    42c0:	4615      	mov	r5, r2
	dbug_print("IdEnumeration");
    42c2:	480d      	ldr	r0, [pc, #52]	; (42f8 <Connect_receive_IdEnumeration+0x3c>)
    42c4:	f003 fc70 	bl	7ba8 <_print>
	// Check the directionality
	if ( uart_num == UART_Slave )
    42c8:	b915      	cbnz	r5, 42d0 <Connect_receive_IdEnumeration+0x14>
	{
		erro_print("Invalid IdEnumeration direction...");
    42ca:	480c      	ldr	r0, [pc, #48]	; (42fc <Connect_receive_IdEnumeration+0x40>)
    42cc:	f003 fc6c 	bl	7ba8 <_print>
	}

	// Set the device id
	Connect_id = id;
    42d0:	4d0b      	ldr	r5, [pc, #44]	; (4300 <Connect_receive_IdEnumeration+0x44>)

	// Send reponse back to master
	Connect_send_IdReport( id );
    42d2:	4620      	mov	r0, r4
	{
		erro_print("Invalid IdEnumeration direction...");
	}

	// Set the device id
	Connect_id = id;
    42d4:	702c      	strb	r4, [r5, #0]

	// Send reponse back to master
	Connect_send_IdReport( id );
    42d6:	f7ff ffcf 	bl	4278 <Connect_send_IdReport>

	// Node now enumerated, set external power to USB Max
	// Only set if this is not the master node
	// TODO Determine power slice for each node as part of protocol
	if ( Connect_id != 0 )
    42da:	782b      	ldrb	r3, [r5, #0]
    42dc:	b11b      	cbz	r3, 42e6 <Connect_receive_IdEnumeration+0x2a>
	{
		Output_update_external_current( 500 );
    42de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    42e2:	f002 f833 	bl	634c <Output_update_external_current>
	}

	// Propogate next Id if the connection is ok
	if ( Connect_cableOkSlave )
    42e6:	4b07      	ldr	r3, [pc, #28]	; (4304 <Connect_receive_IdEnumeration+0x48>)
    42e8:	781b      	ldrb	r3, [r3, #0]
    42ea:	b11b      	cbz	r3, 42f4 <Connect_receive_IdEnumeration+0x38>
	{
		Connect_send_IdEnumeration( id + 1 );
    42ec:	1c60      	adds	r0, r4, #1
    42ee:	b2c0      	uxtb	r0, r0
    42f0:	f7ff ff84 	bl	41fc <Connect_send_IdEnumeration>
	}

	return 1;
}
    42f4:	2001      	movs	r0, #1
    42f6:	bd38      	pop	{r3, r4, r5, pc}
    42f8:	000094a1 	.word	0x000094a1
    42fc:	000094c4 	.word	0x000094c4
    4300:	1fff89c5 	.word	0x1fff89c5
    4304:	1fff91b8 	.word	0x1fff91b8

00004308 <Connect_receive_IdReport>:

uint8_t Connect_receive_IdReport( uint8_t id, uint16_t *pending_bytes, uint8_t uart_num )
{
    4308:	b538      	push	{r3, r4, r5, lr}
    430a:	4615      	mov	r5, r2
    430c:	4604      	mov	r4, r0
	dbug_print("IdReport");
    430e:	4810      	ldr	r0, [pc, #64]	; (4350 <Connect_receive_IdReport+0x48>)
    4310:	f003 fc4a 	bl	7ba8 <_print>
	// Check the directionality
	if ( uart_num == UART_Master )
    4314:	2d01      	cmp	r5, #1
    4316:	d102      	bne.n	431e <Connect_receive_IdReport+0x16>
	{
		erro_print("Invalid IdRequest direction...");
    4318:	480e      	ldr	r0, [pc, #56]	; (4354 <Connect_receive_IdReport+0x4c>)
    431a:	f003 fc45 	bl	7ba8 <_print>
	}

	// Track Id response if master
	if ( Connect_master )
    431e:	4b0e      	ldr	r3, [pc, #56]	; (4358 <Connect_receive_IdReport+0x50>)
    4320:	781b      	ldrb	r3, [r3, #0]
    4322:	b17b      	cbz	r3, 4344 <Connect_receive_IdReport+0x3c>
	{
		info_msg("Id Reported: ");
    4324:	480d      	ldr	r0, [pc, #52]	; (435c <Connect_receive_IdReport+0x54>)
    4326:	f003 fc3f 	bl	7ba8 <_print>
		printHex( id );
    432a:	4620      	mov	r0, r4
    432c:	2101      	movs	r1, #1
    432e:	f003 fcdd 	bl	7cec <printHex_op>
		print( NL );
    4332:	480b      	ldr	r0, [pc, #44]	; (4360 <Connect_receive_IdReport+0x58>)
    4334:	f003 fc38 	bl	7ba8 <_print>

		// Check if this is the highest ID
		if ( id > Connect_maxId )
    4338:	4b0a      	ldr	r3, [pc, #40]	; (4364 <Connect_receive_IdReport+0x5c>)
    433a:	781a      	ldrb	r2, [r3, #0]
    433c:	42a2      	cmp	r2, r4
    433e:	d204      	bcs.n	434a <Connect_receive_IdReport+0x42>
			Connect_maxId = id;
    4340:	701c      	strb	r4, [r3, #0]
    4342:	e002      	b.n	434a <Connect_receive_IdReport+0x42>
		return 1;
	}
	// Propagate id if yet another slave
	else
	{
		Connect_send_IdReport( id );
    4344:	4620      	mov	r0, r4
    4346:	f7ff ff97 	bl	4278 <Connect_send_IdReport>
	}

	return 1;
}
    434a:	2001      	movs	r0, #1
    434c:	bd38      	pop	{r3, r4, r5, pc}
    434e:	bf00      	nop
    4350:	000094fe 	.word	0x000094fe
    4354:	0000946b 	.word	0x0000946b
    4358:	1fff91ba 	.word	0x1fff91ba
    435c:	0000951c 	.word	0x0000951c
    4360:	0000bc21 	.word	0x0000bc21
    4364:	1fff91b0 	.word	0x1fff91b0

00004368 <Connect_send_ScanCode>:

// id is the currently assigned id to the slave
// scanCodeStateList is an array of [scancode, state]'s (8 bit values)
// numScanCodes is the number of scan codes to parse from array
void Connect_send_ScanCode( uint8_t id, TriggerGuide *scanCodeStateList, uint8_t numScanCodes )
{
    4368:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    436c:	4c14      	ldr	r4, [pc, #80]	; (43c0 <Connect_send_ScanCode+0x58>)
    436e:	78e3      	ldrb	r3, [r4, #3]

// id is the currently assigned id to the slave
// scanCodeStateList is an array of [scancode, state]'s (8 bit values)
// numScanCodes is the number of scan codes to parse from array
void Connect_send_ScanCode( uint8_t id, TriggerGuide *scanCodeStateList, uint8_t numScanCodes )
{
    4370:	4689      	mov	r9, r1
    4372:	4690      	mov	r8, r2
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    4374:	2b00      	cmp	r3, #0
    4376:	d1fd      	bne.n	4374 <Connect_send_ScanCode+0xc>
    4378:	2301      	movs	r3, #1
    437a:	78a5      	ldrb	r5, [r4, #2]
    437c:	70e3      	strb	r3, [r4, #3]
    437e:	2d04      	cmp	r5, #4
    4380:	d1fd      	bne.n	437e <Connect_send_ScanCode+0x16>

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, ScanCode, id, numScanCodes };
    4382:	2601      	movs	r6, #1
    4384:	2316      	movs	r3, #22
// scanCodeStateList is an array of [scancode, state]'s (8 bit values)
// numScanCodes is the number of scan codes to parse from array
void Connect_send_ScanCode( uint8_t id, TriggerGuide *scanCodeStateList, uint8_t numScanCodes )
{
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    4386:	2700      	movs	r7, #0

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, ScanCode, id, numScanCodes };
    4388:	f88d 0003 	strb.w	r0, [sp, #3]
    438c:	4632      	mov	r2, r6
    438e:	4668      	mov	r0, sp
    4390:	2105      	movs	r1, #5
    4392:	f88d 3000 	strb.w	r3, [sp]
// scanCodeStateList is an array of [scancode, state]'s (8 bit values)
// numScanCodes is the number of scan codes to parse from array
void Connect_send_ScanCode( uint8_t id, TriggerGuide *scanCodeStateList, uint8_t numScanCodes )
{
	// Lock master bound Tx
	uart_lockTx( UART_Master );
    4396:	70a7      	strb	r7, [r4, #2]

	// Prepare header
	uint8_t header[] = { 0x16, 0x01, ScanCode, id, numScanCodes };
    4398:	f88d 6001 	strb.w	r6, [sp, #1]
    439c:	f88d 5002 	strb.w	r5, [sp, #2]
    43a0:	f88d 8004 	strb.w	r8, [sp, #4]
    43a4:	f7ff fd0e 	bl	3dc4 <Connect_addBytes.part.1>

	// Send header
	Connect_addBytes( header, sizeof( header ), UART_Master );

	// Send each of the scan codes
	Connect_addBytes( (uint8_t*)scanCodeStateList, numScanCodes * TriggerGuideSize, UART_Master );
    43a8:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    43ac:	4648      	mov	r0, r9
    43ae:	b2c9      	uxtb	r1, r1
    43b0:	4632      	mov	r2, r6
    43b2:	f7ff fe23 	bl	3ffc <Connect_addBytes>

	// Unlock Tx
	uart_unlockTx( UART_Master );
    43b6:	70a5      	strb	r5, [r4, #2]
    43b8:	70e7      	strb	r7, [r4, #3]
}
    43ba:	b003      	add	sp, #12
    43bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    43c0:	1fff9ea6 	.word	0x1fff9ea6

000043c4 <cliFunc_connectCmd>:


// ----- CLI Command Functions -----

void cliFunc_connectCmd( char* args )
{
    43c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    43c6:	4669      	mov	r1, sp
    43c8:	aa01      	add	r2, sp, #4
    43ca:	f003 f925 	bl	7618 <CLI_argumentIsolation>

	print( NL );
    43ce:	4815      	ldr	r0, [pc, #84]	; (4424 <cliFunc_connectCmd+0x60>)
    43d0:	f003 fbea 	bl	7ba8 <_print>

	switch ( numToInt( &arg1Ptr[0] ) )
    43d4:	9800      	ldr	r0, [sp, #0]
    43d6:	f003 fce1 	bl	7d9c <numToInt>
    43da:	2804      	cmp	r0, #4
    43dc:	d81e      	bhi.n	441c <cliFunc_connectCmd+0x58>
    43de:	e8df f000 	tbb	[pc, r0]
    43e2:	0703      	.short	0x0703
    43e4:	0e0a      	.short	0x0e0a
    43e6:	12          	.byte	0x12
    43e7:	00          	.byte	0x00
	{
	case CableCheck:
		Connect_send_CableCheck( UARTConnectCableCheckLength_define );
    43e8:	2002      	movs	r0, #2
    43ea:	f7ff fea1 	bl	4130 <Connect_send_CableCheck>
		break;
    43ee:	e015      	b.n	441c <cliFunc_connectCmd+0x58>

	case IdRequest:
		Connect_send_IdRequest();
    43f0:	f7ff fee4 	bl	41bc <Connect_send_IdRequest>
		break;
    43f4:	e012      	b.n	441c <cliFunc_connectCmd+0x58>

	case IdEnumeration:
		Connect_send_IdEnumeration( 5 );
    43f6:	2005      	movs	r0, #5
    43f8:	f7ff ff00 	bl	41fc <Connect_send_IdEnumeration>
		break;
    43fc:	e00e      	b.n	441c <cliFunc_connectCmd+0x58>

	case IdReport:
		Connect_send_IdReport( 8 );
    43fe:	2008      	movs	r0, #8
    4400:	f7ff ff3a 	bl	4278 <Connect_send_IdReport>
		break;
    4404:	e00a      	b.n	441c <cliFunc_connectCmd+0x58>

	case ScanCode:
	{
		TriggerGuide scanCodes[] = { { 0x00, 0x01, 0x05 }, { 0x00, 0x03, 0x16 } };
    4406:	4b08      	ldr	r3, [pc, #32]	; (4428 <cliFunc_connectCmd+0x64>)
    4408:	6818      	ldr	r0, [r3, #0]
    440a:	9002      	str	r0, [sp, #8]
    440c:	889b      	ldrh	r3, [r3, #4]
    440e:	f8ad 300c 	strh.w	r3, [sp, #12]
		Connect_send_ScanCode( 10, scanCodes, 2 );
    4412:	200a      	movs	r0, #10
    4414:	a902      	add	r1, sp, #8
    4416:	2202      	movs	r2, #2
    4418:	f7ff ffa6 	bl	4368 <Connect_send_ScanCode>
		break;

	default:
		break;
	}
}
    441c:	b005      	add	sp, #20
    441e:	f85d fb04 	ldr.w	pc, [sp], #4
    4422:	bf00      	nop
    4424:	0000bc21 	.word	0x0000bc21
    4428:	0000906d 	.word	0x0000906d

0000442c <Connect_send_RemoteCapability>:

// Send a remote capability command using capability index
// This may not be what's expected (especially if the firmware is not the same on each node)
// To broadcast to all slave nodes, set id to 255 instead of a specific id
void Connect_send_RemoteCapability( uint8_t id, uint8_t capabilityIndex, uint8_t state, uint8_t stateType, uint8_t numArgs, uint8_t *args )
{
    442c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	// Prepare header
	uint8_t header[] = { 0x16, 0x01, RemoteCapability, id, capabilityIndex, state, stateType, numArgs };
    4430:	f88d 3006 	strb.w	r3, [sp, #6]

	// Ignore current id
	if ( id == Connect_id )
    4434:	4b2b      	ldr	r3, [pc, #172]	; (44e4 <Connect_send_RemoteCapability+0xb8>)
// This may not be what's expected (especially if the firmware is not the same on each node)
// To broadcast to all slave nodes, set id to 255 instead of a specific id
void Connect_send_RemoteCapability( uint8_t id, uint8_t capabilityIndex, uint8_t state, uint8_t stateType, uint8_t numArgs, uint8_t *args )
{
	// Prepare header
	uint8_t header[] = { 0x16, 0x01, RemoteCapability, id, capabilityIndex, state, stateType, numArgs };
    4436:	f88d 2005 	strb.w	r2, [sp, #5]

// Send a remote capability command using capability index
// This may not be what's expected (especially if the firmware is not the same on each node)
// To broadcast to all slave nodes, set id to 255 instead of a specific id
void Connect_send_RemoteCapability( uint8_t id, uint8_t capabilityIndex, uint8_t state, uint8_t stateType, uint8_t numArgs, uint8_t *args )
{
    443a:	4605      	mov	r5, r0
	// Prepare header
	uint8_t header[] = { 0x16, 0x01, RemoteCapability, id, capabilityIndex, state, stateType, numArgs };

	// Ignore current id
	if ( id == Connect_id )
    443c:	781a      	ldrb	r2, [r3, #0]

// Send a remote capability command using capability index
// This may not be what's expected (especially if the firmware is not the same on each node)
// To broadcast to all slave nodes, set id to 255 instead of a specific id
void Connect_send_RemoteCapability( uint8_t id, uint8_t capabilityIndex, uint8_t state, uint8_t stateType, uint8_t numArgs, uint8_t *args )
{
    443e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
	// Prepare header
	uint8_t header[] = { 0x16, 0x01, RemoteCapability, id, capabilityIndex, state, stateType, numArgs };
    4442:	f88d 5003 	strb.w	r5, [sp, #3]
    4446:	2016      	movs	r0, #22
    4448:	f88d 0000 	strb.w	r0, [sp]
    444c:	2001      	movs	r0, #1
    444e:	f88d 0001 	strb.w	r0, [sp, #1]

	// Ignore current id
	if ( id == Connect_id )
    4452:	4295      	cmp	r5, r2
// This may not be what's expected (especially if the firmware is not the same on each node)
// To broadcast to all slave nodes, set id to 255 instead of a specific id
void Connect_send_RemoteCapability( uint8_t id, uint8_t capabilityIndex, uint8_t state, uint8_t stateType, uint8_t numArgs, uint8_t *args )
{
	// Prepare header
	uint8_t header[] = { 0x16, 0x01, RemoteCapability, id, capabilityIndex, state, stateType, numArgs };
    4454:	f04f 0006 	mov.w	r0, #6
    4458:	f88d 0002 	strb.w	r0, [sp, #2]
    445c:	f88d 1004 	strb.w	r1, [sp, #4]
    4460:	f88d 7007 	strb.w	r7, [sp, #7]
    4464:	461e      	mov	r6, r3

	// Ignore current id
	if ( id == Connect_id )
    4466:	d039      	beq.n	44dc <Connect_send_RemoteCapability+0xb0>
		return;

	// Send towards slave node
	if ( id > Connect_id )
    4468:	d91c      	bls.n	44a4 <Connect_send_RemoteCapability+0x78>
	{
		// Lock slave bound Tx
		uart_lockTx( UART_Slave );
    446a:	4c1f      	ldr	r4, [pc, #124]	; (44e8 <Connect_send_RemoteCapability+0xbc>)
    446c:	7863      	ldrb	r3, [r4, #1]
    446e:	2b00      	cmp	r3, #0
    4470:	d1fd      	bne.n	446e <Connect_send_RemoteCapability+0x42>
    4472:	2301      	movs	r3, #1
    4474:	f894 9000 	ldrb.w	r9, [r4]
    4478:	7063      	strb	r3, [r4, #1]
    447a:	f1b9 0f04 	cmp.w	r9, #4
    447e:	d1fc      	bne.n	447a <Connect_send_RemoteCapability+0x4e>
    4480:	f04f 0800 	mov.w	r8, #0
    4484:	4668      	mov	r0, sp
    4486:	2108      	movs	r1, #8
    4488:	4642      	mov	r2, r8
    448a:	f884 8000 	strb.w	r8, [r4]
    448e:	f7ff fc99 	bl	3dc4 <Connect_addBytes.part.1>

		// Send header
		Connect_addBytes( header, sizeof( header ), UART_Slave );

		// Send arguments
		Connect_addBytes( args, numArgs, UART_Slave );
    4492:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4494:	4639      	mov	r1, r7
    4496:	4642      	mov	r2, r8
    4498:	f7ff fdb0 	bl	3ffc <Connect_addBytes>

		// Unlock Tx
		uart_unlockTx( UART_Slave );
    449c:	f884 9000 	strb.w	r9, [r4]
    44a0:	f884 8001 	strb.w	r8, [r4, #1]
	}

	// Send towards master node
	if ( id < Connect_id || id == 255 )
    44a4:	7833      	ldrb	r3, [r6, #0]
    44a6:	42ab      	cmp	r3, r5
    44a8:	d801      	bhi.n	44ae <Connect_send_RemoteCapability+0x82>
    44aa:	2dff      	cmp	r5, #255	; 0xff
    44ac:	d116      	bne.n	44dc <Connect_send_RemoteCapability+0xb0>
	{
		// Lock slave bound Tx
		uart_lockTx( UART_Master );
    44ae:	4c0e      	ldr	r4, [pc, #56]	; (44e8 <Connect_send_RemoteCapability+0xbc>)
    44b0:	78e3      	ldrb	r3, [r4, #3]
    44b2:	2b00      	cmp	r3, #0
    44b4:	d1fd      	bne.n	44b2 <Connect_send_RemoteCapability+0x86>
    44b6:	2301      	movs	r3, #1
    44b8:	78a6      	ldrb	r6, [r4, #2]
    44ba:	70e3      	strb	r3, [r4, #3]
    44bc:	2e04      	cmp	r6, #4
    44be:	d1fd      	bne.n	44bc <Connect_send_RemoteCapability+0x90>
    44c0:	2500      	movs	r5, #0
    44c2:	4668      	mov	r0, sp
    44c4:	2108      	movs	r1, #8
    44c6:	2201      	movs	r2, #1
    44c8:	70a5      	strb	r5, [r4, #2]
    44ca:	f7ff fc7b 	bl	3dc4 <Connect_addBytes.part.1>

		// Send header
		Connect_addBytes( header, sizeof( header ), UART_Master );

		// Send arguments
		Connect_addBytes( args, numArgs, UART_Master );
    44ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
    44d0:	4639      	mov	r1, r7
    44d2:	2201      	movs	r2, #1
    44d4:	f7ff fd92 	bl	3ffc <Connect_addBytes>

		// Unlock Tx
		uart_unlockTx( UART_Master );
    44d8:	70a6      	strb	r6, [r4, #2]
    44da:	70e5      	strb	r5, [r4, #3]
	}
}
    44dc:	b003      	add	sp, #12
    44de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    44e2:	bf00      	nop
    44e4:	1fff89c5 	.word	0x1fff89c5
    44e8:	1fff9ea6 	.word	0x1fff9ea6

000044ec <Connect_send_Idle>:

void Connect_send_Idle( uint8_t num )
{
    44ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Slave, UART_Master );
    44ee:	4c17      	ldr	r4, [pc, #92]	; (454c <Connect_send_Idle+0x60>)
    44f0:	7862      	ldrb	r2, [r4, #1]
    44f2:	78e3      	ldrb	r3, [r4, #3]
		uart_unlockTx( UART_Master );
	}
}

void Connect_send_Idle( uint8_t num )
{
    44f4:	4606      	mov	r6, r0
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Slave, UART_Master );
    44f6:	2a00      	cmp	r2, #0
    44f8:	d1fd      	bne.n	44f6 <Connect_send_Idle+0xa>
    44fa:	2b00      	cmp	r3, #0
    44fc:	d1fd      	bne.n	44fa <Connect_send_Idle+0xe>
    44fe:	2301      	movs	r3, #1
    4500:	7063      	strb	r3, [r4, #1]
    4502:	70e3      	strb	r3, [r4, #3]
    4504:	7822      	ldrb	r2, [r4, #0]
    4506:	78a3      	ldrb	r3, [r4, #2]
    4508:	2a04      	cmp	r2, #4
    450a:	d1fd      	bne.n	4508 <Connect_send_Idle+0x1c>
    450c:	2b04      	cmp	r3, #4
    450e:	d1fd      	bne.n	450c <Connect_send_Idle+0x20>
    4510:	2500      	movs	r5, #0

	// Send n number of idles to reset link status (if in a bad state)
	uint8_t value = 0x16;
    4512:	2316      	movs	r3, #22
}

void Connect_send_Idle( uint8_t num )
{
	// Wait until the Tx buffers are ready, then lock them
	uart_lockBothTx( UART_Slave, UART_Master );
    4514:	7025      	strb	r5, [r4, #0]
    4516:	70a5      	strb	r5, [r4, #2]

	// Send n number of idles to reset link status (if in a bad state)
	uint8_t value = 0x16;
    4518:	f88d 3007 	strb.w	r3, [sp, #7]
	for ( uint8_t c = 0; c < num; c++ )
    451c:	42b5      	cmp	r5, r6
    451e:	d00d      	beq.n	453c <Connect_send_Idle+0x50>
    4520:	2101      	movs	r1, #1
    4522:	460a      	mov	r2, r1
    4524:	f10d 0007 	add.w	r0, sp, #7
    4528:	f7ff fc4c 	bl	3dc4 <Connect_addBytes.part.1>
    452c:	f10d 0007 	add.w	r0, sp, #7
    4530:	2101      	movs	r1, #1
    4532:	2200      	movs	r2, #0
    4534:	f7ff fc46 	bl	3dc4 <Connect_addBytes.part.1>
    4538:	3501      	adds	r5, #1
    453a:	e7ef      	b.n	451c <Connect_send_Idle+0x30>
		Connect_addBytes( &value, 1, UART_Master );
		Connect_addBytes( &value, 1, UART_Slave );
	}

	// Release Tx buffers
	uart_unlockTx( UART_Master );
    453c:	2204      	movs	r2, #4
    453e:	2300      	movs	r3, #0
    4540:	70a2      	strb	r2, [r4, #2]
    4542:	70e3      	strb	r3, [r4, #3]
	uart_unlockTx( UART_Slave );
    4544:	7022      	strb	r2, [r4, #0]
    4546:	7063      	strb	r3, [r4, #1]
}
    4548:	b002      	add	sp, #8
    454a:	bd70      	pop	{r4, r5, r6, pc}
    454c:	1fff9ea6 	.word	0x1fff9ea6

00004550 <cliFunc_connectIdl>:
	info_msg("Connect Debug Mode Toggle");
	Connect_debug = !Connect_debug;
}

void cliFunc_connectIdl( char* args )
{
    4550:	b507      	push	{r0, r1, r2, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    4552:	4669      	mov	r1, sp
    4554:	aa01      	add	r2, sp, #4
    4556:	f003 f85f 	bl	7618 <CLI_argumentIsolation>

	print( NL );
    455a:	4809      	ldr	r0, [pc, #36]	; (4580 <cliFunc_connectIdl+0x30>)
    455c:	f003 fb24 	bl	7ba8 <_print>
	info_msg("Sending Sync Idles...");
    4560:	4808      	ldr	r0, [pc, #32]	; (4584 <cliFunc_connectIdl+0x34>)
    4562:	f003 fb21 	bl	7ba8 <_print>

	uint8_t count = numToInt( &arg1Ptr[0] );
    4566:	9800      	ldr	r0, [sp, #0]
    4568:	f003 fc18 	bl	7d9c <numToInt>
    456c:	b2c0      	uxtb	r0, r0
	// Default to 2 idles
	if ( count == 0 )
    456e:	2800      	cmp	r0, #0
		count = 2;

	Connect_send_Idle( count );
    4570:	bf08      	it	eq
    4572:	2002      	moveq	r0, #2
    4574:	f7ff ffba 	bl	44ec <Connect_send_Idle>
}
    4578:	b003      	add	sp, #12
    457a:	f85d fb04 	ldr.w	pc, [sp], #4
    457e:	bf00      	nop
    4580:	0000bc21 	.word	0x0000bc21
    4584:	0000953c 	.word	0x0000953c

00004588 <Connect_reset>:

// ----- Functions -----

// Resets the state of the UART buffers and state variables
void Connect_reset()
{
    4588:	b510      	push	{r4, lr}
	// Reset Rx
	memset( (void*)uart_rx_status, 0, sizeof( UARTStatusRx ) * UART_Num_Interfaces );
    458a:	2100      	movs	r1, #0

	// Reset Tx
	memset( (void*)uart_tx_buf,    0, sizeof( UARTRingBuf )  * UART_Num_Interfaces );
	memset( (void*)uart_tx_status, 0, sizeof( UARTStatusTx ) * UART_Num_Interfaces );
    458c:	4c0c      	ldr	r4, [pc, #48]	; (45c0 <Connect_reset+0x38>)

// Resets the state of the UART buffers and state variables
void Connect_reset()
{
	// Reset Rx
	memset( (void*)uart_rx_status, 0, sizeof( UARTStatusRx ) * UART_Num_Interfaces );
    458e:	480d      	ldr	r0, [pc, #52]	; (45c4 <Connect_reset+0x3c>)
    4590:	2208      	movs	r2, #8
    4592:	f7fd ffe9 	bl	2568 <memset>

	// Reset Tx
	memset( (void*)uart_tx_buf,    0, sizeof( UARTRingBuf )  * UART_Num_Interfaces );
    4596:	2100      	movs	r1, #0
    4598:	f44f 7283 	mov.w	r2, #262	; 0x106
    459c:	480a      	ldr	r0, [pc, #40]	; (45c8 <Connect_reset+0x40>)
    459e:	f7fd ffe3 	bl	2568 <memset>
	memset( (void*)uart_tx_status, 0, sizeof( UARTStatusTx ) * UART_Num_Interfaces );
    45a2:	2100      	movs	r1, #0
    45a4:	2204      	movs	r2, #4
    45a6:	4620      	mov	r0, r4
    45a8:	f7fd ffde 	bl	2568 <memset>

	// Set Rx/Tx buffers as ready
	for ( uint8_t inter = 0; inter < UART_Num_Interfaces; inter++ )
	{
		uart_tx_status[ inter ].status = UARTStatus_Ready;
		uart_rx_buf[ inter ].last_read = UART_Buffer_Size;
    45ac:	4b07      	ldr	r3, [pc, #28]	; (45cc <Connect_reset+0x44>)
	memset( (void*)uart_tx_status, 0, sizeof( UARTStatusTx ) * UART_Num_Interfaces );

	// Set Rx/Tx buffers as ready
	for ( uint8_t inter = 0; inter < UART_Num_Interfaces; inter++ )
	{
		uart_tx_status[ inter ].status = UARTStatus_Ready;
    45ae:	2104      	movs	r1, #4
		uart_rx_buf[ inter ].last_read = UART_Buffer_Size;
    45b0:	2280      	movs	r2, #128	; 0x80
    45b2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	memset( (void*)uart_tx_status, 0, sizeof( UARTStatusTx ) * UART_Num_Interfaces );

	// Set Rx/Tx buffers as ready
	for ( uint8_t inter = 0; inter < UART_Num_Interfaces; inter++ )
	{
		uart_tx_status[ inter ].status = UARTStatus_Ready;
    45b6:	7021      	strb	r1, [r4, #0]
    45b8:	70a1      	strb	r1, [r4, #2]
		uart_rx_buf[ inter ].last_read = UART_Buffer_Size;
    45ba:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
    45be:	bd10      	pop	{r4, pc}
    45c0:	1fff9ea6 	.word	0x1fff9ea6
    45c4:	1fff9ec4 	.word	0x1fff9ec4
    45c8:	1fff9d9a 	.word	0x1fff9d9a
    45cc:	1fff9ecc 	.word	0x1fff9ecc

000045d0 <cliFunc_connectRst>:
		break;
	}
}

void cliFunc_connectRst( char* args )
{
    45d0:	b508      	push	{r3, lr}
	print( NL );
    45d2:	4806      	ldr	r0, [pc, #24]	; (45ec <cliFunc_connectRst+0x1c>)
    45d4:	f003 fae8 	bl	7ba8 <_print>
	info_msg("Resetting UARTConnect state...");
    45d8:	4805      	ldr	r0, [pc, #20]	; (45f0 <cliFunc_connectRst+0x20>)
    45da:	f003 fae5 	bl	7ba8 <_print>
	Connect_reset();
    45de:	f7ff ffd3 	bl	4588 <Connect_reset>

	// Reset node id
	Connect_id = 0xFF;
    45e2:	4b04      	ldr	r3, [pc, #16]	; (45f4 <cliFunc_connectRst+0x24>)
    45e4:	22ff      	movs	r2, #255	; 0xff
    45e6:	701a      	strb	r2, [r3, #0]
    45e8:	bd08      	pop	{r3, pc}
    45ea:	bf00      	nop
    45ec:	0000bc21 	.word	0x0000bc21
    45f0:	00009564 	.word	0x00009564
    45f4:	1fff89c5 	.word	0x1fff89c5

000045f8 <Connect_setup>:
// Setup connection to other side
// - Only supports a single slave and master
// - If USB has been initiallized at this point, this side is the master
// - If both sides assert master, flash error leds
void Connect_setup( uint8_t master )
{
    45f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Indication that UARTs are not ready
	uarts_configured = 0;
    45fa:	4e58      	ldr	r6, [pc, #352]	; (475c <Connect_setup+0x164>)

	// Register Connect CLI dictionary
	CLI_registerDictionary( uartConnectCLIDict, uartConnectCLIDictName );
    45fc:	4958      	ldr	r1, [pc, #352]	; (4760 <Connect_setup+0x168>)
// Setup connection to other side
// - Only supports a single slave and master
// - If USB has been initiallized at this point, this side is the master
// - If both sides assert master, flash error leds
void Connect_setup( uint8_t master )
{
    45fe:	4605      	mov	r5, r0
	// Indication that UARTs are not ready
	uarts_configured = 0;
    4600:	2400      	movs	r4, #0

	// Register Connect CLI dictionary
	CLI_registerDictionary( uartConnectCLIDict, uartConnectCLIDictName );
    4602:	4858      	ldr	r0, [pc, #352]	; (4764 <Connect_setup+0x16c>)
// - If USB has been initiallized at this point, this side is the master
// - If both sides assert master, flash error leds
void Connect_setup( uint8_t master )
{
	// Indication that UARTs are not ready
	uarts_configured = 0;
    4604:	7034      	strb	r4, [r6, #0]

	// Register Connect CLI dictionary
	CLI_registerDictionary( uartConnectCLIDict, uartConnectCLIDictName );
    4606:	f003 f87b 	bl	7700 <CLI_registerDictionary>

	// Check if master
	Connect_master = master;
    460a:	4b57      	ldr	r3, [pc, #348]	; (4768 <Connect_setup+0x170>)
    460c:	4630      	mov	r0, r6
    460e:	701d      	strb	r5, [r3, #0]
	if ( Connect_master )
    4610:	b10d      	cbz	r5, 4616 <Connect_setup+0x1e>
		Connect_id = 0; // 0x00 is always the master Id
    4612:	4b56      	ldr	r3, [pc, #344]	; (476c <Connect_setup+0x174>)
    4614:	701c      	strb	r4, [r3, #0]

	// UART0 setup
	// UART1 setup
	// Setup the the UART interface for keyboard data input
	SIM_SCGC4 |= SIM_SCGC4_UART0; // Disable clock gating
    4616:	4b56      	ldr	r3, [pc, #344]	; (4770 <Connect_setup+0x178>)
	PORTA_PCR2 = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(2); // TX Pin
	PORTE_PCR0 = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); // RX Pin
	PORTE_PCR1 = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); // TX Pin

	// Baud Rate setting
	UART0_BDH = (uint8_t)(Connect_baud >> 8);
    4618:	4956      	ldr	r1, [pc, #344]	; (4774 <Connect_setup+0x17c>)
		Connect_id = 0; // 0x00 is always the master Id

	// UART0 setup
	// UART1 setup
	// Setup the the UART interface for keyboard data input
	SIM_SCGC4 |= SIM_SCGC4_UART0; // Disable clock gating
    461a:	681a      	ldr	r2, [r3, #0]
	// Setup DMA clocks
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
	SIM_SCGC7 |= SIM_SCGC7_DMA;

	// Start with channels disabled first
	DMAMUX0_CHCFG0 = 0;
    461c:	4d56      	ldr	r5, [pc, #344]	; (4778 <Connect_setup+0x180>)
	// Default control register
	DMA_CR = 0;

	// DMA Priority
	DMA_DCHPRI0 = 0; // Ch 0, priority 0
	DMA_DCHPRI1 = 1; // ch 1, priority 1
    461e:	4e57      	ldr	r6, [pc, #348]	; (477c <Connect_setup+0x184>)

	// Clear error interrupts
	DMA_EEI = 0;

	// Setup TCD
	DMA_TCD0_SADDR = (uint32_t*)&UART0_D;
    4620:	4f57      	ldr	r7, [pc, #348]	; (4780 <Connect_setup+0x188>)
		Connect_id = 0; // 0x00 is always the master Id

	// UART0 setup
	// UART1 setup
	// Setup the the UART interface for keyboard data input
	SIM_SCGC4 |= SIM_SCGC4_UART0; // Disable clock gating
    4622:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    4626:	601a      	str	r2, [r3, #0]
	SIM_SCGC4 |= SIM_SCGC4_UART1; // Disable clock gating
    4628:	681a      	ldr	r2, [r3, #0]
    462a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    462e:	601a      	str	r2, [r3, #0]

	// Pin Setup for UART0 / UART1
	PORTA_PCR1 = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(2); // RX Pin
    4630:	f240 2213 	movw	r2, #531	; 0x213
    4634:	f8c3 2fd0 	str.w	r2, [r3, #4048]	; 0xfd0
	PORTA_PCR2 = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(2); // TX Pin
    4638:	f44f 7211 	mov.w	r2, #580	; 0x244
    463c:	f8c3 2fd4 	str.w	r2, [r3, #4052]	; 0xfd4
	PORTE_PCR0 = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); // RX Pin
    4640:	4b50      	ldr	r3, [pc, #320]	; (4784 <Connect_setup+0x18c>)
    4642:	f240 3213 	movw	r2, #787	; 0x313
    4646:	601a      	str	r2, [r3, #0]
	PORTE_PCR1 = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); // TX Pin
    4648:	f44f 7251 	mov.w	r2, #836	; 0x344
    464c:	605a      	str	r2, [r3, #4]

	// Baud Rate setting
	UART0_BDH = (uint8_t)(Connect_baud >> 8);
    464e:	4b4e      	ldr	r3, [pc, #312]	; (4788 <Connect_setup+0x190>)
    4650:	881a      	ldrh	r2, [r3, #0]
    4652:	0a12      	lsrs	r2, r2, #8
    4654:	700a      	strb	r2, [r1, #0]
	UART0_BDL = (uint8_t)Connect_baud;
    4656:	4a4d      	ldr	r2, [pc, #308]	; (478c <Connect_setup+0x194>)
    4658:	7819      	ldrb	r1, [r3, #0]
    465a:	7011      	strb	r1, [r2, #0]
	UART0_C4  = Connect_baudFine;
    465c:	494c      	ldr	r1, [pc, #304]	; (4790 <Connect_setup+0x198>)
    465e:	780c      	ldrb	r4, [r1, #0]
    4660:	7254      	strb	r4, [r2, #9]
	UART1_BDH = (uint8_t)(Connect_baud >> 8);
    4662:	881a      	ldrh	r2, [r3, #0]
    4664:	4c4b      	ldr	r4, [pc, #300]	; (4794 <Connect_setup+0x19c>)
    4666:	0a12      	lsrs	r2, r2, #8
    4668:	7022      	strb	r2, [r4, #0]
	UART1_BDL = (uint8_t)Connect_baud;
    466a:	781a      	ldrb	r2, [r3, #0]
    466c:	4b4a      	ldr	r3, [pc, #296]	; (4798 <Connect_setup+0x1a0>)
    466e:	701a      	strb	r2, [r3, #0]
	UART1_C4  = Connect_baudFine;
    4670:	780a      	ldrb	r2, [r1, #0]
    4672:	725a      	strb	r2, [r3, #9]

	// 8 bit, Even Parity, Idle Character bit after stop
	// NOTE: For 8 bit with Parity you must enable 9 bit transmission (pg. 1065)
	//       You only need to use UART0_D for 8 bit reading/writing though
	// UART_C1_M UART_C1_PE UART_C1_PT UART_C1_ILT
	UART0_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;
    4674:	4a49      	ldr	r2, [pc, #292]	; (479c <Connect_setup+0x1a4>)
    4676:	2316      	movs	r3, #22
    4678:	7013      	strb	r3, [r2, #0]
	UART1_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;
    467a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000

	// Only using Tx Fifos
	UART0_PFIFO = UART_PFIFO_TXFE;
    467e:	2180      	movs	r1, #128	; 0x80
	// 8 bit, Even Parity, Idle Character bit after stop
	// NOTE: For 8 bit with Parity you must enable 9 bit transmission (pg. 1065)
	//       You only need to use UART0_D for 8 bit reading/writing though
	// UART_C1_M UART_C1_PE UART_C1_PT UART_C1_ILT
	UART0_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;
	UART1_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;
    4680:	7013      	strb	r3, [r2, #0]

	// Only using Tx Fifos
	UART0_PFIFO = UART_PFIFO_TXFE;
    4682:	4b47      	ldr	r3, [pc, #284]	; (47a0 <Connect_setup+0x1a8>)
	UART1_PFIFO = UART_PFIFO_TXFE;

	// Setup DMA clocks
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    4684:	f5a2 320b 	sub.w	r2, r2, #142336	; 0x22c00
	// UART_C1_M UART_C1_PE UART_C1_PT UART_C1_ILT
	UART0_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;
	UART1_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;

	// Only using Tx Fifos
	UART0_PFIFO = UART_PFIFO_TXFE;
    4688:	7019      	strb	r1, [r3, #0]
	UART1_PFIFO = UART_PFIFO_TXFE;
    468a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000

	// Setup DMA clocks
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    468e:	f2a2 32c6 	subw	r2, r2, #966	; 0x3c6
	UART0_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;
	UART1_C1 = UART_C1_M | UART_C1_PE | UART_C1_ILT;

	// Only using Tx Fifos
	UART0_PFIFO = UART_PFIFO_TXFE;
	UART1_PFIFO = UART_PFIFO_TXFE;
    4692:	7019      	strb	r1, [r3, #0]

	// Setup DMA clocks
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    4694:	6813      	ldr	r3, [r2, #0]
    4696:	f043 0302 	orr.w	r3, r3, #2
    469a:	6013      	str	r3, [r2, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    469c:	6853      	ldr	r3, [r2, #4]
    469e:	f043 0302 	orr.w	r3, r3, #2
    46a2:	6053      	str	r3, [r2, #4]

	// Start with channels disabled first
	DMAMUX0_CHCFG0 = 0;
	DMAMUX0_CHCFG1 = 0;
    46a4:	f5a4 2493 	sub.w	r4, r4, #301056	; 0x49800

	// Configure DMA channels
	//DMA_DSR_BCR0 |= DMA_DSR_BCR_DONE_MASK; // TODO What's this?
	DMA_TCD0_CSR = 0;
    46a8:	f5a2 327c 	sub.w	r2, r2, #258048	; 0x3f000
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
	SIM_SCGC7 |= SIM_SCGC7_DMA;

	// Start with channels disabled first
	DMAMUX0_CHCFG0 = 0;
	DMAMUX0_CHCFG1 = 0;
    46ac:	f2a4 74ff 	subw	r4, r4, #2047	; 0x7ff

	// Configure DMA channels
	//DMA_DSR_BCR0 |= DMA_DSR_BCR_DONE_MASK; // TODO What's this?
	DMA_TCD0_CSR = 0;
    46b0:	3a20      	subs	r2, #32
	// Setup DMA clocks
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
	SIM_SCGC7 |= SIM_SCGC7_DMA;

	// Start with channels disabled first
	DMAMUX0_CHCFG0 = 0;
    46b2:	2300      	movs	r3, #0
    46b4:	702b      	strb	r3, [r5, #0]
	DMAMUX0_CHCFG1 = 0;
    46b6:	7023      	strb	r3, [r4, #0]

	// Configure DMA channels
	//DMA_DSR_BCR0 |= DMA_DSR_BCR_DONE_MASK; // TODO What's this?
	DMA_TCD0_CSR = 0;
    46b8:	8013      	strh	r3, [r2, #0]
	DMA_TCD1_CSR = 0;
    46ba:	8413      	strh	r3, [r2, #32]

	// Default control register
	DMA_CR = 0;
    46bc:	4a39      	ldr	r2, [pc, #228]	; (47a4 <Connect_setup+0x1ac>)
    46be:	6013      	str	r3, [r2, #0]

	// DMA Priority
	DMA_DCHPRI0 = 0; // Ch 0, priority 0
    46c0:	f882 3103 	strb.w	r3, [r2, #259]	; 0x103
	DMA_DCHPRI1 = 1; // ch 1, priority 1
    46c4:	2201      	movs	r2, #1
    46c6:	7032      	strb	r2, [r6, #0]

	// Clear error interrupts
	DMA_EEI = 0;
    46c8:	f846 3cee 	str.w	r3, [r6, #-238]

	// Setup TCD
	DMA_TCD0_SADDR = (uint32_t*)&UART0_D;
    46cc:	f8c6 7efe 	str.w	r7, [r6, #3838]	; 0xefe
    46d0:	f606 66fe 	addw	r6, r6, #3838	; 0xefe
	DMA_TCD1_SADDR = (uint32_t*)&UART1_D;
    46d4:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
    46d8:	6237      	str	r7, [r6, #32]
	DMA_TCD0_SOFF = 0;
    46da:	80b3      	strh	r3, [r6, #4]
	DMA_TCD1_SOFF = 0;
    46dc:	84b3      	strh	r3, [r6, #36]	; 0x24

	// No modulo, 8-bit transfer size
	DMA_TCD0_ATTR = DMA_TCD_ATTR_SMOD(0) | DMA_TCD_ATTR_SSIZE(0) | DMA_TCD_ATTR_DMOD(0) | DMA_TCD_ATTR_DSIZE(0);
    46de:	80f3      	strh	r3, [r6, #6]
	DMA_TCD1_ATTR = DMA_TCD_ATTR_SMOD(0) | DMA_TCD_ATTR_SSIZE(0) | DMA_TCD_ATTR_DMOD(0) | DMA_TCD_ATTR_DSIZE(0);
    46e0:	84f3      	strh	r3, [r6, #38]	; 0x26

	// One byte transferred at a time
	DMA_TCD0_NBYTES_MLNO = 1;
    46e2:	60b2      	str	r2, [r6, #8]
	DMA_TCD1_NBYTES_MLNO = 1;
    46e4:	62b2      	str	r2, [r6, #40]	; 0x28

	// Source address does not change
	DMA_TCD0_SLAST = 0;
    46e6:	60f3      	str	r3, [r6, #12]
	DMA_TCD1_SLAST = 0;
    46e8:	62f3      	str	r3, [r6, #44]	; 0x2c

	// Destination buffer
	DMA_TCD0_DADDR = (uint32_t*)uart_rx_buf[0].buffer;
    46ea:	4b2f      	ldr	r3, [pc, #188]	; (47a8 <Connect_setup+0x1b0>)
    46ec:	6133      	str	r3, [r6, #16]
	DMA_TCD1_DADDR = (uint32_t*)uart_rx_buf[1].buffer;
    46ee:	3382      	adds	r3, #130	; 0x82
    46f0:	6333      	str	r3, [r6, #48]	; 0x30

	// Incoming byte, increment by 1 in the rx buffer
	DMA_TCD0_DOFF = 1;
    46f2:	4b2e      	ldr	r3, [pc, #184]	; (47ac <Connect_setup+0x1b4>)
    46f4:	801a      	strh	r2, [r3, #0]
	DMA_TCD1_DOFF = 1;
    46f6:	841a      	strh	r2, [r3, #32]

	// Single major loop, must be the same value
	DMA_TCD0_CITER_ELINKNO = UART_Buffer_Size;
    46f8:	8059      	strh	r1, [r3, #2]
	DMA_TCD1_CITER_ELINKNO = UART_Buffer_Size;
    46fa:	8459      	strh	r1, [r3, #34]	; 0x22
	DMA_TCD0_BITER_ELINKNO = UART_Buffer_Size;
    46fc:	8159      	strh	r1, [r3, #10]
	DMA_TCD1_BITER_ELINKNO = UART_Buffer_Size;
    46fe:	8559      	strh	r1, [r3, #42]	; 0x2a

	// Reset buffer when full
	DMA_TCD0_DLASTSGA = -( UART_Buffer_Size );
    4700:	492b      	ldr	r1, [pc, #172]	; (47b0 <Connect_setup+0x1b8>)
    4702:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    4706:	600b      	str	r3, [r1, #0]
	DMA_TCD1_DLASTSGA = -( UART_Buffer_Size );
    4708:	620b      	str	r3, [r1, #32]

	// Enable DMA channels
	DMA_ERQ |= DMA_ERQ_ERQ0 | DMA_ERQ_ERQ1;
    470a:	f5a1 5180 	sub.w	r1, r1, #4096	; 0x1000
    470e:	390c      	subs	r1, #12
    4710:	680b      	ldr	r3, [r1, #0]
    4712:	f043 0303 	orr.w	r3, r3, #3
    4716:	600b      	str	r3, [r1, #0]

	// Setup DMA channel routing
	DMAMUX0_CHCFG0 = DMAMUX_ENABLE | DMAMUX_SOURCE_UART0_RX;
    4718:	2382      	movs	r3, #130	; 0x82
	DMAMUX0_CHCFG1 = DMAMUX_ENABLE | DMAMUX_SOURCE_UART1_RX;

	// Enable DMA requests (requires Rx interrupts)
	UART0_C5 = UART_C5_RDMAS;
    471a:	f501 21c3 	add.w	r1, r1, #399360	; 0x61800

	// Enable DMA channels
	DMA_ERQ |= DMA_ERQ_ERQ0 | DMA_ERQ_ERQ1;

	// Setup DMA channel routing
	DMAMUX0_CHCFG0 = DMAMUX_ENABLE | DMAMUX_SOURCE_UART0_RX;
    471e:	702b      	strb	r3, [r5, #0]
	DMAMUX0_CHCFG1 = DMAMUX_ENABLE | DMAMUX_SOURCE_UART1_RX;

	// Enable DMA requests (requires Rx interrupts)
	UART0_C5 = UART_C5_RDMAS;
    4720:	f201 71ff 	addw	r1, r1, #2047	; 0x7ff
	// Enable DMA channels
	DMA_ERQ |= DMA_ERQ_ERQ0 | DMA_ERQ_ERQ1;

	// Setup DMA channel routing
	DMAMUX0_CHCFG0 = DMAMUX_ENABLE | DMAMUX_SOURCE_UART0_RX;
	DMAMUX0_CHCFG1 = DMAMUX_ENABLE | DMAMUX_SOURCE_UART1_RX;
    4724:	2384      	movs	r3, #132	; 0x84
    4726:	7023      	strb	r3, [r4, #0]

	// Enable DMA requests (requires Rx interrupts)
	UART0_C5 = UART_C5_RDMAS;
    4728:	2320      	movs	r3, #32
    472a:	700b      	strb	r3, [r1, #0]
	UART1_C5 = UART_C5_RDMAS;
    472c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    4730:	700b      	strb	r3, [r1, #0]

	// TX Enabled, RX Enabled, RX Interrupt Enabled
	UART0_C2 = UART_C2_TE | UART_C2_RE | UART_C2_RIE;
    4732:	4920      	ldr	r1, [pc, #128]	; (47b4 <Connect_setup+0x1bc>)
    4734:	232c      	movs	r3, #44	; 0x2c
    4736:	700b      	strb	r3, [r1, #0]
	UART1_C2 = UART_C2_TE | UART_C2_RE | UART_C2_RIE;
    4738:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    473c:	700b      	strb	r3, [r1, #0]

	// Add interrupts to the vector table
	NVIC_ENABLE_IRQ( IRQ_UART0_STATUS );
    473e:	f103 23e0 	add.w	r3, r3, #3758153728	; 0xe000e000
    4742:	33d8      	adds	r3, #216	; 0xd8
    4744:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    4748:	6019      	str	r1, [r3, #0]
	NVIC_ENABLE_IRQ( IRQ_UART1_STATUS );
    474a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    474e:	6019      	str	r1, [r3, #0]

	// UARTs are now ready to go
	uarts_configured = 1;
    4750:	7002      	strb	r2, [r0, #0]

	// Reset the state of the UART variables
	Connect_reset();
}
    4752:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

	// UARTs are now ready to go
	uarts_configured = 1;

	// Reset the state of the UART variables
	Connect_reset();
    4756:	f7ff bf17 	b.w	4588 <Connect_reset>
    475a:	bf00      	nop
    475c:	1fff91a1 	.word	0x1fff91a1
    4760:	000096df 	.word	0x000096df
    4764:	00009074 	.word	0x00009074
    4768:	1fff91ba 	.word	0x1fff91ba
    476c:	1fff89c5 	.word	0x1fff89c5
    4770:	40048034 	.word	0x40048034
    4774:	4006a000 	.word	0x4006a000
    4778:	40021000 	.word	0x40021000
    477c:	40008102 	.word	0x40008102
    4780:	4006a007 	.word	0x4006a007
    4784:	4004d000 	.word	0x4004d000
    4788:	1fff89c6 	.word	0x1fff89c6
    478c:	4006a001 	.word	0x4006a001
    4790:	1fff91a2 	.word	0x1fff91a2
    4794:	4006b000 	.word	0x4006b000
    4798:	4006b001 	.word	0x4006b001
    479c:	4006a002 	.word	0x4006a002
    47a0:	4006a010 	.word	0x4006a010
    47a4:	40008000 	.word	0x40008000
    47a8:	1fff9ecc 	.word	0x1fff9ecc
    47ac:	40009014 	.word	0x40009014
    47b0:	40009018 	.word	0x40009018
    47b4:	4006a003 	.word	0x4006a003

000047b8 <Connect_rx_process>:
#define DMA_BUF_POS( x, pos ) \
	case x: \
		pos = DMA_TCD##x##_CITER_ELINKNO; \
		break
void Connect_rx_process( uint8_t uartNum )
{
    47b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// Determine current position to read until
	uint16_t bufpos = 0;
	switch ( uartNum )
    47bc:	4604      	mov	r4, r0
    47be:	b118      	cbz	r0, 47c8 <Connect_rx_process+0x10>
    47c0:	2801      	cmp	r0, #1
    47c2:	d105      	bne.n	47d0 <Connect_rx_process+0x18>
	{
	DMA_BUF_POS( 0, bufpos );
	DMA_BUF_POS( 1, bufpos );
    47c4:	4b5c      	ldr	r3, [pc, #368]	; (4938 <Connect_rx_process+0x180>)
    47c6:	e000      	b.n	47ca <Connect_rx_process+0x12>
{
	// Determine current position to read until
	uint16_t bufpos = 0;
	switch ( uartNum )
	{
	DMA_BUF_POS( 0, bufpos );
    47c8:	4b5c      	ldr	r3, [pc, #368]	; (493c <Connect_rx_process+0x184>)
	DMA_BUF_POS( 1, bufpos );
    47ca:	881e      	ldrh	r6, [r3, #0]
    47cc:	b2b6      	uxth	r6, r6
    47ce:	e007      	b.n	47e0 <Connect_rx_process+0x28>
		pos = DMA_TCD##x##_CITER_ELINKNO; \
		break
void Connect_rx_process( uint8_t uartNum )
{
	// Determine current position to read until
	uint16_t bufpos = 0;
    47d0:	2600      	movs	r6, #0
    47d2:	e005      	b.n	47e0 <Connect_rx_process+0x28>
			break;
		}

		// Unknown status, should never get here
		default:
			erro_msg("Invalid UARTStatus...");
    47d4:	485a      	ldr	r0, [pc, #360]	; (4940 <Connect_rx_process+0x188>)
    47d6:	f003 f9e7 	bl	7ba8 <_print>
			uart_rx_status[ uartNum ].status = UARTStatus_Wait;
    47da:	2300      	movs	r3, #0
    47dc:	f807 3024 	strb.w	r3, [r7, r4, lsl #2]
	DMA_BUF_POS( 1, bufpos );
	}

	// Process each of the new bytes
	// Even if we receive more bytes during processing, wait until the next check so we don't starve other tasks
	while ( bufpos != uart_rx_buf[ uartNum ].last_read )
    47e0:	4d58      	ldr	r5, [pc, #352]	; (4944 <Connect_rx_process+0x18c>)
    47e2:	2382      	movs	r3, #130	; 0x82
    47e4:	fb03 5304 	mla	r3, r3, r4, r5
    47e8:	4629      	mov	r1, r5
    47ea:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
    47ee:	b292      	uxth	r2, r2
    47f0:	4296      	cmp	r6, r2
    47f2:	f000 809f 	beq.w	4934 <Connect_rx_process+0x17c>
	{
		// If the last_read byte is at the buffer edge, roll back to beginning
		if ( uart_rx_buf[ uartNum ].last_read == 0 )
    47f6:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
    47fa:	b292      	uxth	r2, r2
    47fc:	b1e2      	cbz	r2, 4838 <Connect_rx_process+0x80>
			if ( bufpos == UART_Buffer_Size )
				break;
		}

		// Read the byte out of Rx DMA buffer
		uint8_t byte = uart_rx_buf[ uartNum ].buffer[ UART_Buffer_Size - uart_rx_buf[ uartNum ].last_read-- ];
    47fe:	2382      	movs	r3, #130	; 0x82
    4800:	fb03 f004 	mul.w	r0, r3, r4
    4804:	4401      	add	r1, r0

		if ( Connect_debug )
    4806:	f8df 8164 	ldr.w	r8, [pc, #356]	; 496c <Connect_rx_process+0x1b4>
			if ( bufpos == UART_Buffer_Size )
				break;
		}

		// Read the byte out of Rx DMA buffer
		uint8_t byte = uart_rx_buf[ uartNum ].buffer[ UART_Buffer_Size - uart_rx_buf[ uartNum ].last_read-- ];
    480a:	f8b1 2080 	ldrh.w	r2, [r1, #128]	; 0x80
    480e:	b293      	uxth	r3, r2
    4810:	1e5a      	subs	r2, r3, #1
    4812:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
    4816:	4403      	add	r3, r0
    4818:	b292      	uxth	r2, r2
    481a:	f8a1 2080 	strh.w	r2, [r1, #128]	; 0x80
    481e:	5ced      	ldrb	r5, [r5, r3]

		if ( Connect_debug )
    4820:	f898 3000 	ldrb.w	r3, [r8]
			if ( bufpos == UART_Buffer_Size )
				break;
		}

		// Read the byte out of Rx DMA buffer
		uint8_t byte = uart_rx_buf[ uartNum ].buffer[ UART_Buffer_Size - uart_rx_buf[ uartNum ].last_read-- ];
    4824:	b2ed      	uxtb	r5, r5

		if ( Connect_debug )
    4826:	b173      	cbz	r3, 4846 <Connect_rx_process+0x8e>
		{
			printHex( byte );
    4828:	4628      	mov	r0, r5
    482a:	2101      	movs	r1, #1
    482c:	f003 fa5e 	bl	7cec <printHex_op>
			print(" ");
    4830:	4845      	ldr	r0, [pc, #276]	; (4948 <Connect_rx_process+0x190>)
    4832:	f003 f9b9 	bl	7ba8 <_print>
    4836:	e006      	b.n	4846 <Connect_rx_process+0x8e>
	while ( bufpos != uart_rx_buf[ uartNum ].last_read )
	{
		// If the last_read byte is at the buffer edge, roll back to beginning
		if ( uart_rx_buf[ uartNum ].last_read == 0 )
		{
			uart_rx_buf[ uartNum ].last_read = UART_Buffer_Size;
    4838:	2280      	movs	r2, #128	; 0x80

			// Check to see if we're at the boundary
			if ( bufpos == UART_Buffer_Size )
    483a:	4296      	cmp	r6, r2
	while ( bufpos != uart_rx_buf[ uartNum ].last_read )
	{
		// If the last_read byte is at the buffer edge, roll back to beginning
		if ( uart_rx_buf[ uartNum ].last_read == 0 )
		{
			uart_rx_buf[ uartNum ].last_read = UART_Buffer_Size;
    483c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

			// Check to see if we're at the boundary
			if ( bufpos == UART_Buffer_Size )
    4840:	d1dd      	bne.n	47fe <Connect_rx_process+0x46>
    4842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			printHex( byte );
			print(" ");
		}

		// Process UART byte
		switch ( uart_rx_status[ uartNum ].status )
    4846:	4f41      	ldr	r7, [pc, #260]	; (494c <Connect_rx_process+0x194>)
    4848:	f817 3024 	ldrb.w	r3, [r7, r4, lsl #2]
    484c:	46b9      	mov	r9, r7
    484e:	2b03      	cmp	r3, #3
    4850:	d8c0      	bhi.n	47d4 <Connect_rx_process+0x1c>
    4852:	e8df f003 	tbb	[pc, r3]
    4856:	0f02      	.short	0x0f02
    4858:	511a      	.short	0x511a
		{
		// Every packet must start with a SYN / 0x16
		case UARTStatus_Wait:
			if ( Connect_debug )
    485a:	f898 3000 	ldrb.w	r3, [r8]
    485e:	b113      	cbz	r3, 4866 <Connect_rx_process+0xae>
			{
				print(" Wait ");
    4860:	483b      	ldr	r0, [pc, #236]	; (4950 <Connect_rx_process+0x198>)
    4862:	f003 f9a1 	bl	7ba8 <_print>
			}
			uart_rx_status[ uartNum ].status = byte == 0x16 ? UARTStatus_SYN : UARTStatus_Wait;
    4866:	f1a5 0316 	sub.w	r3, r5, #22
    486a:	425d      	negs	r5, r3
    486c:	415d      	adcs	r5, r3
    486e:	f807 5024 	strb.w	r5, [r7, r4, lsl #2]
			break;
    4872:	e056      	b.n	4922 <Connect_rx_process+0x16a>

		// After a SYN, there must be a SOH / 0x01
		case UARTStatus_SYN:
			if ( Connect_debug )
    4874:	f898 3000 	ldrb.w	r3, [r8]
    4878:	b113      	cbz	r3, 4880 <Connect_rx_process+0xc8>
			{
				print(" SYN ");
    487a:	4836      	ldr	r0, [pc, #216]	; (4954 <Connect_rx_process+0x19c>)
    487c:	f003 f994 	bl	7ba8 <_print>
			}
			uart_rx_status[ uartNum ].status = byte == 0x01 ? UARTStatus_SOH : UARTStatus_Wait;
    4880:	2d01      	cmp	r5, #1
    4882:	bf0c      	ite	eq
    4884:	2302      	moveq	r3, #2
    4886:	2300      	movne	r3, #0
    4888:	e008      	b.n	489c <Connect_rx_process+0xe4>
		// After a SOH the packet structure may diverge a bit
		// This is the packet type field (refer to the Command enum)
		// For very small packets (e.g. IdRequest) this is all that's required to take action
		case UARTStatus_SOH:
		{
			if ( Connect_debug )
    488a:	f898 3000 	ldrb.w	r3, [r8]
    488e:	b113      	cbz	r3, 4896 <Connect_rx_process+0xde>
			{
				print(" SOH ");
    4890:	4831      	ldr	r0, [pc, #196]	; (4958 <Connect_rx_process+0x1a0>)
    4892:	f003 f989 	bl	7ba8 <_print>
			}

			// Check if this is actually a reserved CMD 0x16 (Error condition)
			if ( byte == Command_SYN )
    4896:	2d16      	cmp	r5, #22
    4898:	d103      	bne.n	48a2 <Connect_rx_process+0xea>
			{
				uart_rx_status[ uartNum ].status = UARTStatus_SYN;
    489a:	2301      	movs	r3, #1
    489c:	f807 3024 	strb.w	r3, [r7, r4, lsl #2]
				break;
    48a0:	e03f      	b.n	4922 <Connect_rx_process+0x16a>
			}

			// Otherwise process the command
			if ( byte < Command_TOP )
    48a2:	2d08      	cmp	r5, #8
			{
				uart_rx_status[ uartNum ].status = UARTStatus_Command;
    48a4:	bf98      	it	ls
    48a6:	2303      	movls	r3, #3
    48a8:	ea4f 0184 	mov.w	r1, r4, lsl #2
    48ac:	bf97      	itett	ls
    48ae:	f807 3024 	strbls.w	r3, [r7, r4, lsl #2]
				uart_rx_status[ uartNum ].bytes_waiting = 0xFFFF;
			}
			// Invalid packet type, ignore
			else
			{
				uart_rx_status[ uartNum ].status = UARTStatus_Wait;
    48b2:	2300      	movhi	r3, #0

			// Otherwise process the command
			if ( byte < Command_TOP )
			{
				uart_rx_status[ uartNum ].status = UARTStatus_Command;
				uart_rx_status[ uartNum ].command = byte;
    48b4:	eb09 0301 	addls.w	r3, r9, r1
				uart_rx_status[ uartNum ].bytes_waiting = 0xFFFF;
    48b8:	f64f 72ff 	movwls	r2, #65535	; 0xffff
			}
			// Invalid packet type, ignore
			else
			{
				uart_rx_status[ uartNum ].status = UARTStatus_Wait;
    48bc:	bf88      	it	hi
    48be:	f807 3024 	strbhi.w	r3, [r7, r4, lsl #2]
			}

			// Check if this is a very short packet
			switch ( uart_rx_status[ uartNum ].command )
    48c2:	4489      	add	r9, r1

			// Otherwise process the command
			if ( byte < Command_TOP )
			{
				uart_rx_status[ uartNum ].status = UARTStatus_Command;
				uart_rx_status[ uartNum ].command = byte;
    48c4:	bf9c      	itt	ls
    48c6:	705d      	strbls	r5, [r3, #1]
				uart_rx_status[ uartNum ].bytes_waiting = 0xFFFF;
    48c8:	805a      	strhls	r2, [r3, #2]
			{
				uart_rx_status[ uartNum ].status = UARTStatus_Wait;
			}

			// Check if this is a very short packet
			switch ( uart_rx_status[ uartNum ].command )
    48ca:	f899 3001 	ldrb.w	r3, [r9, #1]
    48ce:	2b01      	cmp	r3, #1
    48d0:	d106      	bne.n	48e0 <Connect_rx_process+0x128>
			{
			case IdRequest:
				Connect_receive_IdRequest( 0, (uint16_t*)&uart_rx_status[ uartNum ].bytes_waiting, uartNum );
    48d2:	f109 0102 	add.w	r1, r9, #2
    48d6:	4622      	mov	r2, r4
    48d8:	2000      	movs	r0, #0
    48da:	f7ff fcb1 	bl	4240 <Connect_receive_IdRequest>
    48de:	e01c      	b.n	491a <Connect_rx_process+0x162>
				uart_rx_status[ uartNum ].status = UARTStatus_Wait;
				break;

			default:
				if ( Connect_debug )
    48e0:	f898 3000 	ldrb.w	r3, [r8]
    48e4:	b1eb      	cbz	r3, 4922 <Connect_rx_process+0x16a>
				{
					print(" ### ");
    48e6:	481d      	ldr	r0, [pc, #116]	; (495c <Connect_rx_process+0x1a4>)
    48e8:	f003 f95e 	bl	7ba8 <_print>
					printHex( uart_rx_status[ uartNum ].command );
    48ec:	f899 0001 	ldrb.w	r0, [r9, #1]
    48f0:	2101      	movs	r1, #1
    48f2:	f003 f9fb 	bl	7cec <printHex_op>
    48f6:	e014      	b.n	4922 <Connect_rx_process+0x16a>

		// After the packet type has been deciphered do Command specific processing
		// Until the Command has received all the bytes it requires the UART buffer stays in this state
		case UARTStatus_Command:
		{
			if ( Connect_debug )
    48f8:	f898 3000 	ldrb.w	r3, [r8]
    48fc:	b113      	cbz	r3, 4904 <Connect_rx_process+0x14c>
			{
				print(" CMD ");
    48fe:	4818      	ldr	r0, [pc, #96]	; (4960 <Connect_rx_process+0x1a8>)
    4900:	f003 f952 	bl	7ba8 <_print>
			}
			/* Call specific UARTConnect command receive function */
			uint8_t (*rcvFunc)(uint8_t, uint16_t(*), uint8_t) = (uint8_t(*)(uint8_t, uint16_t(*), uint8_t))(Connect_receiveFunctions[ uart_rx_status[ uartNum ].command ]);
    4904:	eb09 0184 	add.w	r1, r9, r4, lsl #2
			if ( rcvFunc( byte, (uint16_t*)&uart_rx_status[ uartNum ].bytes_waiting, uartNum ) )
    4908:	4b16      	ldr	r3, [pc, #88]	; (4964 <Connect_rx_process+0x1ac>)
			if ( Connect_debug )
			{
				print(" CMD ");
			}
			/* Call specific UARTConnect command receive function */
			uint8_t (*rcvFunc)(uint8_t, uint16_t(*), uint8_t) = (uint8_t(*)(uint8_t, uint16_t(*), uint8_t))(Connect_receiveFunctions[ uart_rx_status[ uartNum ].command ]);
    490a:	784a      	ldrb	r2, [r1, #1]
			if ( rcvFunc( byte, (uint16_t*)&uart_rx_status[ uartNum ].bytes_waiting, uartNum ) )
    490c:	4628      	mov	r0, r5
    490e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4912:	3102      	adds	r1, #2
    4914:	4622      	mov	r2, r4
    4916:	4798      	blx	r3
    4918:	b118      	cbz	r0, 4922 <Connect_rx_process+0x16a>
				uart_rx_status[ uartNum ].status = UARTStatus_Wait;
    491a:	4b0c      	ldr	r3, [pc, #48]	; (494c <Connect_rx_process+0x194>)
    491c:	2200      	movs	r2, #0
    491e:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
			erro_msg("Invalid UARTStatus...");
			uart_rx_status[ uartNum ].status = UARTStatus_Wait;
			continue;
		}

		if ( Connect_debug )
    4922:	f898 3000 	ldrb.w	r3, [r8]
    4926:	2b00      	cmp	r3, #0
    4928:	f43f af5a 	beq.w	47e0 <Connect_rx_process+0x28>
		{
			print( NL );
    492c:	480e      	ldr	r0, [pc, #56]	; (4968 <Connect_rx_process+0x1b0>)
    492e:	f003 f93b 	bl	7ba8 <_print>
    4932:	e755      	b.n	47e0 <Connect_rx_process+0x28>
    4934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4938:	40009036 	.word	0x40009036
    493c:	40009016 	.word	0x40009016
    4940:	000095b4 	.word	0x000095b4
    4944:	1fff9ecc 	.word	0x1fff9ecc
    4948:	0000852a 	.word	0x0000852a
    494c:	1fff9ec4 	.word	0x1fff9ec4
    4950:	00009595 	.word	0x00009595
    4954:	0000959c 	.word	0x0000959c
    4958:	000095a2 	.word	0x000095a2
    495c:	000095a8 	.word	0x000095a8
    4960:	000095ae 	.word	0x000095ae
    4964:	1fff89c8 	.word	0x1fff89c8
    4968:	0000bc21 	.word	0x0000bc21
    496c:	1fff91b1 	.word	0x1fff91b1

00004970 <Connect_scan>:
// - Interrupts will deal with most input functions
// - Used to send queries
// - SyncEvent is sent immediately once the current command is sent
// - SyncEvent is also blocking until sent
void Connect_scan()
{
    4970:	b570      	push	{r4, r5, r6, lr}
	// Check if initially configured as a slave and usb comes up
	// Then reconfigure as a master
	if ( !Connect_master && Output_Available && !Connect_override )
    4972:	4b63      	ldr	r3, [pc, #396]	; (4b00 <Connect_scan+0x190>)
    4974:	781a      	ldrb	r2, [r3, #0]
    4976:	461c      	mov	r4, r3
    4978:	b942      	cbnz	r2, 498c <Connect_scan+0x1c>
    497a:	4b62      	ldr	r3, [pc, #392]	; (4b04 <Connect_scan+0x194>)
    497c:	781a      	ldrb	r2, [r3, #0]
    497e:	b12a      	cbz	r2, 498c <Connect_scan+0x1c>
    4980:	4a61      	ldr	r2, [pc, #388]	; (4b08 <Connect_scan+0x198>)
    4982:	7812      	ldrb	r2, [r2, #0]
    4984:	b912      	cbnz	r2, 498c <Connect_scan+0x1c>
	{
		Connect_setup( Output_Available );
    4986:	7818      	ldrb	r0, [r3, #0]
    4988:	f7ff fe36 	bl	45f8 <Connect_setup>
	}

	// Limit how often we do cable checks
	//uint32_t time_compare = 0x007; // Used for debugging cables -HaaTa
	uint32_t time_compare = 0x7FF; // Must be all 1's, 0x3FF is valid, 0x4FF is not
	uint32_t current_time = systick_millis_count;
    498c:	4b5f      	ldr	r3, [pc, #380]	; (4b0c <Connect_scan+0x19c>)
	if ( Connect_lastCheck != current_time
    498e:	4a60      	ldr	r2, [pc, #384]	; (4b10 <Connect_scan+0x1a0>)
	}

	// Limit how often we do cable checks
	//uint32_t time_compare = 0x007; // Used for debugging cables -HaaTa
	uint32_t time_compare = 0x7FF; // Must be all 1's, 0x3FF is valid, 0x4FF is not
	uint32_t current_time = systick_millis_count;
    4990:	681b      	ldr	r3, [r3, #0]
	if ( Connect_lastCheck != current_time
    4992:	6811      	ldr	r1, [r2, #0]
    4994:	4299      	cmp	r1, r3
    4996:	d014      	beq.n	49c2 <Connect_scan+0x52>
		&& ( current_time & time_compare ) == time_compare
    4998:	f3c3 000a 	ubfx	r0, r3, #0, #11
    499c:	f240 71ff 	movw	r1, #2047	; 0x7ff
    49a0:	4288      	cmp	r0, r1
    49a2:	d10e      	bne.n	49c2 <Connect_scan+0x52>
	{
		// Make sure we don't double check if the clock speed is too high
		Connect_lastCheck = current_time;

		// Send a cable check command of 2 bytes
		Connect_send_CableCheck( UARTConnectCableCheckLength_define );
    49a4:	2002      	movs	r0, #2
	if ( Connect_lastCheck != current_time
		&& ( current_time & time_compare ) == time_compare
	)
	{
		// Make sure we don't double check if the clock speed is too high
		Connect_lastCheck = current_time;
    49a6:	6013      	str	r3, [r2, #0]

		// Send a cable check command of 2 bytes
		Connect_send_CableCheck( UARTConnectCableCheckLength_define );
    49a8:	f7ff fbc2 	bl	4130 <Connect_send_CableCheck>

		// If this is a slave, and we don't have an id yeth
		// Don't bother sending if there are cable issues
		if ( !Connect_master && Connect_id == 0xFF && Connect_cableOkMaster )
    49ac:	7823      	ldrb	r3, [r4, #0]
    49ae:	b943      	cbnz	r3, 49c2 <Connect_scan+0x52>
    49b0:	4b58      	ldr	r3, [pc, #352]	; (4b14 <Connect_scan+0x1a4>)
    49b2:	781b      	ldrb	r3, [r3, #0]
    49b4:	2bff      	cmp	r3, #255	; 0xff
    49b6:	d104      	bne.n	49c2 <Connect_scan+0x52>
    49b8:	4b57      	ldr	r3, [pc, #348]	; (4b18 <Connect_scan+0x1a8>)
    49ba:	781b      	ldrb	r3, [r3, #0]
    49bc:	b10b      	cbz	r3, 49c2 <Connect_scan+0x52>
		{
			Connect_send_IdRequest();
    49be:	f7ff fbfd 	bl	41bc <Connect_send_IdRequest>
		}
	}

	// Only process commands if uarts have been configured
	if ( uarts_configured )
    49c2:	4b56      	ldr	r3, [pc, #344]	; (4b1c <Connect_scan+0x1ac>)
    49c4:	781b      	ldrb	r3, [r3, #0]
    49c6:	2b00      	cmp	r3, #0
    49c8:	f000 8098 	beq.w	4afc <Connect_scan+0x18c>
	{
		// Check if Tx Buffers are empty and the Tx Ring buffers have data to send
		// This happens if there was previously nothing to send
		if ( uart_tx_buf[ 0 ].items > 0 && UART0_TCFIFO == 0 )
    49cc:	4d54      	ldr	r5, [pc, #336]	; (4b20 <Connect_scan+0x1b0>)
    49ce:	78ab      	ldrb	r3, [r5, #2]
    49d0:	b923      	cbnz	r3, 49dc <Connect_scan+0x6c>
			uart_fillTxFifo( 0 );
		if ( uart_tx_buf[ 1 ].items > 0 && UART1_TCFIFO == 0 )
    49d2:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    49d6:	2b00      	cmp	r3, #0
    49d8:	d142      	bne.n	4a60 <Connect_scan+0xf0>
    49da:	e044      	b.n	4a66 <Connect_scan+0xf6>
	// Only process commands if uarts have been configured
	if ( uarts_configured )
	{
		// Check if Tx Buffers are empty and the Tx Ring buffers have data to send
		// This happens if there was previously nothing to send
		if ( uart_tx_buf[ 0 ].items > 0 && UART0_TCFIFO == 0 )
    49dc:	4e51      	ldr	r6, [pc, #324]	; (4b24 <Connect_scan+0x1b4>)
    49de:	7833      	ldrb	r3, [r6, #0]
    49e0:	2b00      	cmp	r3, #0
    49e2:	d1f6      	bne.n	49d2 <Connect_scan+0x62>
			uart_fillTxFifo( 0 );
    49e4:	4b50      	ldr	r3, [pc, #320]	; (4b28 <Connect_scan+0x1b8>)
    49e6:	781b      	ldrb	r3, [r3, #0]
    49e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
    49ec:	109c      	asrs	r4, r3, #2
    49ee:	b10b      	cbz	r3, 49f4 <Connect_scan+0x84>
    49f0:	b2e4      	uxtb	r4, r4
    49f2:	e000      	b.n	49f6 <Connect_scan+0x86>
    49f4:	2401      	movs	r4, #1
    49f6:	4b4d      	ldr	r3, [pc, #308]	; (4b2c <Connect_scan+0x1bc>)
    49f8:	781b      	ldrb	r3, [r3, #0]
    49fa:	b1bb      	cbz	r3, 4a2c <Connect_scan+0xbc>
    49fc:	484c      	ldr	r0, [pc, #304]	; (4b30 <Connect_scan+0x1c0>)
    49fe:	f003 f8d3 	bl	7ba8 <_print>
    4a02:	2101      	movs	r1, #1
    4a04:	4620      	mov	r0, r4
    4a06:	f003 f971 	bl	7cec <printHex_op>
    4a0a:	484a      	ldr	r0, [pc, #296]	; (4b34 <Connect_scan+0x1c4>)
    4a0c:	f003 f8cc 	bl	7ba8 <_print>
    4a10:	2101      	movs	r1, #1
    4a12:	7830      	ldrb	r0, [r6, #0]
    4a14:	f003 f96a 	bl	7cec <printHex_op>
    4a18:	4846      	ldr	r0, [pc, #280]	; (4b34 <Connect_scan+0x1c4>)
    4a1a:	f003 f8c5 	bl	7ba8 <_print>
    4a1e:	78a8      	ldrb	r0, [r5, #2]
    4a20:	2101      	movs	r1, #1
    4a22:	f003 f963 	bl	7cec <printHex_op>
    4a26:	4844      	ldr	r0, [pc, #272]	; (4b38 <Connect_scan+0x1c8>)
    4a28:	f003 f8be 	bl	7ba8 <_print>
    4a2c:	7833      	ldrb	r3, [r6, #0]
    4a2e:	1ae4      	subs	r4, r4, r3
    4a30:	b2e4      	uxtb	r4, r4
    4a32:	2c00      	cmp	r4, #0
    4a34:	d0cd      	beq.n	49d2 <Connect_scan+0x62>
    4a36:	78aa      	ldrb	r2, [r5, #2]
    4a38:	4b39      	ldr	r3, [pc, #228]	; (4b20 <Connect_scan+0x1b0>)
    4a3a:	2a00      	cmp	r2, #0
    4a3c:	d0c9      	beq.n	49d2 <Connect_scan+0x62>
    4a3e:	7819      	ldrb	r1, [r3, #0]
    4a40:	1c48      	adds	r0, r1, #1
    4a42:	4419      	add	r1, r3
    4a44:	7018      	strb	r0, [r3, #0]
    4a46:	78c8      	ldrb	r0, [r1, #3]
    4a48:	493c      	ldr	r1, [pc, #240]	; (4b3c <Connect_scan+0x1cc>)
    4a4a:	3a01      	subs	r2, #1
    4a4c:	7008      	strb	r0, [r1, #0]
    4a4e:	709a      	strb	r2, [r3, #2]
    4a50:	f993 2000 	ldrsb.w	r2, [r3]
    4a54:	2a00      	cmp	r2, #0
    4a56:	bfbc      	itt	lt
    4a58:	2200      	movlt	r2, #0
    4a5a:	701a      	strblt	r2, [r3, #0]
    4a5c:	3c01      	subs	r4, #1
    4a5e:	e7e7      	b.n	4a30 <Connect_scan+0xc0>
		if ( uart_tx_buf[ 1 ].items > 0 && UART1_TCFIFO == 0 )
    4a60:	4e37      	ldr	r6, [pc, #220]	; (4b40 <Connect_scan+0x1d0>)
    4a62:	7833      	ldrb	r3, [r6, #0]
    4a64:	b13b      	cbz	r3, 4a76 <Connect_scan+0x106>
			uart_fillTxFifo( 1 );

		// Process Rx Buffers
		Connect_rx_process( 0 );
    4a66:	2000      	movs	r0, #0
    4a68:	f7ff fea6 	bl	47b8 <Connect_rx_process>
		Connect_rx_process( 1 );
    4a6c:	2001      	movs	r0, #1
	}
}
    4a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if ( uart_tx_buf[ 1 ].items > 0 && UART1_TCFIFO == 0 )
			uart_fillTxFifo( 1 );

		// Process Rx Buffers
		Connect_rx_process( 0 );
		Connect_rx_process( 1 );
    4a72:	f7ff bea1 	b.w	47b8 <Connect_rx_process>
		// Check if Tx Buffers are empty and the Tx Ring buffers have data to send
		// This happens if there was previously nothing to send
		if ( uart_tx_buf[ 0 ].items > 0 && UART0_TCFIFO == 0 )
			uart_fillTxFifo( 0 );
		if ( uart_tx_buf[ 1 ].items > 0 && UART1_TCFIFO == 0 )
			uart_fillTxFifo( 1 );
    4a76:	4b33      	ldr	r3, [pc, #204]	; (4b44 <Connect_scan+0x1d4>)
    4a78:	781b      	ldrb	r3, [r3, #0]
    4a7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
    4a7e:	109c      	asrs	r4, r3, #2
    4a80:	b10b      	cbz	r3, 4a86 <Connect_scan+0x116>
    4a82:	b2e4      	uxtb	r4, r4
    4a84:	e000      	b.n	4a88 <Connect_scan+0x118>
    4a86:	2401      	movs	r4, #1
    4a88:	4b28      	ldr	r3, [pc, #160]	; (4b2c <Connect_scan+0x1bc>)
    4a8a:	781b      	ldrb	r3, [r3, #0]
    4a8c:	b1c3      	cbz	r3, 4ac0 <Connect_scan+0x150>
    4a8e:	482e      	ldr	r0, [pc, #184]	; (4b48 <Connect_scan+0x1d8>)
    4a90:	f003 f88a 	bl	7ba8 <_print>
    4a94:	2101      	movs	r1, #1
    4a96:	4620      	mov	r0, r4
    4a98:	f003 f928 	bl	7cec <printHex_op>
    4a9c:	4825      	ldr	r0, [pc, #148]	; (4b34 <Connect_scan+0x1c4>)
    4a9e:	f003 f883 	bl	7ba8 <_print>
    4aa2:	2101      	movs	r1, #1
    4aa4:	7830      	ldrb	r0, [r6, #0]
    4aa6:	f003 f921 	bl	7cec <printHex_op>
    4aaa:	4822      	ldr	r0, [pc, #136]	; (4b34 <Connect_scan+0x1c4>)
    4aac:	f003 f87c 	bl	7ba8 <_print>
    4ab0:	f895 0085 	ldrb.w	r0, [r5, #133]	; 0x85
    4ab4:	2101      	movs	r1, #1
    4ab6:	f003 f919 	bl	7cec <printHex_op>
    4aba:	481f      	ldr	r0, [pc, #124]	; (4b38 <Connect_scan+0x1c8>)
    4abc:	f003 f874 	bl	7ba8 <_print>
    4ac0:	7833      	ldrb	r3, [r6, #0]
    4ac2:	1ae4      	subs	r4, r4, r3
    4ac4:	b2e4      	uxtb	r4, r4
    4ac6:	2c00      	cmp	r4, #0
    4ac8:	d0cd      	beq.n	4a66 <Connect_scan+0xf6>
    4aca:	f895 2085 	ldrb.w	r2, [r5, #133]	; 0x85
    4ace:	4b14      	ldr	r3, [pc, #80]	; (4b20 <Connect_scan+0x1b0>)
    4ad0:	2a00      	cmp	r2, #0
    4ad2:	d0c8      	beq.n	4a66 <Connect_scan+0xf6>
    4ad4:	f893 1083 	ldrb.w	r1, [r3, #131]	; 0x83
    4ad8:	1c48      	adds	r0, r1, #1
    4ada:	4419      	add	r1, r3
    4adc:	3a01      	subs	r2, #1
    4ade:	f891 6086 	ldrb.w	r6, [r1, #134]	; 0x86
    4ae2:	491a      	ldr	r1, [pc, #104]	; (4b4c <Connect_scan+0x1dc>)
    4ae4:	f883 0083 	strb.w	r0, [r3, #131]	; 0x83
    4ae8:	700e      	strb	r6, [r1, #0]
    4aea:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
    4aee:	0602      	lsls	r2, r0, #24
    4af0:	bf44      	itt	mi
    4af2:	2200      	movmi	r2, #0
    4af4:	f883 2083 	strbmi.w	r2, [r3, #131]	; 0x83
    4af8:	3c01      	subs	r4, #1
    4afa:	e7e3      	b.n	4ac4 <Connect_scan+0x154>
    4afc:	bd70      	pop	{r4, r5, r6, pc}
    4afe:	bf00      	nop
    4b00:	1fff91ba 	.word	0x1fff91ba
    4b04:	1fff9386 	.word	0x1fff9386
    4b08:	1fff91b9 	.word	0x1fff91b9
    4b0c:	1fff9184 	.word	0x1fff9184
    4b10:	1fff919c 	.word	0x1fff919c
    4b14:	1fff89c5 	.word	0x1fff89c5
    4b18:	1fff91a0 	.word	0x1fff91a0
    4b1c:	1fff91a1 	.word	0x1fff91a1
    4b20:	1fff9d9a 	.word	0x1fff9d9a
    4b24:	4006a014 	.word	0x4006a014
    4b28:	4006a010 	.word	0x4006a010
    4b2c:	1fff91b1 	.word	0x1fff91b1
    4b30:	000095df 	.word	0x000095df
    4b34:	00009280 	.word	0x00009280
    4b38:	0000bc21 	.word	0x0000bc21
    4b3c:	4006a007 	.word	0x4006a007
    4b40:	4006b014 	.word	0x4006b014
    4b44:	4006b010 	.word	0x4006b010
    4b48:	000095eb 	.word	0x000095eb
    4b4c:	4006b007 	.word	0x4006b007

00004b50 <Connect_currentChange>:
}


// Called by parent Scan module whenever the available current changes
void Connect_currentChange( unsigned int current )
{
    4b50:	4770      	bx	lr
    4b52:	0000      	movs	r0, r0

00004b54 <Scan_setup>:

// ----- Functions -----

// Setup
inline void Scan_setup()
{
    4b54:	b508      	push	{r3, lr}
	// Setup UART Connect, if Output_Available, this is the master node
	Connect_setup( Output_Available );
    4b56:	4b07      	ldr	r3, [pc, #28]	; (4b74 <Scan_setup+0x20>)
    4b58:	7818      	ldrb	r0, [r3, #0]
    4b5a:	f7ff fd4d 	bl	45f8 <Connect_setup>

	// Setup GPIO pins for matrix scanning
	Matrix_setup();
    4b5e:	f7fe fad9 	bl	3114 <Matrix_setup>

	// Setup ISSI chip to control the leds
	LED_setup();
    4b62:	f7fd ff75 	bl	2a50 <LED_setup>

	// Setup the ST/NHD lcd display
	LCD_setup();
    4b66:	f7fe fdf9 	bl	375c <LCD_setup>

	// Reset scan count
	Scan_scanCount = 0;
    4b6a:	4b03      	ldr	r3, [pc, #12]	; (4b78 <Scan_setup+0x24>)
    4b6c:	2200      	movs	r2, #0
    4b6e:	801a      	strh	r2, [r3, #0]
    4b70:	bd08      	pop	{r3, pc}
    4b72:	bf00      	nop
    4b74:	1fff9386 	.word	0x1fff9386
    4b78:	1fff91bc 	.word	0x1fff91bc

00004b7c <Scan_loop>:
}


// Main Detection Loop
inline uint8_t Scan_loop()
{
    4b7c:	b508      	push	{r3, lr}
	// Scan Matrix
	Matrix_scan( Scan_scanCount++ );
    4b7e:	4b07      	ldr	r3, [pc, #28]	; (4b9c <Scan_loop+0x20>)
    4b80:	8818      	ldrh	r0, [r3, #0]
    4b82:	1c42      	adds	r2, r0, #1
    4b84:	801a      	strh	r2, [r3, #0]
    4b86:	f7fe fb2d 	bl	31e4 <Matrix_scan>

	// Process any interconnect commands
	Connect_scan();
    4b8a:	f7ff fef1 	bl	4970 <Connect_scan>

	// Process any LED events
	LED_scan();
    4b8e:	f7fe f913 	bl	2db8 <LED_scan>

	// Process any LCD events
	LCD_scan();
    4b92:	f7fe fe6d 	bl	3870 <LCD_scan>

	return 0;
}
    4b96:	2000      	movs	r0, #0
    4b98:	bd08      	pop	{r3, pc}
    4b9a:	bf00      	nop
    4b9c:	1fff91bc 	.word	0x1fff91bc

00004ba0 <Scan_finishedWithMacro>:


// Signal from Macro Module that all keys have been processed (that it knows about)
inline void Scan_finishedWithMacro( uint8_t sentKeys )
{
    4ba0:	4770      	bx	lr
    4ba2:	0000      	movs	r0, r0

00004ba4 <Scan_finishedWithOutput>:
// Signal from Output Module that all keys have been processed (that it knows about)
inline void Scan_finishedWithOutput( uint8_t sentKeys )
{
	// Reset scan loop indicator (resets each key debounce state)
	// TODO should this occur after USB send or Macro processing?
	Scan_scanCount = 0;
    4ba4:	4b01      	ldr	r3, [pc, #4]	; (4bac <Scan_finishedWithOutput+0x8>)
    4ba6:	2200      	movs	r2, #0
    4ba8:	801a      	strh	r2, [r3, #0]
    4baa:	4770      	bx	lr
    4bac:	1fff91bc 	.word	0x1fff91bc

00004bb0 <Scan_currentChange>:


// Signal from the Output Module that the available current has changed
// current - mA
void Scan_currentChange( unsigned int current )
{
    4bb0:	b510      	push	{r4, lr}
    4bb2:	4604      	mov	r4, r0
	// Indicate to all submodules current change
	Connect_currentChange( current );
    4bb4:	f7ff ffcc 	bl	4b50 <Connect_currentChange>
	Matrix_currentChange( current );
    4bb8:	4620      	mov	r0, r4
    4bba:	f7fe fc79 	bl	34b0 <Matrix_currentChange>
	LED_currentChange( current );
    4bbe:	4620      	mov	r0, r4
    4bc0:	f7fe f90e 	bl	2de0 <LED_currentChange>
	LCD_currentChange( current );
    4bc4:	4620      	mov	r0, r4
}
    4bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
	// Indicate to all submodules current change
	Connect_currentChange( current );
	Matrix_currentChange( current );
	LED_currentChange( current );
	LCD_currentChange( current );
    4bca:	f7fe be53 	b.w	3874 <LCD_currentChange>
    4bce:	0000      	movs	r0, r0

00004bd0 <cliFunc_capList>:


// ----- CLI Command Functions -----

void cliFunc_capList( char* args )
{
    4bd0:	b510      	push	{r4, lr}
	print( NL );
    4bd2:	4810      	ldr	r0, [pc, #64]	; (4c14 <cliFunc_capList+0x44>)
    4bd4:	f002 ffe8 	bl	7ba8 <_print>
	info_msg("Capabilities List ");
    4bd8:	480f      	ldr	r0, [pc, #60]	; (4c18 <cliFunc_capList+0x48>)
    4bda:	f002 ffe5 	bl	7ba8 <_print>
	printHex( CapabilitiesNum );
    4bde:	2010      	movs	r0, #16
    4be0:	2101      	movs	r1, #1
    4be2:	f003 f883 	bl	7cec <printHex_op>
    4be6:	2400      	movs	r4, #0

	// Iterate through all of the capabilities and display them
	for ( var_uint_t cap = 0; cap < CapabilitiesNum; cap++ )
	{
		print( NL "\t" );
    4be8:	480c      	ldr	r0, [pc, #48]	; (4c1c <cliFunc_capList+0x4c>)
    4bea:	f002 ffdd 	bl	7ba8 <_print>
		printHex( cap );
    4bee:	b2a0      	uxth	r0, r4
    4bf0:	2101      	movs	r1, #1
    4bf2:	f003 f87b 	bl	7cec <printHex_op>
		print(" - ");
    4bf6:	480a      	ldr	r0, [pc, #40]	; (4c20 <cliFunc_capList+0x50>)
    4bf8:	f002 ffd6 	bl	7ba8 <_print>

		// Display/Lookup Capability Name (utilize debug mode of capability)
		void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
    4bfc:	4b09      	ldr	r3, [pc, #36]	; (4c24 <cliFunc_capList+0x54>)
		capability( 0xFF, 0xFF, 0 );
    4bfe:	20ff      	movs	r0, #255	; 0xff
    4c00:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
    4c04:	4601      	mov	r1, r0
    4c06:	2200      	movs	r2, #0
    4c08:	3401      	adds	r4, #1
    4c0a:	4798      	blx	r3
	print( NL );
	info_msg("Capabilities List ");
	printHex( CapabilitiesNum );

	// Iterate through all of the capabilities and display them
	for ( var_uint_t cap = 0; cap < CapabilitiesNum; cap++ )
    4c0c:	2c10      	cmp	r4, #16
    4c0e:	d1eb      	bne.n	4be8 <cliFunc_capList+0x18>

		// Display/Lookup Capability Name (utilize debug mode of capability)
		void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
		capability( 0xFF, 0xFF, 0 );
	}
}
    4c10:	bd10      	pop	{r4, pc}
    4c12:	bf00      	nop
    4c14:	0000bc21 	.word	0x0000bc21
    4c18:	0000aae1 	.word	0x0000aae1
    4c1c:	0000ab06 	.word	0x0000ab06
    4c20:	000095e7 	.word	0x000095e7
    4c24:	00009ef8 	.word	0x00009ef8

00004c28 <cliFunc_macroStep>:
		}
	}
}

void cliFunc_macroStep( char* args )
{
    4c28:	b507      	push	{r0, r1, r2, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    4c2a:	4669      	mov	r1, sp
    4c2c:	aa01      	add	r2, sp, #4
    4c2e:	f002 fcf3 	bl	7618 <CLI_argumentIsolation>

	// Default to 1, if no argument given
	var_uint_t count = (var_uint_t)numToInt( arg1Ptr );
    4c32:	9800      	ldr	r0, [sp, #0]
    4c34:	f003 f8b2 	bl	7d9c <numToInt>
    4c38:	b2c0      	uxtb	r0, r0

	if ( count == 0 )
    4c3a:	2800      	cmp	r0, #0
		count = 1;

	// Set the macro step counter, negative int's are cast to uint
	macroStepCounter = count;
    4c3c:	4b03      	ldr	r3, [pc, #12]	; (4c4c <cliFunc_macroStep+0x24>)

	// Default to 1, if no argument given
	var_uint_t count = (var_uint_t)numToInt( arg1Ptr );

	if ( count == 0 )
		count = 1;
    4c3e:	bf08      	it	eq
    4c40:	2001      	moveq	r0, #1

	// Set the macro step counter, negative int's are cast to uint
	macroStepCounter = count;
    4c42:	8018      	strh	r0, [r3, #0]
}
    4c44:	b003      	add	sp, #12
    4c46:	f85d fb04 	ldr.w	pc, [sp], #4
    4c4a:	bf00      	nop
    4c4c:	1fff91be 	.word	0x1fff91be

00004c50 <cliFunc_capSelect>:
		capability( 0xFF, 0xFF, 0 );
	}
}

void cliFunc_capSelect( char* args )
{
    4c50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	// Parse code from argument
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    4c54:	2700      	movs	r7, #0
		capability( 0xFF, 0xFF, 0 );
	}
}

void cliFunc_capSelect( char* args )
{
    4c56:	4604      	mov	r4, r0
	// Parse code from argument
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    4c58:	9001      	str	r0, [sp, #4]
	// Total number of args to scan (must do a lookup if a keyboard capability is selected)
	var_uint_t totalArgs = 2; // Always at least two args
	var_uint_t cap = 0;

	// Arguments used for keyboard capability function
	var_uint_t argSetCount = 0;
    4c5a:	46b9      	mov	r9, r7
	char* arg1Ptr;
	char* arg2Ptr = args;

	// Total number of args to scan (must do a lookup if a keyboard capability is selected)
	var_uint_t totalArgs = 2; // Always at least two args
	var_uint_t cap = 0;
    4c5c:	46b8      	mov	r8, r7
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;

	// Total number of args to scan (must do a lookup if a keyboard capability is selected)
	var_uint_t totalArgs = 2; // Always at least two args
    4c5e:	2602      	movs	r6, #2

	// Process all args
	for ( var_uint_t c = 0; argSetCount < totalArgs; c++ )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    4c60:	9801      	ldr	r0, [sp, #4]
    4c62:	4669      	mov	r1, sp
    4c64:	aa01      	add	r2, sp, #4
    4c66:	f002 fcd7 	bl	7618 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		// Extra arguments are ignored
		if ( *arg1Ptr == '\0' )
    4c6a:	9800      	ldr	r0, [sp, #0]
    4c6c:	7803      	ldrb	r3, [r0, #0]
    4c6e:	2b00      	cmp	r3, #0
    4c70:	d05c      	beq.n	4d2c <cliFunc_capSelect+0xdc>
			break;

		// For the first argument, choose the capability
		if ( c == 0 ) switch ( arg1Ptr[0] )
    4c72:	f017 0fff 	tst.w	r7, #255	; 0xff
    4c76:	d10e      	bne.n	4c96 <cliFunc_capSelect+0x46>
    4c78:	2b4b      	cmp	r3, #75	; 0x4b
    4c7a:	d10c      	bne.n	4c96 <cliFunc_capSelect+0x46>
		{
		// Keyboard Capability
		case 'K':
			// Determine capability index
			cap = numToInt( &arg1Ptr[1] );
    4c7c:	3001      	adds	r0, #1
    4c7e:	f003 f88d 	bl	7d9c <numToInt>

			// Lookup the number of args
			totalArgs += CapabilitiesList[ cap ].argCount;
    4c82:	4b2c      	ldr	r3, [pc, #176]	; (4d34 <cliFunc_capSelect+0xe4>)
		if ( c == 0 ) switch ( arg1Ptr[0] )
		{
		// Keyboard Capability
		case 'K':
			// Determine capability index
			cap = numToInt( &arg1Ptr[1] );
    4c84:	fa5f f880 	uxtb.w	r8, r0

			// Lookup the number of args
			totalArgs += CapabilitiesList[ cap ].argCount;
    4c88:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
			continue;
    4c8c:	464d      	mov	r5, r9
		case 'K':
			// Determine capability index
			cap = numToInt( &arg1Ptr[1] );

			// Lookup the number of args
			totalArgs += CapabilitiesList[ cap ].argCount;
    4c8e:	791b      	ldrb	r3, [r3, #4]
    4c90:	441e      	add	r6, r3
    4c92:	b2f6      	uxtb	r6, r6
			continue;
    4c94:	e044      	b.n	4d20 <cliFunc_capSelect+0xd0>
		}

		// Because allocating memory isn't doable, and the argument count is arbitrary
		// The argument pointer is repurposed as the argument list (much smaller anyways)
		argSet[ argSetCount++ ] = (uint8_t)numToInt( arg1Ptr );
    4c96:	f003 f881 	bl	7d9c <numToInt>
    4c9a:	f109 0501 	add.w	r5, r9, #1
    4c9e:	b2ed      	uxtb	r5, r5

		// Once all the arguments are prepared, call the keyboard capability function
		if ( argSetCount == totalArgs )
    4ca0:	42b5      	cmp	r5, r6
			continue;
		}

		// Because allocating memory isn't doable, and the argument count is arbitrary
		// The argument pointer is repurposed as the argument list (much smaller anyways)
		argSet[ argSetCount++ ] = (uint8_t)numToInt( arg1Ptr );
    4ca2:	f804 0009 	strb.w	r0, [r4, r9]

		// Once all the arguments are prepared, call the keyboard capability function
		if ( argSetCount == totalArgs )
    4ca6:	d13b      	bne.n	4d20 <cliFunc_capSelect+0xd0>
		{
			// Indicate that the capability was called
			print( NL );
    4ca8:	4823      	ldr	r0, [pc, #140]	; (4d38 <cliFunc_capSelect+0xe8>)
    4caa:	f002 ff7d 	bl	7ba8 <_print>
			info_msg("K");
    4cae:	4823      	ldr	r0, [pc, #140]	; (4d3c <cliFunc_capSelect+0xec>)
    4cb0:	f002 ff7a 	bl	7ba8 <_print>
			printInt8( cap );
    4cb4:	4640      	mov	r0, r8
    4cb6:	f002 ffa6 	bl	7c06 <printInt8>
			print(" - ");
    4cba:	4821      	ldr	r0, [pc, #132]	; (4d40 <cliFunc_capSelect+0xf0>)
    4cbc:	f002 ff74 	bl	7ba8 <_print>
			printHex( argSet[0] );
    4cc0:	2101      	movs	r1, #1
    4cc2:	7820      	ldrb	r0, [r4, #0]
    4cc4:	f003 f812 	bl	7cec <printHex_op>
			print(" - ");
    4cc8:	481d      	ldr	r0, [pc, #116]	; (4d40 <cliFunc_capSelect+0xf0>)
    4cca:	f002 ff6d 	bl	7ba8 <_print>
			printHex( argSet[1] );
    4cce:	2101      	movs	r1, #1
    4cd0:	7860      	ldrb	r0, [r4, #1]
    4cd2:	f003 f80b 	bl	7cec <printHex_op>
			print(" - ");
    4cd6:	481a      	ldr	r0, [pc, #104]	; (4d40 <cliFunc_capSelect+0xf0>)
    4cd8:	f002 ff66 	bl	7ba8 <_print>
			printHex( argSet[2] );
    4cdc:	78a0      	ldrb	r0, [r4, #2]
    4cde:	2101      	movs	r1, #1
    4ce0:	f003 f804 	bl	7cec <printHex_op>
			print( "..." NL );
    4ce4:	4817      	ldr	r0, [pc, #92]	; (4d44 <cliFunc_capSelect+0xf4>)
    4ce6:	f002 ff5f 	bl	7ba8 <_print>

			// Make sure this isn't the reload capability
			// If it is, and the remote reflash define is not set, ignore
			if ( flashModeEnabled_define == 0 ) for ( uint32_t cap = 0; cap < CapabilitiesNum; cap++ )
    4cea:	2300      	movs	r3, #0
			{
				if ( CapabilitiesList[ cap ].func == (const void*)Output_flashMode_capability )
    4cec:	4a11      	ldr	r2, [pc, #68]	; (4d34 <cliFunc_capSelect+0xe4>)
    4cee:	4916      	ldr	r1, [pc, #88]	; (4d48 <cliFunc_capSelect+0xf8>)
    4cf0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
    4cf4:	4288      	cmp	r0, r1
    4cf6:	d109      	bne.n	4d0c <cliFunc_capSelect+0xbc>
				{
					print( NL );
    4cf8:	480f      	ldr	r0, [pc, #60]	; (4d38 <cliFunc_capSelect+0xe8>)
    4cfa:	f002 ff55 	bl	7ba8 <_print>
					warn_print("flashModeEnabled not set, cancelling firmware reload...");
    4cfe:	4813      	ldr	r0, [pc, #76]	; (4d4c <cliFunc_capSelect+0xfc>)
    4d00:	f002 ff52 	bl	7ba8 <_print>
					info_msg("Set flashModeEnabled to 1 in your kll configuration.");
    4d04:	4812      	ldr	r0, [pc, #72]	; (4d50 <cliFunc_capSelect+0x100>)
    4d06:	f002 ff4f 	bl	7ba8 <_print>
    4d0a:	e00f      	b.n	4d2c <cliFunc_capSelect+0xdc>
			printHex( argSet[2] );
			print( "..." NL );

			// Make sure this isn't the reload capability
			// If it is, and the remote reflash define is not set, ignore
			if ( flashModeEnabled_define == 0 ) for ( uint32_t cap = 0; cap < CapabilitiesNum; cap++ )
    4d0c:	3301      	adds	r3, #1
    4d0e:	2b10      	cmp	r3, #16
    4d10:	d1ec      	bne.n	4cec <cliFunc_capSelect+0x9c>
					return;
				}
			}

			void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
			capability( argSet[0], argSet[1], &argSet[2] );
    4d12:	f852 3038 	ldr.w	r3, [r2, r8, lsl #3]
    4d16:	7820      	ldrb	r0, [r4, #0]
    4d18:	7861      	ldrb	r1, [r4, #1]
    4d1a:	1ca2      	adds	r2, r4, #2
    4d1c:	4798      	blx	r3
    4d1e:	462e      	mov	r6, r5
	// Arguments used for keyboard capability function
	var_uint_t argSetCount = 0;
	uint8_t *argSet = (uint8_t*)args;

	// Process all args
	for ( var_uint_t c = 0; argSetCount < totalArgs; c++ )
    4d20:	42b5      	cmp	r5, r6
    4d22:	f107 0701 	add.w	r7, r7, #1
    4d26:	d201      	bcs.n	4d2c <cliFunc_capSelect+0xdc>
    4d28:	46a9      	mov	r9, r5
    4d2a:	e799      	b.n	4c60 <cliFunc_capSelect+0x10>

			void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ cap ].func);
			capability( argSet[0], argSet[1], &argSet[2] );
		}
	}
}
    4d2c:	b003      	add	sp, #12
    4d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4d32:	bf00      	nop
    4d34:	00009ef8 	.word	0x00009ef8
    4d38:	0000bc21 	.word	0x0000bc21
    4d3c:	0000ab0a 	.word	0x0000ab0a
    4d40:	000095e7 	.word	0x000095e7
    4d44:	0000ab67 	.word	0x0000ab67
    4d48:	00005f61 	.word	0x00005f61
    4d4c:	0000ab1e 	.word	0x0000ab1e
    4d50:	0000ab6d 	.word	0x0000ab6d

00004d54 <cliFunc_layerDebug>:
		}
	}
}

void cliFunc_layerDebug( char *args )
{
    4d54:	b510      	push	{r4, lr}
	// Toggle layer debug mode
	layerDebugMode = layerDebugMode ? 0 : 1;
    4d56:	4c08      	ldr	r4, [pc, #32]	; (4d78 <cliFunc_layerDebug+0x24>)

	print( NL );
    4d58:	4808      	ldr	r0, [pc, #32]	; (4d7c <cliFunc_layerDebug+0x28>)
}

void cliFunc_layerDebug( char *args )
{
	// Toggle layer debug mode
	layerDebugMode = layerDebugMode ? 0 : 1;
    4d5a:	7823      	ldrb	r3, [r4, #0]
    4d5c:	fab3 f383 	clz	r3, r3
    4d60:	095b      	lsrs	r3, r3, #5
    4d62:	7023      	strb	r3, [r4, #0]

	print( NL );
    4d64:	f002 ff20 	bl	7ba8 <_print>
	info_msg("Layer Debug Mode: ");
    4d68:	4805      	ldr	r0, [pc, #20]	; (4d80 <cliFunc_layerDebug+0x2c>)
    4d6a:	f002 ff1d 	bl	7ba8 <_print>
	printInt8( layerDebugMode );
    4d6e:	7820      	ldrb	r0, [r4, #0]
}
    4d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Toggle layer debug mode
	layerDebugMode = layerDebugMode ? 0 : 1;

	print( NL );
	info_msg("Layer Debug Mode: ");
	printInt8( layerDebugMode );
    4d74:	f002 bf47 	b.w	7c06 <printInt8>
    4d78:	1fff91cf 	.word	0x1fff91cf
    4d7c:	0000bc21 	.word	0x0000bc21
    4d80:	0000abb4 	.word	0x0000abb4

00004d84 <cliFunc_layerState>:
		printHex( LayerIndex[ layer ].last );
	}
}

void cliFunc_layerState( char* args )
{
    4d84:	b573      	push	{r0, r1, r4, r5, r6, lr}

	uint8_t arg1 = 0;
	uint8_t arg2 = 0;

	// Process first two args
	for ( uint8_t c = 0; c < 2; c++ )
    4d86:	2400      	movs	r4, #0
void cliFunc_layerState( char* args )
{
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    4d88:	9001      	str	r0, [sp, #4]

	uint8_t arg1 = 0;
    4d8a:	4625      	mov	r5, r4

	// Process first two args
	for ( uint8_t c = 0; c < 2; c++ )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    4d8c:	9801      	ldr	r0, [sp, #4]
    4d8e:	4669      	mov	r1, sp
    4d90:	aa01      	add	r2, sp, #4
    4d92:	f002 fc41 	bl	7618 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    4d96:	9800      	ldr	r0, [sp, #0]
    4d98:	7803      	ldrb	r3, [r0, #0]
    4d9a:	b1eb      	cbz	r3, 4dd8 <cliFunc_layerState+0x54>
			break;

		switch ( c )
    4d9c:	b93c      	cbnz	r4, 4dae <cliFunc_layerState+0x2a>
		{
		// First argument (e.g. L1)
		case 0:
			if ( arg1Ptr[0] != 'L' )
    4d9e:	2b4c      	cmp	r3, #76	; 0x4c
    4da0:	d11a      	bne.n	4dd8 <cliFunc_layerState+0x54>
				return;

			arg1 = (uint8_t)numToInt( &arg1Ptr[1] );
    4da2:	3001      	adds	r0, #1
    4da4:	f002 fffa 	bl	7d9c <numToInt>
    4da8:	2401      	movs	r4, #1
    4daa:	b2c5      	uxtb	r5, r0
    4dac:	e7ee      	b.n	4d8c <cliFunc_layerState+0x8>
			break;
		// Second argument (e.g. 4)
		case 1:
			arg2 = (uint8_t)numToInt( arg1Ptr );
    4dae:	f002 fff5 	bl	7d9c <numToInt>
    4db2:	b2c6      	uxtb	r6, r0

			// Display operation (to indicate that it worked)
			print( NL );
    4db4:	4809      	ldr	r0, [pc, #36]	; (4ddc <cliFunc_layerState+0x58>)
    4db6:	f002 fef7 	bl	7ba8 <_print>
			info_msg("Setting Layer L");
    4dba:	4809      	ldr	r0, [pc, #36]	; (4de0 <cliFunc_layerState+0x5c>)
    4dbc:	f002 fef4 	bl	7ba8 <_print>
			printInt8( arg1 );
    4dc0:	4628      	mov	r0, r5
    4dc2:	f002 ff20 	bl	7c06 <printInt8>
			print(" to - ");
    4dc6:	4807      	ldr	r0, [pc, #28]	; (4de4 <cliFunc_layerState+0x60>)
    4dc8:	f002 feee 	bl	7ba8 <_print>
			printHex( arg2 );
    4dcc:	4630      	mov	r0, r6
    4dce:	4621      	mov	r1, r4
    4dd0:	f002 ff8c 	bl	7cec <printHex_op>

			// Set the layer state
			LayerState[ arg1 ] = arg2;
    4dd4:	4b04      	ldr	r3, [pc, #16]	; (4de8 <cliFunc_layerState+0x64>)
    4dd6:	555e      	strb	r6, [r3, r5]
			break;
		}
	}
}
    4dd8:	b002      	add	sp, #8
    4dda:	bd70      	pop	{r4, r5, r6, pc}
    4ddc:	0000bc21 	.word	0x0000bc21
    4de0:	0000abd9 	.word	0x0000abd9
    4de4:	0000abfb 	.word	0x0000abfb
    4de8:	1fffa207 	.word	0x1fffa207

00004dec <cliFunc_macroDebug>:

void cliFunc_macroDebug( char* args )
{
    4dec:	b510      	push	{r4, lr}
	// Toggle macro debug mode
	macroDebugMode = macroDebugMode ? 0 : 1;
    4dee:	4c08      	ldr	r4, [pc, #32]	; (4e10 <cliFunc_macroDebug+0x24>)

	print( NL );
    4df0:	4808      	ldr	r0, [pc, #32]	; (4e14 <cliFunc_macroDebug+0x28>)
}

void cliFunc_macroDebug( char* args )
{
	// Toggle macro debug mode
	macroDebugMode = macroDebugMode ? 0 : 1;
    4df2:	7823      	ldrb	r3, [r4, #0]
    4df4:	fab3 f383 	clz	r3, r3
    4df8:	095b      	lsrs	r3, r3, #5
    4dfa:	7023      	strb	r3, [r4, #0]

	print( NL );
    4dfc:	f002 fed4 	bl	7ba8 <_print>
	info_msg("Macro Debug Mode: ");
    4e00:	4805      	ldr	r0, [pc, #20]	; (4e18 <cliFunc_macroDebug+0x2c>)
    4e02:	f002 fed1 	bl	7ba8 <_print>
	printInt8( macroDebugMode );
    4e06:	7820      	ldrb	r0, [r4, #0]
}
    4e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Toggle macro debug mode
	macroDebugMode = macroDebugMode ? 0 : 1;

	print( NL );
	info_msg("Macro Debug Mode: ");
	printInt8( macroDebugMode );
    4e0c:	f002 befb 	b.w	7c06 <printInt8>
    4e10:	1fff91d0 	.word	0x1fff91d0
    4e14:	0000bc21 	.word	0x0000bc21
    4e18:	0000ac02 	.word	0x0000ac02

00004e1c <cliFunc_macroProc>:
		printInt16( (uint16_t)TriggerMacroList[ macro ].result ); // Hopefully large enough :P (can't assume 32-bit)
	}
}

void cliFunc_macroProc( char* args )
{
    4e1c:	b510      	push	{r4, lr}
	// Toggle macro pause mode
	macroPauseMode = macroPauseMode ? 0 : 1;
    4e1e:	4c08      	ldr	r4, [pc, #32]	; (4e40 <cliFunc_macroProc+0x24>)

	print( NL );
    4e20:	4808      	ldr	r0, [pc, #32]	; (4e44 <cliFunc_macroProc+0x28>)
}

void cliFunc_macroProc( char* args )
{
	// Toggle macro pause mode
	macroPauseMode = macroPauseMode ? 0 : 1;
    4e22:	7823      	ldrb	r3, [r4, #0]
    4e24:	fab3 f383 	clz	r3, r3
    4e28:	095b      	lsrs	r3, r3, #5
    4e2a:	7023      	strb	r3, [r4, #0]

	print( NL );
    4e2c:	f002 febc 	bl	7ba8 <_print>
	info_msg("Macro Processing Mode: ");
    4e30:	4805      	ldr	r0, [pc, #20]	; (4e48 <cliFunc_macroProc+0x2c>)
    4e32:	f002 feb9 	bl	7ba8 <_print>
	printInt8( macroPauseMode );
    4e36:	7820      	ldrb	r0, [r4, #0]
}
    4e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Toggle macro pause mode
	macroPauseMode = macroPauseMode ? 0 : 1;

	print( NL );
	info_msg("Macro Processing Mode: ");
	printInt8( macroPauseMode );
    4e3c:	f002 bee3 	b.w	7c06 <printInt8>
    4e40:	1fff91c4 	.word	0x1fff91c4
    4e44:	0000bc21 	.word	0x0000bc21
    4e48:	0000ac27 	.word	0x0000ac27

00004e4c <cliFunc_layerList>:
	info_msg("Layer Debug Mode: ");
	printInt8( layerDebugMode );
}

void cliFunc_layerList( char* args )
{
    4e4c:	b538      	push	{r3, r4, r5, lr}
	print( NL );
    4e4e:	481a      	ldr	r0, [pc, #104]	; (4eb8 <cliFunc_layerList+0x6c>)
    4e50:	4d1a      	ldr	r5, [pc, #104]	; (4ebc <cliFunc_layerList+0x70>)
    4e52:	f002 fea9 	bl	7ba8 <_print>
	info_msg("Layer List");
    4e56:	481a      	ldr	r0, [pc, #104]	; (4ec0 <cliFunc_layerList+0x74>)
    4e58:	f002 fea6 	bl	7ba8 <_print>
    4e5c:	2400      	movs	r4, #0

	// Iterate through all of the layers and display them
	for ( uint16_t layer = 0; layer < LayerNum; layer++ )
	{
		print( NL "\t" );
    4e5e:	4819      	ldr	r0, [pc, #100]	; (4ec4 <cliFunc_layerList+0x78>)
    4e60:	f002 fea2 	bl	7ba8 <_print>
		printHex( layer );
    4e64:	b2a0      	uxth	r0, r4
    4e66:	2101      	movs	r1, #1
    4e68:	f002 ff40 	bl	7cec <printHex_op>
		print(" - ");
    4e6c:	4816      	ldr	r0, [pc, #88]	; (4ec8 <cliFunc_layerList+0x7c>)
    4e6e:	f002 fe9b 	bl	7ba8 <_print>

		// Display layer name
		dPrint( (char*)LayerIndex[ layer ].name );
    4e72:	6868      	ldr	r0, [r5, #4]
    4e74:	f001 fa3e 	bl	62f4 <Output_putstr>

		// Default map
		if ( layer == 0 )
    4e78:	b914      	cbnz	r4, 4e80 <cliFunc_layerList+0x34>
			print(" \033[1m(default)\033[0m");
    4e7a:	4814      	ldr	r0, [pc, #80]	; (4ecc <cliFunc_layerList+0x80>)
    4e7c:	f002 fe94 	bl	7ba8 <_print>

		// Layer State
		print( NL "\t\t Layer State: " );
    4e80:	4813      	ldr	r0, [pc, #76]	; (4ed0 <cliFunc_layerList+0x84>)
    4e82:	f002 fe91 	bl	7ba8 <_print>
		printHex( LayerState[ layer ] );
    4e86:	4b13      	ldr	r3, [pc, #76]	; (4ed4 <cliFunc_layerList+0x88>)
    4e88:	2101      	movs	r1, #1
    4e8a:	5d18      	ldrb	r0, [r3, r4]
    4e8c:	f002 ff2e 	bl	7cec <printHex_op>

		// First -> Last Indices
		print(" First -> Last Indices: ");
    4e90:	4811      	ldr	r0, [pc, #68]	; (4ed8 <cliFunc_layerList+0x8c>)
    4e92:	f002 fe89 	bl	7ba8 <_print>
		printHex( LayerIndex[ layer ].first );
    4e96:	7a28      	ldrb	r0, [r5, #8]
    4e98:	2101      	movs	r1, #1
    4e9a:	f002 ff27 	bl	7cec <printHex_op>
		print(" -> ");
    4e9e:	480f      	ldr	r0, [pc, #60]	; (4edc <cliFunc_layerList+0x90>)
    4ea0:	f002 fe82 	bl	7ba8 <_print>
    4ea4:	3401      	adds	r4, #1
		printHex( LayerIndex[ layer ].last );
    4ea6:	7a68      	ldrb	r0, [r5, #9]
    4ea8:	2101      	movs	r1, #1
    4eaa:	f002 ff1f 	bl	7cec <printHex_op>
{
	print( NL );
	info_msg("Layer List");

	// Iterate through all of the layers and display them
	for ( uint16_t layer = 0; layer < LayerNum; layer++ )
    4eae:	2c03      	cmp	r4, #3
    4eb0:	f105 050c 	add.w	r5, r5, #12
    4eb4:	d1d3      	bne.n	4e5e <cliFunc_layerList+0x12>
		print(" First -> Last Indices: ");
		printHex( LayerIndex[ layer ].first );
		print(" -> ");
		printHex( LayerIndex[ layer ].last );
	}
}
    4eb6:	bd38      	pop	{r3, r4, r5, pc}
    4eb8:	0000bc21 	.word	0x0000bc21
    4ebc:	0000a68c 	.word	0x0000a68c
    4ec0:	0000ac51 	.word	0x0000ac51
    4ec4:	0000ab06 	.word	0x0000ab06
    4ec8:	000095e7 	.word	0x000095e7
    4ecc:	0000ac6e 	.word	0x0000ac6e
    4ed0:	0000ac81 	.word	0x0000ac81
    4ed4:	1fffa207 	.word	0x1fffa207
    4ed8:	0000ac94 	.word	0x0000ac94
    4edc:	00009170 	.word	0x00009170

00004ee0 <cliFunc_macroList>:
	info_msg("Macro Debug Mode: ");
	printInt8( macroDebugMode );
}

void cliFunc_macroList( char* args )
{
    4ee0:	b538      	push	{r3, r4, r5, lr}
	// Show pending key events
	print( NL );
    4ee2:	4845      	ldr	r0, [pc, #276]	; (4ff8 <cliFunc_macroList+0x118>)
	info_msg("Pending Key Events: ");
	printInt16( (uint16_t)macroTriggerListBufferSize );
    4ee4:	4c45      	ldr	r4, [pc, #276]	; (4ffc <cliFunc_macroList+0x11c>)
}

void cliFunc_macroList( char* args )
{
	// Show pending key events
	print( NL );
    4ee6:	f002 fe5f 	bl	7ba8 <_print>
	info_msg("Pending Key Events: ");
    4eea:	4845      	ldr	r0, [pc, #276]	; (5000 <cliFunc_macroList+0x120>)
    4eec:	f002 fe5c 	bl	7ba8 <_print>
	printInt16( (uint16_t)macroTriggerListBufferSize );
    4ef0:	7820      	ldrb	r0, [r4, #0]
    4ef2:	f002 fea6 	bl	7c42 <printInt16>
	print(" : ");
    4ef6:	4843      	ldr	r0, [pc, #268]	; (5004 <cliFunc_macroList+0x124>)
    4ef8:	f002 fe56 	bl	7ba8 <_print>
	for ( var_uint_t key = 0; key < macroTriggerListBufferSize; key++ )
    4efc:	2300      	movs	r3, #0
    4efe:	7822      	ldrb	r2, [r4, #0]
    4f00:	1c5d      	adds	r5, r3, #1
    4f02:	b2db      	uxtb	r3, r3
    4f04:	429a      	cmp	r2, r3
    4f06:	d90c      	bls.n	4f22 <cliFunc_macroList+0x42>
	{
		printHex( macroTriggerListBuffer[ key ].scanCode );
    4f08:	4a3f      	ldr	r2, [pc, #252]	; (5008 <cliFunc_macroList+0x128>)
    4f0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4f0e:	4413      	add	r3, r2
    4f10:	2101      	movs	r1, #1
    4f12:	7898      	ldrb	r0, [r3, #2]
    4f14:	f002 feea 	bl	7cec <printHex_op>
		print(" ");
    4f18:	483c      	ldr	r0, [pc, #240]	; (500c <cliFunc_macroList+0x12c>)
    4f1a:	f002 fe45 	bl	7ba8 <_print>
    4f1e:	462b      	mov	r3, r5
    4f20:	e7ed      	b.n	4efe <cliFunc_macroList+0x1e>
	}

	// Show pending trigger macros
	print( NL );
    4f22:	4835      	ldr	r0, [pc, #212]	; (4ff8 <cliFunc_macroList+0x118>)
	info_msg("Pending Trigger Macros: ");
	printInt16( (uint16_t)macroTriggerMacroPendingListSize );
    4f24:	4c3a      	ldr	r4, [pc, #232]	; (5010 <cliFunc_macroList+0x130>)
		printHex( macroTriggerListBuffer[ key ].scanCode );
		print(" ");
	}

	// Show pending trigger macros
	print( NL );
    4f26:	f002 fe3f 	bl	7ba8 <_print>
	info_msg("Pending Trigger Macros: ");
    4f2a:	483a      	ldr	r0, [pc, #232]	; (5014 <cliFunc_macroList+0x134>)
    4f2c:	f002 fe3c 	bl	7ba8 <_print>
	printInt16( (uint16_t)macroTriggerMacroPendingListSize );
    4f30:	8820      	ldrh	r0, [r4, #0]
    4f32:	f002 fe86 	bl	7c42 <printInt16>
	print(" : ");
    4f36:	4833      	ldr	r0, [pc, #204]	; (5004 <cliFunc_macroList+0x124>)
    4f38:	f002 fe36 	bl	7ba8 <_print>
	for ( var_uint_t macro = 0; macro < macroTriggerMacroPendingListSize; macro++ )
    4f3c:	2300      	movs	r3, #0
    4f3e:	8822      	ldrh	r2, [r4, #0]
    4f40:	1c5d      	adds	r5, r3, #1
    4f42:	b2db      	uxtb	r3, r3
    4f44:	4293      	cmp	r3, r2
    4f46:	d20a      	bcs.n	4f5e <cliFunc_macroList+0x7e>
	{
		printHex( macroTriggerMacroPendingList[ macro ] );
    4f48:	4a33      	ldr	r2, [pc, #204]	; (5018 <cliFunc_macroList+0x138>)
    4f4a:	2101      	movs	r1, #1
    4f4c:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
    4f50:	f002 fecc 	bl	7cec <printHex_op>
		print(" ");
    4f54:	482d      	ldr	r0, [pc, #180]	; (500c <cliFunc_macroList+0x12c>)
    4f56:	f002 fe27 	bl	7ba8 <_print>
    4f5a:	462b      	mov	r3, r5
    4f5c:	e7ef      	b.n	4f3e <cliFunc_macroList+0x5e>
	}

	// Show pending result macros
	print( NL );
    4f5e:	4826      	ldr	r0, [pc, #152]	; (4ff8 <cliFunc_macroList+0x118>)
	info_msg("Pending Result Macros: ");
	printInt16( (uint16_t)macroResultMacroPendingListSize );
    4f60:	4c2e      	ldr	r4, [pc, #184]	; (501c <cliFunc_macroList+0x13c>)
		printHex( macroTriggerMacroPendingList[ macro ] );
		print(" ");
	}

	// Show pending result macros
	print( NL );
    4f62:	f002 fe21 	bl	7ba8 <_print>
	info_msg("Pending Result Macros: ");
    4f66:	482e      	ldr	r0, [pc, #184]	; (5020 <cliFunc_macroList+0x140>)
    4f68:	f002 fe1e 	bl	7ba8 <_print>
	printInt16( (uint16_t)macroResultMacroPendingListSize );
    4f6c:	8820      	ldrh	r0, [r4, #0]
    4f6e:	f002 fe68 	bl	7c42 <printInt16>
	print(" : ");
    4f72:	4824      	ldr	r0, [pc, #144]	; (5004 <cliFunc_macroList+0x124>)
    4f74:	f002 fe18 	bl	7ba8 <_print>
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    4f78:	2300      	movs	r3, #0
    4f7a:	8822      	ldrh	r2, [r4, #0]
    4f7c:	1c5d      	adds	r5, r3, #1
    4f7e:	b2db      	uxtb	r3, r3
    4f80:	4293      	cmp	r3, r2
    4f82:	d20a      	bcs.n	4f9a <cliFunc_macroList+0xba>
	{
		printHex( macroResultMacroPendingList[ macro ] );
    4f84:	4a27      	ldr	r2, [pc, #156]	; (5024 <cliFunc_macroList+0x144>)
    4f86:	2101      	movs	r1, #1
    4f88:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
    4f8c:	f002 feae 	bl	7cec <printHex_op>
		print(" ");
    4f90:	481e      	ldr	r0, [pc, #120]	; (500c <cliFunc_macroList+0x12c>)
    4f92:	f002 fe09 	bl	7ba8 <_print>
    4f96:	462b      	mov	r3, r5
    4f98:	e7ef      	b.n	4f7a <cliFunc_macroList+0x9a>
	}

	// Show available trigger macro indices
	print( NL );
    4f9a:	4817      	ldr	r0, [pc, #92]	; (4ff8 <cliFunc_macroList+0x118>)
    4f9c:	f002 fe04 	bl	7ba8 <_print>
	info_msg("Trigger Macros Range: T0 -> T");
    4fa0:	4821      	ldr	r0, [pc, #132]	; (5028 <cliFunc_macroList+0x148>)
    4fa2:	f002 fe01 	bl	7ba8 <_print>
	printInt16( (uint16_t)TriggerMacroNum - 1 ); // Hopefully large enough :P (can't assume 32-bit)
    4fa6:	206c      	movs	r0, #108	; 0x6c
    4fa8:	f002 fe4b 	bl	7c42 <printInt16>

	// Show available result macro indices
	print( NL );
    4fac:	4812      	ldr	r0, [pc, #72]	; (4ff8 <cliFunc_macroList+0x118>)
    4fae:	f002 fdfb 	bl	7ba8 <_print>
	info_msg("Result  Macros Range: R0 -> R");
    4fb2:	481e      	ldr	r0, [pc, #120]	; (502c <cliFunc_macroList+0x14c>)
    4fb4:	f002 fdf8 	bl	7ba8 <_print>
	printInt16( (uint16_t)ResultMacroNum - 1 ); // Hopefully large enough :P (can't assume 32-bit)
    4fb8:	2061      	movs	r0, #97	; 0x61
    4fba:	f002 fe42 	bl	7c42 <printInt16>

	// Show Trigger to Result Macro Links
	print( NL );
    4fbe:	480e      	ldr	r0, [pc, #56]	; (4ff8 <cliFunc_macroList+0x118>)
    4fc0:	f002 fdf2 	bl	7ba8 <_print>
	info_msg("Trigger : Result Macro Pairs");
    4fc4:	481a      	ldr	r0, [pc, #104]	; (5030 <cliFunc_macroList+0x150>)
    4fc6:	f002 fdef 	bl	7ba8 <_print>
    4fca:	2400      	movs	r4, #0
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
	{
		print( NL );
    4fcc:	480a      	ldr	r0, [pc, #40]	; (4ff8 <cliFunc_macroList+0x118>)
    4fce:	f002 fdeb 	bl	7ba8 <_print>
		print("\tT");
    4fd2:	4818      	ldr	r0, [pc, #96]	; (5034 <cliFunc_macroList+0x154>)
    4fd4:	f002 fde8 	bl	7ba8 <_print>
		printInt16( (uint16_t)macro ); // Hopefully large enough :P (can't assume 32-bit)
    4fd8:	b2a0      	uxth	r0, r4
    4fda:	f002 fe32 	bl	7c42 <printInt16>
		print(" : R");
    4fde:	4816      	ldr	r0, [pc, #88]	; (5038 <cliFunc_macroList+0x158>)
    4fe0:	f002 fde2 	bl	7ba8 <_print>
    4fe4:	4b15      	ldr	r3, [pc, #84]	; (503c <cliFunc_macroList+0x15c>)
    4fe6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    4fea:	3401      	adds	r4, #1
		printInt16( (uint16_t)TriggerMacroList[ macro ].result ); // Hopefully large enough :P (can't assume 32-bit)
    4fec:	7918      	ldrb	r0, [r3, #4]
    4fee:	f002 fe28 	bl	7c42 <printInt16>
	printInt16( (uint16_t)ResultMacroNum - 1 ); // Hopefully large enough :P (can't assume 32-bit)

	// Show Trigger to Result Macro Links
	print( NL );
	info_msg("Trigger : Result Macro Pairs");
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
    4ff2:	2c6d      	cmp	r4, #109	; 0x6d
    4ff4:	d1ea      	bne.n	4fcc <cliFunc_macroList+0xec>
		print("\tT");
		printInt16( (uint16_t)macro ); // Hopefully large enough :P (can't assume 32-bit)
		print(" : R");
		printInt16( (uint16_t)TriggerMacroList[ macro ].result ); // Hopefully large enough :P (can't assume 32-bit)
	}
}
    4ff6:	bd38      	pop	{r3, r4, r5, pc}
    4ff8:	0000bc21 	.word	0x0000bc21
    4ffc:	1fff91c0 	.word	0x1fff91c0
    5000:	0000acad 	.word	0x0000acad
    5004:	0000acd4 	.word	0x0000acd4
    5008:	1fff9fd6 	.word	0x1fff9fd6
    500c:	0000852a 	.word	0x0000852a
    5010:	1fff9298 	.word	0x1fff9298
    5014:	0000acd8 	.word	0x0000acd8
    5018:	1fff929a 	.word	0x1fff929a
    501c:	1fff91d2 	.word	0x1fff91d2
    5020:	0000ad03 	.word	0x0000ad03
    5024:	1fff91d4 	.word	0x1fff91d4
    5028:	0000ad2d 	.word	0x0000ad2d
    502c:	0000ad5d 	.word	0x0000ad5d
    5030:	0000ad8d 	.word	0x0000ad8d
    5034:	0000adbc 	.word	0x0000adbc
    5038:	0000adbf 	.word	0x0000adbf
    503c:	0000a0e0 	.word	0x0000a0e0

00005040 <Macro_layerState>:

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    5040:	1e51      	subs	r1, r2, #1
    5042:	2901      	cmp	r1, #1

// ----- Capabilities -----

// Sets the given layer with the specified layerState
void Macro_layerState( uint8_t state, uint8_t stateType, uint16_t layer, uint8_t layerState )
{
    5044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
    5046:	d852      	bhi.n	50ee <Macro_layerState+0xae>
		return;

	// Is layer in the LayerIndexStack?
	uint8_t inLayerIndexStack = 0;
	uint16_t stackItem = 0;
	while ( stackItem < macroLayerIndexStackSize )
    5048:	4c29      	ldr	r4, [pc, #164]	; (50f0 <Macro_layerState+0xb0>)
    504a:	8827      	ldrh	r7, [r4, #0]
    504c:	2000      	movs	r0, #0
    504e:	b281      	uxth	r1, r0
    5050:	42b9      	cmp	r1, r7
    5052:	d209      	bcs.n	5068 <Macro_layerState+0x28>
    5054:	4d27      	ldr	r5, [pc, #156]	; (50f4 <Macro_layerState+0xb4>)
    5056:	3001      	adds	r0, #1
    5058:	eb05 0540 	add.w	r5, r5, r0, lsl #1
	{
		// Flag if layer is already in the LayerIndexStack
		if ( macroLayerIndexStack[ stackItem ] == layer )
    505c:	f835 5c02 	ldrh.w	r5, [r5, #-2]
    5060:	4295      	cmp	r5, r2
    5062:	d1f4      	bne.n	504e <Macro_layerState+0xe>
		{
			inLayerIndexStack = 1;
    5064:	2601      	movs	r6, #1
    5066:	e000      	b.n	506a <Macro_layerState+0x2a>
	// Ignore if layer does not exist or trying to manipulate layer 0/Default layer
	if ( layer >= LayerNum || layer == 0 )
		return;

	// Is layer in the LayerIndexStack?
	uint8_t inLayerIndexStack = 0;
    5068:	2600      	movs	r6, #0
		// Increment to next item
		stackItem++;
	}

	// Toggle Layer State Byte
	if ( LayerState[ layer ] & layerState )
    506a:	4d23      	ldr	r5, [pc, #140]	; (50f8 <Macro_layerState+0xb8>)
    506c:	5ca8      	ldrb	r0, [r5, r2]
    506e:	4218      	tst	r0, r3
	{
		// Unset
		LayerState[ layer ] &= ~layerState;
    5070:	bf14      	ite	ne
    5072:	ea20 0303 	bicne.w	r3, r0, r3
	}
	else
	{
		// Set
		LayerState[ layer ] |= layerState;
    5076:	4303      	orreq	r3, r0
    5078:	54ab      	strb	r3, [r5, r2]
	}

	// If the layer was not in the LayerIndexStack add it
	if ( !inLayerIndexStack )
    507a:	b926      	cbnz	r6, 5086 <Macro_layerState+0x46>
	{
		macroLayerIndexStack[ macroLayerIndexStackSize++ ] = layer;
    507c:	1c7b      	adds	r3, r7, #1
    507e:	8023      	strh	r3, [r4, #0]
    5080:	4b1c      	ldr	r3, [pc, #112]	; (50f4 <Macro_layerState+0xb4>)
    5082:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
	}

	// If the layer is in the LayerIndexStack and the state is 0x00, remove
	if ( LayerState[ layer ] == 0x00 && inLayerIndexStack )
    5086:	5cab      	ldrb	r3, [r5, r2]
    5088:	b96b      	cbnz	r3, 50a6 <Macro_layerState+0x66>
    508a:	b166      	cbz	r6, 50a6 <Macro_layerState+0x66>
	{
		// Remove the layer from the LayerIndexStack
		// Using the already positioned stackItem variable from the loop above
		while ( stackItem < macroLayerIndexStackSize )
    508c:	8823      	ldrh	r3, [r4, #0]
    508e:	4299      	cmp	r1, r3
    5090:	d207      	bcs.n	50a2 <Macro_layerState+0x62>
		{
			macroLayerIndexStack[ stackItem ] = macroLayerIndexStack[ stackItem + 1 ];
    5092:	4818      	ldr	r0, [pc, #96]	; (50f4 <Macro_layerState+0xb4>)
    5094:	1c4a      	adds	r2, r1, #1
    5096:	f830 6012 	ldrh.w	r6, [r0, r2, lsl #1]
    509a:	f820 6011 	strh.w	r6, [r0, r1, lsl #1]
			stackItem++;
    509e:	b291      	uxth	r1, r2
    50a0:	e7f5      	b.n	508e <Macro_layerState+0x4e>
		}

		// Reduce LayerIndexStack size
		macroLayerIndexStackSize--;
    50a2:	3b01      	subs	r3, #1
    50a4:	8023      	strh	r3, [r4, #0]
	}

	// Layer Debug Mode
	if ( layerDebugMode )
    50a6:	4b15      	ldr	r3, [pc, #84]	; (50fc <Macro_layerState+0xbc>)
    50a8:	781b      	ldrb	r3, [r3, #0]
    50aa:	b303      	cbz	r3, 50ee <Macro_layerState+0xae>
	{
		dbug_msg("Layer ");
    50ac:	4814      	ldr	r0, [pc, #80]	; (5100 <Macro_layerState+0xc0>)
    50ae:	f002 fd7b 	bl	7ba8 <_print>
    50b2:	2600      	movs	r6, #0

		// Iterate over each of the layers displaying the state as a hex value
		for ( index_uint_t index = 0; index < LayerNum; index++ )
		{
			printHex_op( LayerState[ index ], 0 );
    50b4:	5da8      	ldrb	r0, [r5, r6]
    50b6:	2100      	movs	r1, #0
    50b8:	3601      	adds	r6, #1
    50ba:	f002 fe17 	bl	7cec <printHex_op>
	if ( layerDebugMode )
	{
		dbug_msg("Layer ");

		// Iterate over each of the layers displaying the state as a hex value
		for ( index_uint_t index = 0; index < LayerNum; index++ )
    50be:	2e03      	cmp	r6, #3
    50c0:	d1f8      	bne.n	50b4 <Macro_layerState+0x74>
		{
			printHex_op( LayerState[ index ], 0 );
		}

		// Always show the default layer (it's always 0)
		print(" 0");
    50c2:	4810      	ldr	r0, [pc, #64]	; (5104 <Macro_layerState+0xc4>)
    50c4:	f002 fd70 	bl	7ba8 <_print>

		// Iterate over the layer stack starting from the bottom of the stack
		for ( index_uint_t index = macroLayerIndexStackSize; index > 0; index-- )
    50c8:	8824      	ldrh	r4, [r4, #0]
    50ca:	b15c      	cbz	r4, 50e4 <Macro_layerState+0xa4>
		{
			print(":");
    50cc:	480e      	ldr	r0, [pc, #56]	; (5108 <Macro_layerState+0xc8>)
    50ce:	f002 fd6b 	bl	7ba8 <_print>
			printHex_op( macroLayerIndexStack[ index - 1 ], 0 );
    50d2:	3c01      	subs	r4, #1
    50d4:	4b07      	ldr	r3, [pc, #28]	; (50f4 <Macro_layerState+0xb4>)
    50d6:	2100      	movs	r1, #0
    50d8:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
    50dc:	f002 fe06 	bl	7cec <printHex_op>

		// Always show the default layer (it's always 0)
		print(" 0");

		// Iterate over the layer stack starting from the bottom of the stack
		for ( index_uint_t index = macroLayerIndexStackSize; index > 0; index-- )
    50e0:	b2a4      	uxth	r4, r4
    50e2:	e7f2      	b.n	50ca <Macro_layerState+0x8a>
		{
			print(":");
			printHex_op( macroLayerIndexStack[ index - 1 ], 0 );
		}

		print( NL );
    50e4:	4809      	ldr	r0, [pc, #36]	; (510c <Macro_layerState+0xcc>)
	}
}
    50e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		{
			print(":");
			printHex_op( macroLayerIndexStack[ index - 1 ], 0 );
		}

		print( NL );
    50ea:	f002 bd5d 	b.w	7ba8 <_print>
    50ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50f0:	1fff91c2 	.word	0x1fff91c2
    50f4:	1fff91c6 	.word	0x1fff91c6
    50f8:	1fffa207 	.word	0x1fffa207
    50fc:	1fff91cf 	.word	0x1fff91cf
    5100:	0000adc4 	.word	0x0000adc4
    5104:	0000adde 	.word	0x0000adde
    5108:	000085bf 	.word	0x000085bf
    510c:	0000bc21 	.word	0x0000bc21

00005110 <Macro_layerState_capability>:
// Argument #1: Layer Index -> uint16_t
// Argument #2: Layer State -> uint8_t
void Macro_layerState_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5110:	29ff      	cmp	r1, #255	; 0xff

// Modifies the specified Layer control byte
// Argument #1: Layer Index -> uint16_t
// Argument #2: Layer State -> uint8_t
void Macro_layerState_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    5112:	4613      	mov	r3, r2
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5114:	d104      	bne.n	5120 <Macro_layerState_capability+0x10>
    5116:	28ff      	cmp	r0, #255	; 0xff
    5118:	d105      	bne.n	5126 <Macro_layerState_capability+0x16>
	{
		print("Macro_layerState(layerIndex,layerState)");
    511a:	4805      	ldr	r0, [pc, #20]	; (5130 <Macro_layerState_capability+0x20>)
    511c:	f002 bd44 	b.w	7ba8 <_print>
	}

	// Only use capability on press or release
	// TODO Analog
	// XXX This may cause issues, might be better to implement state table here to decide -HaaTa
	if ( stateType == 0x00 && state == 0x02 ) // Hold condition
    5120:	b909      	cbnz	r1, 5126 <Macro_layerState_capability+0x16>
    5122:	2802      	cmp	r0, #2
    5124:	d003      	beq.n	512e <Macro_layerState_capability+0x1e>
	uint16_t layer = *(uint16_t*)(&args[0]);

	// Get layer toggle byte
	uint8_t layerState = args[ sizeof(uint16_t) ];

	Macro_layerState( state, stateType, layer, layerState );
    5126:	881a      	ldrh	r2, [r3, #0]
    5128:	789b      	ldrb	r3, [r3, #2]
    512a:	f7ff bf89 	b.w	5040 <Macro_layerState>
    512e:	4770      	bx	lr
    5130:	0000ade1 	.word	0x0000ade1

00005134 <Macro_layerLatch_capability>:
// Latches given layer
// Argument #1: Layer Index -> uint16_t
void Macro_layerLatch_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5134:	29ff      	cmp	r1, #255	; 0xff
    5136:	d104      	bne.n	5142 <Macro_layerLatch_capability+0xe>
    5138:	28ff      	cmp	r0, #255	; 0xff
    513a:	d105      	bne.n	5148 <Macro_layerLatch_capability+0x14>
	{
		print("Macro_layerLatch(layerIndex)");
    513c:	4805      	ldr	r0, [pc, #20]	; (5154 <Macro_layerLatch_capability+0x20>)
    513e:	f002 bd33 	b.w	7ba8 <_print>
		return;
	}

	// Only use capability on press
	// TODO Analog
	if ( stateType == 0x00 && state != 0x03 ) // Only on release
    5142:	b909      	cbnz	r1, 5148 <Macro_layerLatch_capability+0x14>
    5144:	2803      	cmp	r0, #3
    5146:	d103      	bne.n	5150 <Macro_layerLatch_capability+0x1c>

	// Get layer index from arguments
	// Cast pointer to uint8_t to uint16_t then access that memory location
	uint16_t layer = *(uint16_t*)(&args[0]);

	Macro_layerState( state, stateType, layer, 0x02 );
    5148:	8812      	ldrh	r2, [r2, #0]
    514a:	2302      	movs	r3, #2
    514c:	f7ff bf78 	b.w	5040 <Macro_layerState>
    5150:	4770      	bx	lr
    5152:	bf00      	nop
    5154:	0000ae09 	.word	0x0000ae09

00005158 <Macro_layerLock_capability>:
// Locks given layer
// Argument #1: Layer Index -> uint16_t
void Macro_layerLock_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5158:	29ff      	cmp	r1, #255	; 0xff
    515a:	d104      	bne.n	5166 <Macro_layerLock_capability+0xe>
    515c:	28ff      	cmp	r0, #255	; 0xff
    515e:	d105      	bne.n	516c <Macro_layerLock_capability+0x14>
	{
		print("Macro_layerLock(layerIndex)");
    5160:	4805      	ldr	r0, [pc, #20]	; (5178 <Macro_layerLock_capability+0x20>)
    5162:	f002 bd21 	b.w	7ba8 <_print>
	}

	// Only use capability on press
	// TODO Analog
	// XXX Could also be on release, but that's sorta dumb -HaaTa
	if ( stateType == 0x00 && state != 0x01 ) // All normal key conditions except press
    5166:	b909      	cbnz	r1, 516c <Macro_layerLock_capability+0x14>
    5168:	2801      	cmp	r0, #1
    516a:	d103      	bne.n	5174 <Macro_layerLock_capability+0x1c>

	// Get layer index from arguments
	// Cast pointer to uint8_t to uint16_t then access that memory location
	uint16_t layer = *(uint16_t*)(&args[0]);

	Macro_layerState( state, stateType, layer, 0x04 );
    516c:	8812      	ldrh	r2, [r2, #0]
    516e:	2304      	movs	r3, #4
    5170:	f7ff bf66 	b.w	5040 <Macro_layerState>
    5174:	4770      	bx	lr
    5176:	bf00      	nop
    5178:	0000ae26 	.word	0x0000ae26

0000517c <Macro_layerShift_capability>:
// Shifts given layer
// Argument #1: Layer Index -> uint16_t
void Macro_layerShift_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    517c:	29ff      	cmp	r1, #255	; 0xff
    517e:	d104      	bne.n	518a <Macro_layerShift_capability+0xe>
    5180:	28ff      	cmp	r0, #255	; 0xff
    5182:	d106      	bne.n	5192 <Macro_layerShift_capability+0x16>
	{
		print("Macro_layerShift(layerIndex)");
    5184:	4805      	ldr	r0, [pc, #20]	; (519c <Macro_layerShift_capability+0x20>)
    5186:	f002 bd0f 	b.w	7ba8 <_print>
		return;
	}

	// Only use capability on press or release
	// TODO Analog
	if ( stateType == 0x00 && ( state == 0x00 || state == 0x02 ) ) // Only pass press or release conditions
    518a:	b911      	cbnz	r1, 5192 <Macro_layerShift_capability+0x16>
    518c:	f010 0ffd 	tst.w	r0, #253	; 0xfd
    5190:	d003      	beq.n	519a <Macro_layerShift_capability+0x1e>

	// Get layer index from arguments
	// Cast pointer to uint8_t to uint16_t then access that memory location
	uint16_t layer = *(uint16_t*)(&args[0]);

	Macro_layerState( state, stateType, layer, 0x01 );
    5192:	8812      	ldrh	r2, [r2, #0]
    5194:	2301      	movs	r3, #1
    5196:	f7ff bf53 	b.w	5040 <Macro_layerState>
    519a:	4770      	bx	lr
    519c:	0000ae42 	.word	0x0000ae42

000051a0 <Macro_layerRotate_capability>:
// Layers are still evaluated using the layer stack
uint16_t Macro_rotationLayer;
void Macro_layerRotate_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    51a0:	29ff      	cmp	r1, #255	; 0xff
// Rotate layer to next/previous
// Uses state variable to keep track of the current layer position
// Layers are still evaluated using the layer stack
uint16_t Macro_rotationLayer;
void Macro_layerRotate_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    51a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51a6:	4606      	mov	r6, r0
    51a8:	460d      	mov	r5, r1
    51aa:	4617      	mov	r7, r2
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    51ac:	d106      	bne.n	51bc <Macro_layerRotate_capability+0x1c>
    51ae:	28ff      	cmp	r0, #255	; 0xff
    51b0:	d107      	bne.n	51c2 <Macro_layerRotate_capability+0x22>
	{
		print("Macro_layerRotate(previous)");
    51b2:	4815      	ldr	r0, [pc, #84]	; (5208 <Macro_layerRotate_capability+0x68>)
			Macro_rotationLayer = LayerNum - 1;
	}

	// Toggle the computed layer rotation
	Macro_layerState( state, stateType, Macro_rotationLayer, 0x04 );
}
    51b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
void Macro_layerRotate_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Macro_layerRotate(previous)");
    51b8:	f002 bcf6 	b.w	7ba8 <_print>
	}

	// Only use capability on press
	// TODO Analog
	// XXX Could also be on release, but that's sorta dumb -HaaTa
	if ( stateType == 0x00 && state != 0x01 ) // All normal key conditions except press
    51bc:	b909      	cbnz	r1, 51c2 <Macro_layerRotate_capability+0x22>
    51be:	2801      	cmp	r0, #1
    51c0:	d11f      	bne.n	5202 <Macro_layerRotate_capability+0x62>
		return;

	// Unset previous rotation layer if not 0
	if ( Macro_rotationLayer != 0 )
    51c2:	4c12      	ldr	r4, [pc, #72]	; (520c <Macro_layerRotate_capability+0x6c>)
    51c4:	8822      	ldrh	r2, [r4, #0]
    51c6:	b122      	cbz	r2, 51d2 <Macro_layerRotate_capability+0x32>
	{
		Macro_layerState( state, stateType, Macro_rotationLayer, 0x04 );
    51c8:	4630      	mov	r0, r6
    51ca:	4629      	mov	r1, r5
    51cc:	2304      	movs	r3, #4
    51ce:	f7ff ff37 	bl	5040 <Macro_layerState>

	// Get direction of rotation, 0, next, non-zero previous
	uint8_t direction = *args;

	// Next
	if ( !direction )
    51d2:	7839      	ldrb	r1, [r7, #0]
	{
		Macro_rotationLayer++;
    51d4:	4a0d      	ldr	r2, [pc, #52]	; (520c <Macro_layerRotate_capability+0x6c>)
    51d6:	8823      	ldrh	r3, [r4, #0]

	// Get direction of rotation, 0, next, non-zero previous
	uint8_t direction = *args;

	// Next
	if ( !direction )
    51d8:	b929      	cbnz	r1, 51e6 <Macro_layerRotate_capability+0x46>
	{
		Macro_rotationLayer++;
    51da:	3301      	adds	r3, #1
    51dc:	b29b      	uxth	r3, r3

		// Invalid layer
		if ( Macro_rotationLayer >= LayerNum )
    51de:	2b02      	cmp	r3, #2
    51e0:	d906      	bls.n	51f0 <Macro_layerRotate_capability+0x50>
			Macro_rotationLayer = 0;
    51e2:	8011      	strh	r1, [r2, #0]
    51e4:	e005      	b.n	51f2 <Macro_layerRotate_capability+0x52>
	}
	// Previous
	else
	{
		Macro_rotationLayer--;
    51e6:	3b01      	subs	r3, #1
    51e8:	b29b      	uxth	r3, r3

		// Layer wrap
		if ( Macro_rotationLayer >= LayerNum )
    51ea:	2b02      	cmp	r3, #2
			Macro_rotationLayer = LayerNum - 1;
    51ec:	bf88      	it	hi
    51ee:	2302      	movhi	r3, #2
    51f0:	8013      	strh	r3, [r2, #0]
	}

	// Toggle the computed layer rotation
	Macro_layerState( state, stateType, Macro_rotationLayer, 0x04 );
    51f2:	4630      	mov	r0, r6
    51f4:	4629      	mov	r1, r5
    51f6:	8822      	ldrh	r2, [r4, #0]
    51f8:	2304      	movs	r3, #4
}
    51fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		if ( Macro_rotationLayer >= LayerNum )
			Macro_rotationLayer = LayerNum - 1;
	}

	// Toggle the computed layer rotation
	Macro_layerState( state, stateType, Macro_rotationLayer, 0x04 );
    51fe:	f7ff bf1f 	b.w	5040 <Macro_layerState>
    5202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5206:	bf00      	nop
    5208:	0000ae5f 	.word	0x0000ae5f
    520c:	1fff9fd4 	.word	0x1fff9fd4

00005210 <Macro_layerLookup>:
// ----- Functions -----

// Looks up the trigger list for the given scan code (from the active layer)
// NOTE: Calling function must handle the NULL pointer case
nat_ptr_t *Macro_layerLookup( TriggerGuide *guide, uint8_t latch_expire )
{
    5210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t scanCode = guide->scanCode;

	// TODO Analog
	// If a normal key, and not pressed, do a layer cache lookup
	if ( guide->type == 0x00 && guide->state != 0x01 )
    5214:	7805      	ldrb	r5, [r0, #0]

// Looks up the trigger list for the given scan code (from the active layer)
// NOTE: Calling function must handle the NULL pointer case
nat_ptr_t *Macro_layerLookup( TriggerGuide *guide, uint8_t latch_expire )
{
	uint8_t scanCode = guide->scanCode;
    5216:	7884      	ldrb	r4, [r0, #2]
// ----- Functions -----

// Looks up the trigger list for the given scan code (from the active layer)
// NOTE: Calling function must handle the NULL pointer case
nat_ptr_t *Macro_layerLookup( TriggerGuide *guide, uint8_t latch_expire )
{
    5218:	460e      	mov	r6, r1
	uint8_t scanCode = guide->scanCode;

	// TODO Analog
	// If a normal key, and not pressed, do a layer cache lookup
	if ( guide->type == 0x00 && guide->state != 0x01 )
    521a:	b9f5      	cbnz	r5, 525a <Macro_layerLookup+0x4a>
    521c:	7843      	ldrb	r3, [r0, #1]
    521e:	2b01      	cmp	r3, #1
    5220:	d01b      	beq.n	525a <Macro_layerLookup+0x4a>
	{
		// Cached layer
		var_uint_t cachedLayer = macroTriggerListLayerCache[ scanCode ];
    5222:	4b3d      	ldr	r3, [pc, #244]	; (5318 <Macro_layerLookup+0x108>)

		// Lookup map, then layer
		nat_ptr_t **map = (nat_ptr_t**)LayerIndex[ cachedLayer ].triggerMap;
    5224:	483d      	ldr	r0, [pc, #244]	; (531c <Macro_layerLookup+0x10c>)
	// TODO Analog
	// If a normal key, and not pressed, do a layer cache lookup
	if ( guide->type == 0x00 && guide->state != 0x01 )
	{
		// Cached layer
		var_uint_t cachedLayer = macroTriggerListLayerCache[ scanCode ];
    5226:	5d1a      	ldrb	r2, [r3, r4]

		// Lookup map, then layer
		nat_ptr_t **map = (nat_ptr_t**)LayerIndex[ cachedLayer ].triggerMap;
    5228:	230c      	movs	r3, #12
    522a:	4353      	muls	r3, r2
    522c:	18c1      	adds	r1, r0, r3
		const Layer *layer = &LayerIndex[ cachedLayer ];

		// Cache trigger list before attempting to expire latch
		nat_ptr_t *trigger_list = map[ scanCode - layer->first ];
    522e:	58c3      	ldr	r3, [r0, r3]
    5230:	7a09      	ldrb	r1, [r1, #8]
    5232:	1a64      	subs	r4, r4, r1
    5234:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]

		// Check if latch has been pressed for this layer
		uint8_t latch = LayerState[ cachedLayer ] & 0x02;
    5238:	4b39      	ldr	r3, [pc, #228]	; (5320 <Macro_layerLookup+0x110>)
    523a:	5c9b      	ldrb	r3, [r3, r2]
		if ( latch && latch_expire )
    523c:	079b      	lsls	r3, r3, #30
    523e:	d568      	bpl.n	5312 <Macro_layerLookup+0x102>
    5240:	2e00      	cmp	r6, #0
    5242:	d066      	beq.n	5312 <Macro_layerLookup+0x102>
		{
			Macro_layerState( 0, 0, cachedLayer, 0x02 );
    5244:	4628      	mov	r0, r5
    5246:	4629      	mov	r1, r5
    5248:	2302      	movs	r3, #2
    524a:	f7ff fef9 	bl	5040 <Macro_layerState>
#if defined(ConnectEnabled_define) && defined(LCDEnabled_define)
			// Evaluate the layerStack capability if available (LCD + Interconnect)
			extern void LCD_layerStack_capability( uint8_t state, uint8_t stateType, uint8_t *args );
			LCD_layerStack_capability( 0, 0, 0 );
    524e:	4628      	mov	r0, r5
    5250:	4629      	mov	r1, r5
    5252:	462a      	mov	r2, r5
    5254:	f7fe fb9c 	bl	3990 <LCD_layerStack_capability>
    5258:	e05b      	b.n	5312 <Macro_layerLookup+0x102>

		return trigger_list;
	}

	// If no trigger macro is defined at the given layer, fallthrough to the next layer
	for ( uint16_t layerIndex = macroLayerIndexStackSize; layerIndex != 0xFFFF; layerIndex-- )
    525a:	4b32      	ldr	r3, [pc, #200]	; (5324 <Macro_layerLookup+0x114>)
    525c:	881d      	ldrh	r5, [r3, #0]
    525e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5262:	429d      	cmp	r5, r3
    5264:	d03a      	beq.n	52dc <Macro_layerLookup+0xcc>
	{
		// Lookup Layer
		const Layer *layer = &LayerIndex[ macroLayerIndexStack[ layerIndex ] ];
    5266:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 5334 <Macro_layerLookup+0x124>

		// Check if latch has been pressed for this layer
		// XXX Regardless of whether a key is found, the latch is removed on first lookup
		uint8_t latch = LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x02;
    526a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 5320 <Macro_layerLookup+0x110>

	// If no trigger macro is defined at the given layer, fallthrough to the next layer
	for ( uint16_t layerIndex = macroLayerIndexStackSize; layerIndex != 0xFFFF; layerIndex-- )
	{
		// Lookup Layer
		const Layer *layer = &LayerIndex[ macroLayerIndexStack[ layerIndex ] ];
    526e:	f83a 7015 	ldrh.w	r7, [sl, r5, lsl #1]

		// Check if latch has been pressed for this layer
		// XXX Regardless of whether a key is found, the latch is removed on first lookup
		uint8_t latch = LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x02;
    5272:	f819 3007 	ldrb.w	r3, [r9, r7]
    5276:	f003 0302 	and.w	r3, r3, #2
		if ( latch && latch_expire )
    527a:	f003 08ff 	and.w	r8, r3, #255	; 0xff
    527e:	b133      	cbz	r3, 528e <Macro_layerLookup+0x7e>
    5280:	b12e      	cbz	r6, 528e <Macro_layerLookup+0x7e>
		{
			Macro_layerState( 0, 0, macroLayerIndexStack[ layerIndex ], 0x02 );
    5282:	2000      	movs	r0, #0
    5284:	4601      	mov	r1, r0
    5286:	463a      	mov	r2, r7
    5288:	2302      	movs	r3, #2
    528a:	f7ff fed9 	bl	5040 <Macro_layerState>
		}

		// Only use layer, if state is valid
		// XOR each of the state bits
		// If only two are enabled, do not use this state
		if ( (LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x01) ^ (latch>>1) ^ ((LayerState[ macroLayerIndexStack[ layerIndex ] ] & 0x04)>>2) )
    528e:	f83a 1015 	ldrh.w	r1, [sl, r5, lsl #1]
    5292:	f819 3001 	ldrb.w	r3, [r9, r1]
    5296:	f003 0201 	and.w	r2, r3, #1
    529a:	ea82 0258 	eor.w	r2, r2, r8, lsr #1
    529e:	f3c3 0380 	ubfx	r3, r3, #2, #1
    52a2:	429a      	cmp	r2, r3
    52a4:	d017      	beq.n	52d6 <Macro_layerLookup+0xc6>
		{
			// Lookup layer
			nat_ptr_t **map = (nat_ptr_t**)layer->triggerMap;
    52a6:	220c      	movs	r2, #12
    52a8:	481c      	ldr	r0, [pc, #112]	; (531c <Macro_layerLookup+0x10c>)
    52aa:	437a      	muls	r2, r7
    52ac:	1883      	adds	r3, r0, r2
    52ae:	5882      	ldr	r2, [r0, r2]

			// Determine if layer has key defined
			// Make sure scanCode is between layer first and last scancodes
			if ( map != 0
    52b0:	b18a      	cbz	r2, 52d6 <Macro_layerLookup+0xc6>
				&& scanCode <= layer->last
    52b2:	7a58      	ldrb	r0, [r3, #9]
    52b4:	42a0      	cmp	r0, r4
    52b6:	d30e      	bcc.n	52d6 <Macro_layerLookup+0xc6>
				&& scanCode >= layer->first
    52b8:	7a1b      	ldrb	r3, [r3, #8]
    52ba:	429c      	cmp	r4, r3
    52bc:	d30b      	bcc.n	52d6 <Macro_layerLookup+0xc6>
				&& *map[ scanCode - layer->first ] != 0 )
    52be:	1ae3      	subs	r3, r4, r3
    52c0:	eb02 0083 	add.w	r0, r2, r3, lsl #2
    52c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    52c8:	681b      	ldr	r3, [r3, #0]
    52ca:	b123      	cbz	r3, 52d6 <Macro_layerLookup+0xc6>
			{
				// Set the layer cache
				macroTriggerListLayerCache[ scanCode ] = macroLayerIndexStack[ layerIndex ];
    52cc:	4b12      	ldr	r3, [pc, #72]	; (5318 <Macro_layerLookup+0x108>)
    52ce:	5519      	strb	r1, [r3, r4]

				return map[ scanCode - layer->first ];
    52d0:	6800      	ldr	r0, [r0, #0]
    52d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

		return trigger_list;
	}

	// If no trigger macro is defined at the given layer, fallthrough to the next layer
	for ( uint16_t layerIndex = macroLayerIndexStackSize; layerIndex != 0xFFFF; layerIndex-- )
    52d6:	3d01      	subs	r5, #1
    52d8:	b2ad      	uxth	r5, r5
    52da:	e7c0      	b.n	525e <Macro_layerLookup+0x4e>
	const Layer *layer = &LayerIndex[0];

	// Make sure scanCode is between layer first and last scancodes
	if ( map != 0
		&& scanCode <= layer->last
		&& scanCode >= layer->first
    52dc:	1ea3      	subs	r3, r4, #2
    52de:	b2da      	uxtb	r2, r3
    52e0:	2a57      	cmp	r2, #87	; 0x57
    52e2:	d809      	bhi.n	52f8 <Macro_layerLookup+0xe8>
		&& *map[ scanCode - layer->first ] != 0 )
    52e4:	4a10      	ldr	r2, [pc, #64]	; (5328 <Macro_layerLookup+0x118>)
    52e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    52ea:	6803      	ldr	r3, [r0, #0]
    52ec:	b123      	cbz	r3, 52f8 <Macro_layerLookup+0xe8>
	{
		// Set the layer cache to default map
		macroTriggerListLayerCache[ scanCode ] = 0;
    52ee:	4b0a      	ldr	r3, [pc, #40]	; (5318 <Macro_layerLookup+0x108>)
    52f0:	2200      	movs	r2, #0
    52f2:	551a      	strb	r2, [r3, r4]

		return map[ scanCode - layer->first ];
    52f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	// Otherwise no defined Trigger Macro
	erro_msg("Scan Code has no defined Trigger Macro: ");
    52f8:	480c      	ldr	r0, [pc, #48]	; (532c <Macro_layerLookup+0x11c>)
    52fa:	f002 fc55 	bl	7ba8 <_print>
	printHex( scanCode );
    52fe:	4620      	mov	r0, r4
    5300:	2101      	movs	r1, #1
    5302:	f002 fcf3 	bl	7cec <printHex_op>
	print( NL );
    5306:	480a      	ldr	r0, [pc, #40]	; (5330 <Macro_layerLookup+0x120>)
    5308:	f002 fc4e 	bl	7ba8 <_print>
	return 0;
    530c:	2000      	movs	r0, #0
    530e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			extern void LCD_layerStack_capability( uint8_t state, uint8_t stateType, uint8_t *args );
			LCD_layerStack_capability( 0, 0, 0 );
#endif
		}

		return trigger_list;
    5312:	4620      	mov	r0, r4
	// Otherwise no defined Trigger Macro
	erro_msg("Scan Code has no defined Trigger Macro: ");
	printHex( scanCode );
	print( NL );
	return 0;
}
    5314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5318:	1fffa20a 	.word	0x1fffa20a
    531c:	0000a68c 	.word	0x0000a68c
    5320:	1fffa207 	.word	0x1fffa207
    5324:	1fff91c2 	.word	0x1fff91c2
    5328:	1fff8ab4 	.word	0x1fff8ab4
    532c:	0000ae7b 	.word	0x0000ae7b
    5330:	0000bc21 	.word	0x0000bc21
    5334:	1fff91c6 	.word	0x1fff91c6

00005338 <Macro_interconnectAdd>:

// Add an interconnect ScanCode
// These are handled differently (less information is sent, hold/off states must be assumed)
#if defined(ConnectEnabled_define)
inline void Macro_interconnectAdd( void *trigger_ptr )
{
    5338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TriggerGuide *trigger = (TriggerGuide*)trigger_ptr;

	// Error checking
	uint8_t error = 0;
	switch ( trigger->type )
    533a:	7803      	ldrb	r3, [r0, #0]

// Add an interconnect ScanCode
// These are handled differently (less information is sent, hold/off states must be assumed)
#if defined(ConnectEnabled_define)
inline void Macro_interconnectAdd( void *trigger_ptr )
{
    533c:	4604      	mov	r4, r0
	TriggerGuide *trigger = (TriggerGuide*)trigger_ptr;

	// Error checking
	uint8_t error = 0;
	switch ( trigger->type )
    533e:	b923      	cbnz	r3, 534a <Macro_interconnectAdd+0x12>
	{
	case 0x00: // Normal key
		switch ( trigger->state )
    5340:	7842      	ldrb	r2, [r0, #1]
    5342:	2a03      	cmp	r2, #3
    5344:	d905      	bls.n	5352 <Macro_interconnectAdd+0x1a>
		case 0x01:
		case 0x02:
		case 0x03:
			break;
		default:
			erro_msg("Invalid key state - ");
    5346:	4823      	ldr	r0, [pc, #140]	; (53d4 <Macro_interconnectAdd+0x9c>)
    5348:	e000      	b.n	534c <Macro_interconnectAdd+0x14>
		}
		break;

	// Invalid TriggerGuide type
	default:
		erro_msg("Invalid type - ");
    534a:	4823      	ldr	r0, [pc, #140]	; (53d8 <Macro_interconnectAdd+0xa0>)
    534c:	f002 fc2c 	bl	7ba8 <_print>
		error = 1;
    5350:	2301      	movs	r3, #1
		break;
	}

	// Check if ScanCode is out of range
	if ( trigger->scanCode > MaxScanCode )
    5352:	78a7      	ldrb	r7, [r4, #2]
    5354:	2f59      	cmp	r7, #89	; 0x59
    5356:	d903      	bls.n	5360 <Macro_interconnectAdd+0x28>
	{
		warn_msg("ScanCode is out of range/not defined - ");
    5358:	4820      	ldr	r0, [pc, #128]	; (53dc <Macro_interconnectAdd+0xa4>)
    535a:	f002 fc25 	bl	7ba8 <_print>
    535e:	e004      	b.n	536a <Macro_interconnectAdd+0x32>
		error = 1;
	}

	// Display TriggerGuide
	if ( error )
    5360:	b91b      	cbnz	r3, 536a <Macro_interconnectAdd+0x32>
		return;
	}

	// Add trigger to the Interconnect Cache
	// During each processing loop, a scancode may be re-added depending on it's state
	for ( var_uint_t c = 0; c < macroInterconnectCacheSize; c++ )
    5362:	491f      	ldr	r1, [pc, #124]	; (53e0 <Macro_interconnectAdd+0xa8>)
    5364:	780a      	ldrb	r2, [r1, #0]
    5366:	460d      	mov	r5, r1
    5368:	e016      	b.n	5398 <Macro_interconnectAdd+0x60>
	}

	// Display TriggerGuide
	if ( error )
	{
		printHex( trigger->type );
    536a:	7820      	ldrb	r0, [r4, #0]
    536c:	2101      	movs	r1, #1
    536e:	f002 fcbd 	bl	7cec <printHex_op>
		print(" ");
    5372:	481c      	ldr	r0, [pc, #112]	; (53e4 <Macro_interconnectAdd+0xac>)
    5374:	f002 fc18 	bl	7ba8 <_print>
		printHex( trigger->state );
    5378:	7860      	ldrb	r0, [r4, #1]
    537a:	2101      	movs	r1, #1
    537c:	f002 fcb6 	bl	7cec <printHex_op>
		print(" ");
    5380:	4818      	ldr	r0, [pc, #96]	; (53e4 <Macro_interconnectAdd+0xac>)
    5382:	f002 fc11 	bl	7ba8 <_print>
		printHex( trigger->scanCode );
    5386:	78a0      	ldrb	r0, [r4, #2]
    5388:	2101      	movs	r1, #1
    538a:	f002 fcaf 	bl	7cec <printHex_op>
		print( NL );
    538e:	4816      	ldr	r0, [pc, #88]	; (53e8 <Macro_interconnectAdd+0xb0>)
		}
	}

	// If not in the list, add it
	macroInterconnectCache[ macroInterconnectCacheSize++ ] = *trigger;
}
    5390:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printHex( trigger->type );
		print(" ");
		printHex( trigger->state );
		print(" ");
		printHex( trigger->scanCode );
		print( NL );
    5394:	f002 bc08 	b.w	7ba8 <_print>
		return;
	}

	// Add trigger to the Interconnect Cache
	// During each processing loop, a scancode may be re-added depending on it's state
	for ( var_uint_t c = 0; c < macroInterconnectCacheSize; c++ )
    5398:	b2d9      	uxtb	r1, r3
    539a:	4291      	cmp	r1, r2
    539c:	4813      	ldr	r0, [pc, #76]	; (53ec <Macro_interconnectAdd+0xb4>)
    539e:	d20e      	bcs.n	53be <Macro_interconnectAdd+0x86>
	{
		// Check if the same ScanCode
		if ( macroInterconnectCache[ c ].scanCode == trigger->scanCode )
    53a0:	4619      	mov	r1, r3
    53a2:	3301      	adds	r3, #1
    53a4:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    53a8:	4406      	add	r6, r0
    53aa:	f816 6c01 	ldrb.w	r6, [r6, #-1]
    53ae:	42be      	cmp	r6, r7
    53b0:	d1f2      	bne.n	5398 <Macro_interconnectAdd+0x60>
		{
			// Update the state
			macroInterconnectCache[ c ].state = trigger->state;
    53b2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    53b6:	4401      	add	r1, r0
    53b8:	7863      	ldrb	r3, [r4, #1]
    53ba:	704b      	strb	r3, [r1, #1]
			return;
    53bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	// If not in the list, add it
	macroInterconnectCache[ macroInterconnectCacheSize++ ] = *trigger;
    53be:	1c53      	adds	r3, r2, #1
    53c0:	702b      	strb	r3, [r5, #0]
    53c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    53c6:	8821      	ldrh	r1, [r4, #0]
    53c8:	5281      	strh	r1, [r0, r2]
    53ca:	1883      	adds	r3, r0, r2
    53cc:	78a2      	ldrb	r2, [r4, #2]
    53ce:	709a      	strb	r2, [r3, #2]
    53d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53d2:	bf00      	nop
    53d4:	0000aeb9 	.word	0x0000aeb9
    53d8:	0000aee3 	.word	0x0000aee3
    53dc:	0000af08 	.word	0x0000af08
    53e0:	1fff91ce 	.word	0x1fff91ce
    53e4:	0000852a 	.word	0x0000852a
    53e8:	0000bc21 	.word	0x0000bc21
    53ec:	1fffa263 	.word	0x1fffa263

000053f0 <Macro_keyState>:
//   * 0x01 - Pressed
//   * 0x02 - Held
//   * 0x03 - Released
//   * 0x04 - Unpressed (this is currently ignored)
inline void Macro_keyState( uint8_t scanCode, uint8_t state )
{
    53f0:	b570      	push	{r4, r5, r6, lr}
#if defined(ConnectEnabled_define)
	// Only compile in if a Connect node module is available
	if ( !Connect_master )
    53f2:	4b12      	ldr	r3, [pc, #72]	; (543c <Macro_keyState+0x4c>)
    53f4:	781b      	ldrb	r3, [r3, #0]
//   * 0x01 - Pressed
//   * 0x02 - Held
//   * 0x03 - Released
//   * 0x04 - Unpressed (this is currently ignored)
inline void Macro_keyState( uint8_t scanCode, uint8_t state )
{
    53f6:	4604      	mov	r4, r0
#if defined(ConnectEnabled_define)
	// Only compile in if a Connect node module is available
	if ( !Connect_master )
    53f8:	b913      	cbnz	r3, 5400 <Macro_keyState+0x10>
	{
		// ScanCodes are only added if there was a state change (on/off)
		switch ( state )
    53fa:	b1f1      	cbz	r1, 543a <Macro_keyState+0x4a>
    53fc:	2902      	cmp	r1, #2
    53fe:	d01c      	beq.n	543a <Macro_keyState+0x4a>
		}
	}
#endif

	// Only add to macro trigger list if one of three states
	switch ( state )
    5400:	1e4b      	subs	r3, r1, #1
    5402:	2b02      	cmp	r3, #2
    5404:	d819      	bhi.n	543a <Macro_keyState+0x4a>
	{
	case 0x01: // Pressed
	case 0x02: // Held
	case 0x03: // Released
		// Check if ScanCode is out of range
		if ( scanCode > MaxScanCode )
    5406:	2c59      	cmp	r4, #89	; 0x59
    5408:	d90b      	bls.n	5422 <Macro_keyState+0x32>
		{
			warn_msg("ScanCode is out of range/not defined: ");
    540a:	480d      	ldr	r0, [pc, #52]	; (5440 <Macro_keyState+0x50>)
    540c:	f002 fbcc 	bl	7ba8 <_print>
			printHex( scanCode );
    5410:	4620      	mov	r0, r4
    5412:	2101      	movs	r1, #1
    5414:	f002 fc6a 	bl	7cec <printHex_op>
			print( NL );
    5418:	480a      	ldr	r0, [pc, #40]	; (5444 <Macro_keyState+0x54>)
		macroTriggerListBuffer[ macroTriggerListBufferSize ].state    = state;
		macroTriggerListBuffer[ macroTriggerListBufferSize ].type     = 0x00; // Normal key
		macroTriggerListBufferSize++;
		break;
	}
}
    541a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		// Check if ScanCode is out of range
		if ( scanCode > MaxScanCode )
		{
			warn_msg("ScanCode is out of range/not defined: ");
			printHex( scanCode );
			print( NL );
    541e:	f002 bbc3 	b.w	7ba8 <_print>
			return;
		}

		macroTriggerListBuffer[ macroTriggerListBufferSize ].scanCode = scanCode;
    5422:	4a09      	ldr	r2, [pc, #36]	; (5448 <Macro_keyState+0x58>)
    5424:	4d09      	ldr	r5, [pc, #36]	; (544c <Macro_keyState+0x5c>)
    5426:	7813      	ldrb	r3, [r2, #0]
    5428:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    542c:	182e      	adds	r6, r5, r0
		macroTriggerListBuffer[ macroTriggerListBufferSize ].state    = state;
		macroTriggerListBuffer[ macroTriggerListBufferSize ].type     = 0x00; // Normal key
		macroTriggerListBufferSize++;
    542e:	3301      	adds	r3, #1
			print( NL );
			return;
		}

		macroTriggerListBuffer[ macroTriggerListBufferSize ].scanCode = scanCode;
		macroTriggerListBuffer[ macroTriggerListBufferSize ].state    = state;
    5430:	7071      	strb	r1, [r6, #1]
		macroTriggerListBuffer[ macroTriggerListBufferSize ].type     = 0x00; // Normal key
    5432:	2100      	movs	r1, #0
    5434:	5429      	strb	r1, [r5, r0]
			printHex( scanCode );
			print( NL );
			return;
		}

		macroTriggerListBuffer[ macroTriggerListBufferSize ].scanCode = scanCode;
    5436:	70b4      	strb	r4, [r6, #2]
		macroTriggerListBuffer[ macroTriggerListBufferSize ].state    = state;
		macroTriggerListBuffer[ macroTriggerListBufferSize ].type     = 0x00; // Normal key
		macroTriggerListBufferSize++;
    5438:	7013      	strb	r3, [r2, #0]
    543a:	bd70      	pop	{r4, r5, r6, pc}
    543c:	1fff91ba 	.word	0x1fff91ba
    5440:	0000af45 	.word	0x0000af45
    5444:	0000bc21 	.word	0x0000bc21
    5448:	1fff91c0 	.word	0x1fff91c0
    544c:	1fff9fd6 	.word	0x1fff9fd6

00005450 <cliFunc_keyHold>:
		}
	}
}

void cliFunc_keyHold( char* args )
{
    5450:	b507      	push	{r0, r1, r2, lr}
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    5452:	9001      	str	r0, [sp, #4]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    5454:	9801      	ldr	r0, [sp, #4]
    5456:	4669      	mov	r1, sp
    5458:	aa01      	add	r2, sp, #4
    545a:	f002 f8dd 	bl	7618 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    545e:	9800      	ldr	r0, [sp, #0]
    5460:	7803      	ldrb	r3, [r0, #0]
    5462:	b14b      	cbz	r3, 5478 <cliFunc_keyHold+0x28>
			break;

		// Ignore non-Scancode numbers
		switch ( arg1Ptr[0] )
    5464:	2b53      	cmp	r3, #83	; 0x53
    5466:	d1f5      	bne.n	5454 <cliFunc_keyHold+0x4>
		{
		// Scancode
		case 'S':
			Macro_keyState( (uint8_t)numToInt( &arg1Ptr[1] ), 0x02 ); // Hold scancode
    5468:	3001      	adds	r0, #1
    546a:	f002 fc97 	bl	7d9c <numToInt>
    546e:	2102      	movs	r1, #2
    5470:	b2c0      	uxtb	r0, r0
    5472:	f7ff ffbd 	bl	53f0 <Macro_keyState>
			break;
    5476:	e7ed      	b.n	5454 <cliFunc_keyHold+0x4>
		}
	}
}
    5478:	b003      	add	sp, #12
    547a:	f85d fb04 	ldr.w	pc, [sp], #4

0000547e <cliFunc_keyPress>:

void cliFunc_keyPress( char* args )
{
    547e:	b507      	push	{r0, r1, r2, lr}
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    5480:	9001      	str	r0, [sp, #4]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    5482:	9801      	ldr	r0, [sp, #4]
    5484:	4669      	mov	r1, sp
    5486:	aa01      	add	r2, sp, #4
    5488:	f002 f8c6 	bl	7618 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    548c:	9800      	ldr	r0, [sp, #0]
    548e:	7803      	ldrb	r3, [r0, #0]
    5490:	b14b      	cbz	r3, 54a6 <cliFunc_keyPress+0x28>
			break;

		// Ignore non-Scancode numbers
		switch ( arg1Ptr[0] )
    5492:	2b53      	cmp	r3, #83	; 0x53
    5494:	d1f5      	bne.n	5482 <cliFunc_keyPress+0x4>
		{
		// Scancode
		case 'S':
			Macro_keyState( (uint8_t)numToInt( &arg1Ptr[1] ), 0x01 ); // Press scancode
    5496:	3001      	adds	r0, #1
    5498:	f002 fc80 	bl	7d9c <numToInt>
    549c:	2101      	movs	r1, #1
    549e:	b2c0      	uxtb	r0, r0
    54a0:	f7ff ffa6 	bl	53f0 <Macro_keyState>
			break;
    54a4:	e7ed      	b.n	5482 <cliFunc_keyPress+0x4>
		}
	}
}
    54a6:	b003      	add	sp, #12
    54a8:	f85d fb04 	ldr.w	pc, [sp], #4

000054ac <cliFunc_keyRelease>:

void cliFunc_keyRelease( char* args )
{
    54ac:	b507      	push	{r0, r1, r2, lr}
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    54ae:	9001      	str	r0, [sp, #4]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    54b0:	9801      	ldr	r0, [sp, #4]
    54b2:	4669      	mov	r1, sp
    54b4:	aa01      	add	r2, sp, #4
    54b6:	f002 f8af 	bl	7618 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    54ba:	9800      	ldr	r0, [sp, #0]
    54bc:	7803      	ldrb	r3, [r0, #0]
    54be:	b14b      	cbz	r3, 54d4 <cliFunc_keyRelease+0x28>
			break;

		// Ignore non-Scancode numbers
		switch ( arg1Ptr[0] )
    54c0:	2b53      	cmp	r3, #83	; 0x53
    54c2:	d1f5      	bne.n	54b0 <cliFunc_keyRelease+0x4>
		{
		// Scancode
		case 'S':
			Macro_keyState( (uint8_t)numToInt( &arg1Ptr[1] ), 0x03 ); // Release scancode
    54c4:	3001      	adds	r0, #1
    54c6:	f002 fc69 	bl	7d9c <numToInt>
    54ca:	2103      	movs	r1, #3
    54cc:	b2c0      	uxtb	r0, r0
    54ce:	f7ff ff8f 	bl	53f0 <Macro_keyState>
			break;
    54d2:	e7ed      	b.n	54b0 <cliFunc_keyRelease+0x4>
		}
	}
}
    54d4:	b003      	add	sp, #12
    54d6:	f85d fb04 	ldr.w	pc, [sp], #4
    54da:	0000      	movs	r0, r0

000054dc <Macro_appendResultMacroToPendingList>:


// Append result macro to pending list, checking for duplicates
// Do nothing if duplicate
void Macro_appendResultMacroToPendingList( const TriggerMacro *triggerMacro )
{
    54dc:	b570      	push	{r4, r5, r6, lr}
	// Lookup result macro index
	var_uint_t resultMacroIndex = triggerMacro->result;

	// Iterate through result macro pending list, making sure this macro hasn't been added yet
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    54de:	4a1f      	ldr	r2, [pc, #124]	; (555c <Macro_appendResultMacroToPendingList+0x80>)
// Append result macro to pending list, checking for duplicates
// Do nothing if duplicate
void Macro_appendResultMacroToPendingList( const TriggerMacro *triggerMacro )
{
	// Lookup result macro index
	var_uint_t resultMacroIndex = triggerMacro->result;
    54e0:	7903      	ldrb	r3, [r0, #4]

	// Iterate through result macro pending list, making sure this macro hasn't been added yet
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    54e2:	8811      	ldrh	r1, [r2, #0]
    54e4:	2400      	movs	r4, #0
    54e6:	b2e6      	uxtb	r6, r4
    54e8:	428e      	cmp	r6, r1
    54ea:	4d1d      	ldr	r5, [pc, #116]	; (5560 <Macro_appendResultMacroToPendingList+0x84>)
    54ec:	d206      	bcs.n	54fc <Macro_appendResultMacroToPendingList+0x20>
	{
		// If duplicate found, do nothing
		if ( macroResultMacroPendingList[ macro ] == resultMacroIndex )
    54ee:	f835 5016 	ldrh.w	r5, [r5, r6, lsl #1]
    54f2:	429d      	cmp	r5, r3
    54f4:	f104 0401 	add.w	r4, r4, #1
    54f8:	d1f5      	bne.n	54e6 <Macro_appendResultMacroToPendingList+0xa>
    54fa:	e02d      	b.n	5558 <Macro_appendResultMacroToPendingList+0x7c>
			return;
	}

	// No duplicates found, add to pending list
	macroResultMacroPendingList[ macroResultMacroPendingListSize++ ] = resultMacroIndex;
    54fc:	1c4c      	adds	r4, r1, #1
    54fe:	f825 3011 	strh.w	r3, [r5, r1, lsl #1]

	// Lookup scanCode of the last key in the last combo
	var_uint_t pos = 0;
	for ( uint8_t comboLength = triggerMacro->guide[0]; comboLength > 0; )
    5502:	6800      	ldr	r0, [r0, #0]
		if ( macroResultMacroPendingList[ macro ] == resultMacroIndex )
			return;
	}

	// No duplicates found, add to pending list
	macroResultMacroPendingList[ macroResultMacroPendingListSize++ ] = resultMacroIndex;
    5504:	8014      	strh	r4, [r2, #0]

	// Lookup scanCode of the last key in the last combo
	var_uint_t pos = 0;
	for ( uint8_t comboLength = triggerMacro->guide[0]; comboLength > 0; )
    5506:	7801      	ldrb	r1, [r0, #0]

	// No duplicates found, add to pending list
	macroResultMacroPendingList[ macroResultMacroPendingListSize++ ] = resultMacroIndex;

	// Lookup scanCode of the last key in the last combo
	var_uint_t pos = 0;
    5508:	2200      	movs	r2, #0
	for ( uint8_t comboLength = triggerMacro->guide[0]; comboLength > 0; )
    550a:	b131      	cbz	r1, 551a <Macro_appendResultMacroToPendingList+0x3e>
	{
		pos += TriggerGuideSize * comboLength + 1;
    550c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5510:	3101      	adds	r1, #1
    5512:	4411      	add	r1, r2
    5514:	b2ca      	uxtb	r2, r1
		comboLength = triggerMacro->guide[ pos ];
    5516:	5c81      	ldrb	r1, [r0, r2]
    5518:	e7f7      	b.n	550a <Macro_appendResultMacroToPendingList+0x2e>
	}

	uint8_t scanCode = ((TriggerGuide*)&triggerMacro->guide[ pos - TriggerGuideSize ])->scanCode;
    551a:	4402      	add	r2, r0
    551c:	2003      	movs	r0, #3
    551e:	f812 4c01 	ldrb.w	r4, [r2, #-1]

	// Lookup scanCode in buffer list for the current state and stateType
	for ( var_uint_t keyIndex = 0; keyIndex < macroTriggerListBufferSize; keyIndex++ )
    5522:	4a10      	ldr	r2, [pc, #64]	; (5564 <Macro_appendResultMacroToPendingList+0x88>)
    5524:	7811      	ldrb	r1, [r2, #0]
    5526:	4a10      	ldr	r2, [pc, #64]	; (5568 <Macro_appendResultMacroToPendingList+0x8c>)
    5528:	fb00 2001 	mla	r0, r0, r1, r2
    552c:	4282      	cmp	r2, r0
    552e:	d00e      	beq.n	554e <Macro_appendResultMacroToPendingList+0x72>
	{
		if ( macroTriggerListBuffer[ keyIndex ].scanCode == scanCode )
    5530:	7811      	ldrb	r1, [r2, #0]
    5532:	42a1      	cmp	r1, r4
    5534:	d109      	bne.n	554a <Macro_appendResultMacroToPendingList+0x6e>
		{
			ResultMacroRecordList[ resultMacroIndex ].state     = macroTriggerListBuffer[ keyIndex ].state;
    5536:	4d0d      	ldr	r5, [pc, #52]	; (556c <Macro_appendResultMacroToPendingList+0x90>)
    5538:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    553c:	4429      	add	r1, r5
    553e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
    5542:	704d      	strb	r5, [r1, #1]
			ResultMacroRecordList[ resultMacroIndex ].stateType = macroTriggerListBuffer[ keyIndex ].type;
    5544:	f812 5c02 	ldrb.w	r5, [r2, #-2]
    5548:	708d      	strb	r5, [r1, #2]
    554a:	3203      	adds	r2, #3
    554c:	e7ee      	b.n	552c <Macro_appendResultMacroToPendingList+0x50>
		}
	}

	// Reset the macro position
	ResultMacroRecordList[ resultMacroIndex ].pos = 0;
    554e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5552:	4a06      	ldr	r2, [pc, #24]	; (556c <Macro_appendResultMacroToPendingList+0x90>)
    5554:	2100      	movs	r1, #0
    5556:	54d1      	strb	r1, [r2, r3]
    5558:	bd70      	pop	{r4, r5, r6, pc}
    555a:	bf00      	nop
    555c:	1fff91d2 	.word	0x1fff91d2
    5560:	1fff91d4 	.word	0x1fff91d4
    5564:	1fff91c0 	.word	0x1fff91c0
    5568:	1fff9fd8 	.word	0x1fff9fd8
    556c:	1fffa0e1 	.word	0x1fffa0e1

00005570 <Macro_process>:


// Macro Procesing Loop
// Called once per USB buffer send
inline void Macro_process()
{
    5570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(ConnectEnabled_define)
	// Only compile in if a Connect node module is available
	// If this is a interconnect slave node, send all scancodes to master node
	if ( !Connect_master )
    5572:	4b30      	ldr	r3, [pc, #192]	; (5634 <Macro_process+0xc4>)
    5574:	781d      	ldrb	r5, [r3, #0]
    5576:	b955      	cbnz	r5, 558e <Macro_process+0x1e>
	{
		if ( macroTriggerListBufferSize > 0 )
    5578:	4c2f      	ldr	r4, [pc, #188]	; (5638 <Macro_process+0xc8>)
    557a:	7822      	ldrb	r2, [r4, #0]
    557c:	2a00      	cmp	r2, #0
    557e:	d058      	beq.n	5632 <Macro_process+0xc2>
		{
			Connect_send_ScanCode( Connect_id, macroTriggerListBuffer, macroTriggerListBufferSize );
    5580:	4b2e      	ldr	r3, [pc, #184]	; (563c <Macro_process+0xcc>)
    5582:	492f      	ldr	r1, [pc, #188]	; (5640 <Macro_process+0xd0>)
    5584:	7818      	ldrb	r0, [r3, #0]
    5586:	f7fe feef 	bl	4368 <Connect_send_ScanCode>
			macroTriggerListBufferSize = 0;
    558a:	7025      	strb	r5, [r4, #0]
    558c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return;
	}
#endif

	// Only do one round of macro processing between Output Module timer sends
	if ( USBKeys_Sent != 0 )
    558e:	4c2d      	ldr	r4, [pc, #180]	; (5644 <Macro_process+0xd4>)
    5590:	7823      	ldrb	r3, [r4, #0]
    5592:	2b00      	cmp	r3, #0
    5594:	d14d      	bne.n	5632 <Macro_process+0xc2>
		return;

#if defined(ConnectEnabled_define)
	// Check if there are any ScanCodes in the interconnect cache to process
	if ( Connect_master && macroInterconnectCacheSize > 0 )
    5596:	4a2c      	ldr	r2, [pc, #176]	; (5648 <Macro_process+0xd8>)
    5598:	7811      	ldrb	r1, [r2, #0]
    559a:	b919      	cbnz	r1, 55a4 <Macro_process+0x34>
		}
	}
#endif

	// If the pause flag is set, only process if the step counter is non-zero
	if ( macroPauseMode )
    559c:	4b2b      	ldr	r3, [pc, #172]	; (564c <Macro_process+0xdc>)
    559e:	781b      	ldrb	r3, [r3, #0]
    55a0:	bb7b      	cbnz	r3, 5602 <Macro_process+0x92>
    55a2:	e036      	b.n	5612 <Macro_process+0xa2>
	// Check if there are any ScanCodes in the interconnect cache to process
	if ( Connect_master && macroInterconnectCacheSize > 0 )
	{
		// Iterate over all the cache ScanCodes
		uint8_t currentInterconnectCacheSize = macroInterconnectCacheSize;
		macroInterconnectCacheSize = 0;
    55a4:	7013      	strb	r3, [r2, #0]
    55a6:	4b2a      	ldr	r3, [pc, #168]	; (5650 <Macro_process+0xe0>)
    55a8:	2603      	movs	r6, #3
    55aa:	fb06 3601 	mla	r6, r6, r1, r3
    55ae:	1e5f      	subs	r7, r3, #1
		for ( uint8_t c = 0; c < currentInterconnectCacheSize; c++ )
    55b0:	42b3      	cmp	r3, r6
    55b2:	d0f3      	beq.n	559c <Macro_process+0x2c>
		{
			// Add to the trigger list
			macroTriggerListBuffer[ macroTriggerListBufferSize++ ] = macroInterconnectCache[ c ];
    55b4:	4820      	ldr	r0, [pc, #128]	; (5638 <Macro_process+0xc8>)
    55b6:	7801      	ldrb	r1, [r0, #0]
    55b8:	1c4d      	adds	r5, r1, #1
    55ba:	7005      	strb	r5, [r0, #0]
    55bc:	4618      	mov	r0, r3
    55be:	4d20      	ldr	r5, [pc, #128]	; (5640 <Macro_process+0xd0>)
    55c0:	f830 cd01 	ldrh.w	ip, [r0, #-1]!
    55c4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    55c8:	eb05 0e01 	add.w	lr, r5, r1
    55cc:	f825 c001 	strh.w	ip, [r5, r1]
    55d0:	7881      	ldrb	r1, [r0, #2]
    55d2:	f88e 1002 	strb.w	r1, [lr, #2]

			// TODO Handle other TriggerGuide types (e.g. analog)
			switch ( macroInterconnectCache[ c ].type )
    55d6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    55da:	b981      	cbnz	r1, 55fe <Macro_process+0x8e>
			{
			// Normal (Press/Hold/Release)
			case 0x00:
				// Decide what to do based on the current state
				switch ( macroInterconnectCache[ c ].state )
    55dc:	7819      	ldrb	r1, [r3, #0]
    55de:	2901      	cmp	r1, #1
    55e0:	d10d      	bne.n	55fe <Macro_process+0x8e>
				{
				// Re-add to interconnect cache in hold state
				case 0x01: // Press
				//case 0x02: // Hold // XXX Why does this not work? -HaaTa
					macroInterconnectCache[ c ].state = 0x02;
    55e2:	2102      	movs	r1, #2
    55e4:	7019      	strb	r1, [r3, #0]
					macroInterconnectCache[ macroInterconnectCacheSize++ ] = macroInterconnectCache[ c ];
    55e6:	7811      	ldrb	r1, [r2, #0]
    55e8:	f8b0 e000 	ldrh.w	lr, [r0]
    55ec:	1c4d      	adds	r5, r1, #1
    55ee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    55f2:	7015      	strb	r5, [r2, #0]
    55f4:	f827 e001 	strh.w	lr, [r7, r1]
    55f8:	187d      	adds	r5, r7, r1
    55fa:	7881      	ldrb	r1, [r0, #2]
    55fc:	70a9      	strb	r1, [r5, #2]
    55fe:	3303      	adds	r3, #3
    5600:	e7d6      	b.n	55b0 <Macro_process+0x40>
#endif

	// If the pause flag is set, only process if the step counter is non-zero
	if ( macroPauseMode )
	{
		if ( macroStepCounter == 0 )
    5602:	4a14      	ldr	r2, [pc, #80]	; (5654 <Macro_process+0xe4>)
    5604:	8813      	ldrh	r3, [r2, #0]
    5606:	b1a3      	cbz	r3, 5632 <Macro_process+0xc2>
			return;

		// Proceed, decrementing the step counter
		macroStepCounter--;
    5608:	3b01      	subs	r3, #1
		dbug_print("Macro Step");
    560a:	4813      	ldr	r0, [pc, #76]	; (5658 <Macro_process+0xe8>)
	{
		if ( macroStepCounter == 0 )
			return;

		// Proceed, decrementing the step counter
		macroStepCounter--;
    560c:	8013      	strh	r3, [r2, #0]
		dbug_print("Macro Step");
    560e:	f002 facb 	bl	7ba8 <_print>

	// Process result macros
	Result_process();

	// Signal buffer that we've used it
	Scan_finishedWithMacro( macroTriggerListBufferSize );
    5612:	4d09      	ldr	r5, [pc, #36]	; (5638 <Macro_process+0xc8>)
		macroStepCounter--;
		dbug_print("Macro Step");
	}

	// Process Trigger Macros
	Trigger_process();
    5614:	f000 fb50 	bl	5cb8 <Trigger_process>


	// Process result macros
	Result_process();
    5618:	f000 f9b8 	bl	598c <Result_process>

	// Signal buffer that we've used it
	Scan_finishedWithMacro( macroTriggerListBufferSize );
    561c:	7828      	ldrb	r0, [r5, #0]
    561e:	f7ff fabf 	bl	4ba0 <Scan_finishedWithMacro>

	// Reset TriggerList buffer
	macroTriggerListBufferSize = 0;

	// If Macro debug mode is set, clear the USB Buffer
	if ( macroDebugMode )
    5622:	4a0e      	ldr	r2, [pc, #56]	; (565c <Macro_process+0xec>)
    5624:	7812      	ldrb	r2, [r2, #0]

	// Signal buffer that we've used it
	Scan_finishedWithMacro( macroTriggerListBufferSize );

	// Reset TriggerList buffer
	macroTriggerListBufferSize = 0;
    5626:	2300      	movs	r3, #0
    5628:	702b      	strb	r3, [r5, #0]

	// If Macro debug mode is set, clear the USB Buffer
	if ( macroDebugMode )
    562a:	b112      	cbz	r2, 5632 <Macro_process+0xc2>
	{
		USBKeys_Modifiers = 0;
    562c:	4a0c      	ldr	r2, [pc, #48]	; (5660 <Macro_process+0xf0>)
		USBKeys_Sent = 0;
    562e:	7023      	strb	r3, [r4, #0]
	macroTriggerListBufferSize = 0;

	// If Macro debug mode is set, clear the USB Buffer
	if ( macroDebugMode )
	{
		USBKeys_Modifiers = 0;
    5630:	7013      	strb	r3, [r2, #0]
    5632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5634:	1fff91ba 	.word	0x1fff91ba
    5638:	1fff91c0 	.word	0x1fff91c0
    563c:	1fff89c5 	.word	0x1fff89c5
    5640:	1fff9fd6 	.word	0x1fff9fd6
    5644:	1fff9385 	.word	0x1fff9385
    5648:	1fff91ce 	.word	0x1fff91ce
    564c:	1fff91c4 	.word	0x1fff91c4
    5650:	1fffa264 	.word	0x1fffa264
    5654:	1fff91be 	.word	0x1fff91be
    5658:	0000af81 	.word	0x0000af81
    565c:	1fff91d0 	.word	0x1fff91d0
    5660:	1fff9376 	.word	0x1fff9376

00005664 <Macro_setup>:
	}
}


inline void Macro_setup()
{
    5664:	b508      	push	{r3, lr}
	// Register Macro CLI dictionary
	CLI_registerDictionary( macroCLIDict, macroCLIDictName );
    5666:	480a      	ldr	r0, [pc, #40]	; (5690 <Macro_setup+0x2c>)
    5668:	490a      	ldr	r1, [pc, #40]	; (5694 <Macro_setup+0x30>)
    566a:	f002 f849 	bl	7700 <CLI_registerDictionary>

	// Disable Macro debug mode
	macroDebugMode = 0;
    566e:	4a0a      	ldr	r2, [pc, #40]	; (5698 <Macro_setup+0x34>)
    5670:	2300      	movs	r3, #0
    5672:	7013      	strb	r3, [r2, #0]

	// Disable Macro pause flag
	macroPauseMode = 0;
    5674:	4a09      	ldr	r2, [pc, #36]	; (569c <Macro_setup+0x38>)
    5676:	7013      	strb	r3, [r2, #0]

	// Set Macro step counter to zero
	macroStepCounter = 0;
    5678:	4a09      	ldr	r2, [pc, #36]	; (56a0 <Macro_setup+0x3c>)
    567a:	8013      	strh	r3, [r2, #0]

	// Make sure macro trigger buffer is empty
	macroTriggerListBufferSize = 0;
    567c:	4a09      	ldr	r2, [pc, #36]	; (56a4 <Macro_setup+0x40>)
    567e:	7013      	strb	r3, [r2, #0]

	// Set the current rotated layer to 0
	Macro_rotationLayer = 0;
    5680:	4a09      	ldr	r2, [pc, #36]	; (56a8 <Macro_setup+0x44>)
    5682:	8013      	strh	r3, [r2, #0]

	// Setup Triggers
	Trigger_setup();
    5684:	f000 fb0a 	bl	5c9c <Trigger_setup>

	// Setup Results
	Result_setup();
}
    5688:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	// Setup Triggers
	Trigger_setup();

	// Setup Results
	Result_setup();
    568c:	f000 b970 	b.w	5970 <Result_setup>
    5690:	00009adc 	.word	0x00009adc
    5694:	000098b4 	.word	0x000098b4
    5698:	1fff91d0 	.word	0x1fff91d0
    569c:	1fff91c4 	.word	0x1fff91c4
    56a0:	1fff91be 	.word	0x1fff91be
    56a4:	1fff91c0 	.word	0x1fff91c0
    56a8:	1fff9fd4 	.word	0x1fff9fd4

000056ac <macroDebugShowTrigger>:
}

void macroDebugShowTrigger( var_uint_t index )
{
	// Only proceed if the macro exists
	if ( index >= TriggerMacroNum )
    56ac:	286c      	cmp	r0, #108	; 0x6c
	info_msg("Macro Processing Mode: ");
	printInt8( macroPauseMode );
}

void macroDebugShowTrigger( var_uint_t index )
{
    56ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    56b2:	4605      	mov	r5, r0
	// Only proceed if the macro exists
	if ( index >= TriggerMacroNum )
    56b4:	d865      	bhi.n	5782 <macroDebugShowTrigger+0xd6>

	// Trigger Macro Show
	const TriggerMacro *macro = &TriggerMacroList[ index ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ index ];

	print( NL );
    56b6:	4834      	ldr	r0, [pc, #208]	; (5788 <macroDebugShowTrigger+0xdc>)
	printInt16( (uint16_t)index ); // Hopefully large enough :P (can't assume 32-bit)
	print( NL );

	// Read the comboLength for combo in the sequence (sequence of combos)
	var_uint_t pos = 0;
	uint8_t comboLength = macro->guide[ pos ];
    56b8:	4e34      	ldr	r6, [pc, #208]	; (578c <macroDebugShowTrigger+0xe0>)

	// Trigger Macro Show
	const TriggerMacro *macro = &TriggerMacroList[ index ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ index ];

	print( NL );
    56ba:	f002 fa75 	bl	7ba8 <_print>
	info_msg("Trigger Macro Index: ");
    56be:	4834      	ldr	r0, [pc, #208]	; (5790 <macroDebugShowTrigger+0xe4>)
    56c0:	f002 fa72 	bl	7ba8 <_print>
	printInt16( (uint16_t)index ); // Hopefully large enough :P (can't assume 32-bit)
    56c4:	4628      	mov	r0, r5
    56c6:	f002 fabc 	bl	7c42 <printInt16>
	print( NL );
    56ca:	482f      	ldr	r0, [pc, #188]	; (5788 <macroDebugShowTrigger+0xdc>)
    56cc:	f002 fa6c 	bl	7ba8 <_print>

	// Read the comboLength for combo in the sequence (sequence of combos)
	var_uint_t pos = 0;
	uint8_t comboLength = macro->guide[ pos ];
    56d0:	f856 8035 	ldr.w	r8, [r6, r5, lsl #3]
    56d4:	f898 7000 	ldrb.w	r7, [r8]
	info_msg("Trigger Macro Index: ");
	printInt16( (uint16_t)index ); // Hopefully large enough :P (can't assume 32-bit)
	print( NL );

	// Read the comboLength for combo in the sequence (sequence of combos)
	var_uint_t pos = 0;
    56d8:	2400      	movs	r4, #0
	uint8_t comboLength = macro->guide[ pos ];

	// Iterate through and interpret the guide
	while ( comboLength != 0 )
    56da:	b367      	cbz	r7, 5736 <macroDebugShowTrigger+0x8a>
	{
		// Initial position of the combo
		var_uint_t comboPos = ++pos;
    56dc:	3401      	adds	r4, #1
    56de:	b2e4      	uxtb	r4, r4

		// Iterate through the combo
		while ( pos < comboLength * TriggerGuideSize + comboPos )
    56e0:	2303      	movs	r3, #3
    56e2:	fb13 4707 	smlabb	r7, r3, r7, r4
    56e6:	42bc      	cmp	r4, r7
    56e8:	d21e      	bcs.n	5728 <macroDebugShowTrigger+0x7c>
		{
			// Assign TriggerGuide element (key type, state and scancode)
			TriggerGuide *guide = (TriggerGuide*)(&macro->guide[ pos ]);
    56ea:	eb08 0904 	add.w	r9, r8, r4

			// Display guide information about trigger key
			printHex( guide->scanCode );
    56ee:	2101      	movs	r1, #1
    56f0:	f899 0002 	ldrb.w	r0, [r9, #2]
    56f4:	f002 fafa 	bl	7cec <printHex_op>
			print("|");
    56f8:	4826      	ldr	r0, [pc, #152]	; (5794 <macroDebugShowTrigger+0xe8>)
    56fa:	f002 fa55 	bl	7ba8 <_print>
			printHex( guide->type );
    56fe:	f818 0004 	ldrb.w	r0, [r8, r4]
    5702:	2101      	movs	r1, #1
    5704:	f002 faf2 	bl	7cec <printHex_op>
			print("|");
			printHex( guide->state );

			// Increment position
			pos += TriggerGuideSize;
    5708:	3403      	adds	r4, #3

			// Display guide information about trigger key
			printHex( guide->scanCode );
			print("|");
			printHex( guide->type );
			print("|");
    570a:	4822      	ldr	r0, [pc, #136]	; (5794 <macroDebugShowTrigger+0xe8>)
    570c:	f002 fa4c 	bl	7ba8 <_print>
			printHex( guide->state );

			// Increment position
			pos += TriggerGuideSize;
    5710:	b2e4      	uxtb	r4, r4
			// Display guide information about trigger key
			printHex( guide->scanCode );
			print("|");
			printHex( guide->type );
			print("|");
			printHex( guide->state );
    5712:	f899 0001 	ldrb.w	r0, [r9, #1]
    5716:	2101      	movs	r1, #1
    5718:	f002 fae8 	bl	7cec <printHex_op>

			// Increment position
			pos += TriggerGuideSize;

			// Only show combo separator if there are combos left in the sequence element
			if ( pos < comboLength * TriggerGuideSize + comboPos )
    571c:	42bc      	cmp	r4, r7
    571e:	d2e2      	bcs.n	56e6 <macroDebugShowTrigger+0x3a>
				print("+");
    5720:	481d      	ldr	r0, [pc, #116]	; (5798 <macroDebugShowTrigger+0xec>)
    5722:	f002 fa41 	bl	7ba8 <_print>
    5726:	e7de      	b.n	56e6 <macroDebugShowTrigger+0x3a>
		}

		// Read the next comboLength
		comboLength = macro->guide[ pos ];
    5728:	f818 7004 	ldrb.w	r7, [r8, r4]

		// Only show sequence separator if there is another combo to process
		if ( comboLength != 0 )
    572c:	b11f      	cbz	r7, 5736 <macroDebugShowTrigger+0x8a>
			print(";");
    572e:	481b      	ldr	r0, [pc, #108]	; (579c <macroDebugShowTrigger+0xf0>)
    5730:	f002 fa3a 	bl	7ba8 <_print>
    5734:	e7d1      	b.n	56da <macroDebugShowTrigger+0x2e>
	}

	// Display current position
	print( NL "Position: " );
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)
    5736:	4c1a      	ldr	r4, [pc, #104]	; (57a0 <macroDebugShowTrigger+0xf4>)
		if ( comboLength != 0 )
			print(";");
	}

	// Display current position
	print( NL "Position: " );
    5738:	481a      	ldr	r0, [pc, #104]	; (57a4 <macroDebugShowTrigger+0xf8>)
    573a:	f002 fa35 	bl	7ba8 <_print>
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)

	// Display result macro index
	print( NL "Result Macro Index: " );
	printInt16( (uint16_t)macro->result ); // Hopefully large enough :P (can't assume 32-bit)
    573e:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
			print(";");
	}

	// Display current position
	print( NL "Position: " );
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)
    5742:	f814 0015 	ldrb.w	r0, [r4, r5, lsl #1]
    5746:	f002 fa7c 	bl	7c42 <printInt16>

	// Display result macro index
	print( NL "Result Macro Index: " );
    574a:	4817      	ldr	r0, [pc, #92]	; (57a8 <macroDebugShowTrigger+0xfc>)
    574c:	f002 fa2c 	bl	7ba8 <_print>
	printInt16( (uint16_t)macro->result ); // Hopefully large enough :P (can't assume 32-bit)

	// Display trigger macro state
	print( NL "Trigger Macro State: " );
	switch ( record->state )
    5750:	eb04 0545 	add.w	r5, r4, r5, lsl #1
	print( NL "Position: " );
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)

	// Display result macro index
	print( NL "Result Macro Index: " );
	printInt16( (uint16_t)macro->result ); // Hopefully large enough :P (can't assume 32-bit)
    5754:	7930      	ldrb	r0, [r6, #4]
    5756:	f002 fa74 	bl	7c42 <printInt16>

	// Display trigger macro state
	print( NL "Trigger Macro State: " );
    575a:	4814      	ldr	r0, [pc, #80]	; (57ac <macroDebugShowTrigger+0x100>)
    575c:	f002 fa24 	bl	7ba8 <_print>
	switch ( record->state )
    5760:	786b      	ldrb	r3, [r5, #1]
    5762:	2b01      	cmp	r3, #1
    5764:	d006      	beq.n	5774 <macroDebugShowTrigger+0xc8>
    5766:	d303      	bcc.n	5770 <macroDebugShowTrigger+0xc4>
    5768:	2b02      	cmp	r3, #2
    576a:	d005      	beq.n	5778 <macroDebugShowTrigger+0xcc>
    576c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	{
	case TriggerMacro_Press:   print("Press");   break;
    5770:	480f      	ldr	r0, [pc, #60]	; (57b0 <macroDebugShowTrigger+0x104>)
    5772:	e002      	b.n	577a <macroDebugShowTrigger+0xce>
	case TriggerMacro_Release: print("Release"); break;
    5774:	480f      	ldr	r0, [pc, #60]	; (57b4 <macroDebugShowTrigger+0x108>)
    5776:	e000      	b.n	577a <macroDebugShowTrigger+0xce>
	case TriggerMacro_Waiting: print("Waiting"); break;
    5778:	480f      	ldr	r0, [pc, #60]	; (57b8 <macroDebugShowTrigger+0x10c>)
	}
}
    577a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	print( NL "Trigger Macro State: " );
	switch ( record->state )
	{
	case TriggerMacro_Press:   print("Press");   break;
	case TriggerMacro_Release: print("Release"); break;
	case TriggerMacro_Waiting: print("Waiting"); break;
    577e:	f002 ba13 	b.w	7ba8 <_print>
    5782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5786:	bf00      	nop
    5788:	0000bc21 	.word	0x0000bc21
    578c:	0000a0e0 	.word	0x0000a0e0
    5790:	0000afa1 	.word	0x0000afa1
    5794:	0000afc9 	.word	0x0000afc9
    5798:	00009342 	.word	0x00009342
    579c:	0000afcb 	.word	0x0000afcb
    57a0:	1fffa36e 	.word	0x1fffa36e
    57a4:	0000afcd 	.word	0x0000afcd
    57a8:	0000afda 	.word	0x0000afda
    57ac:	0000aff1 	.word	0x0000aff1
    57b0:	0000b07c 	.word	0x0000b07c
    57b4:	0000b085 	.word	0x0000b085
    57b8:	0000b009 	.word	0x0000b009

000057bc <macroDebugShowResult>:
}

void macroDebugShowResult( var_uint_t index )
{
	// Only proceed if the macro exists
	if ( index >= ResultMacroNum )
    57bc:	2861      	cmp	r0, #97	; 0x61
	case TriggerMacro_Waiting: print("Waiting"); break;
	}
}

void macroDebugShowResult( var_uint_t index )
{
    57be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57c2:	4604      	mov	r4, r0
	// Only proceed if the macro exists
	if ( index >= ResultMacroNum )
    57c4:	f200 8095 	bhi.w	58f2 <macroDebugShowResult+0x136>

	// Trigger Macro Show
	const ResultMacro *macro = &ResultMacroList[ index ];
	ResultMacroRecord *record = &ResultMacroRecordList[ index ];

	print( NL );
    57c8:	484b      	ldr	r0, [pc, #300]	; (58f8 <macroDebugShowResult+0x13c>)
    57ca:	f002 f9ed 	bl	7ba8 <_print>
	info_msg("Result Macro Index: ");
    57ce:	484b      	ldr	r0, [pc, #300]	; (58fc <macroDebugShowResult+0x140>)
    57d0:	f002 f9ea 	bl	7ba8 <_print>
	printInt16( (uint16_t)index ); // Hopefully large enough :P (can't assume 32-bit)
    57d4:	4620      	mov	r0, r4
    57d6:	f002 fa34 	bl	7c42 <printInt16>
	print( NL );
    57da:	4847      	ldr	r0, [pc, #284]	; (58f8 <macroDebugShowResult+0x13c>)
    57dc:	f002 f9e4 	bl	7ba8 <_print>

	// Read the comboLength for combo in the sequence (sequence of combos)
	var_uint_t pos = 0;
	uint8_t comboLength = macro->guide[ pos++ ];
    57e0:	4b47      	ldr	r3, [pc, #284]	; (5900 <macroDebugShowResult+0x144>)
    57e2:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
    57e6:	f896 8000 	ldrb.w	r8, [r6]
    57ea:	2701      	movs	r7, #1

	// Iterate through and interpret the guide
	while ( comboLength != 0 )
    57ec:	f1b8 0f00 	cmp.w	r8, #0
    57f0:	d064      	beq.n	58bc <macroDebugShowResult+0x100>
    57f2:	463d      	mov	r5, r7
    57f4:	2700      	movs	r7, #0
		{
			// Assign TriggerGuide element (key type, state and scancode)
			ResultGuide *guide = (ResultGuide*)(&macro->guide[ pos ]);

			// Display Function Index
			printHex( guide->index );
    57f6:	2101      	movs	r1, #1
    57f8:	5d70      	ldrb	r0, [r6, r5]
			print("|");

			// Display Function Ptr Address
			printHex( (nat_ptr_t)CapabilitiesList[ guide->index ].func );
    57fa:	f8df 9130 	ldr.w	r9, [pc, #304]	; 592c <macroDebugShowResult+0x170>
		{
			// Assign TriggerGuide element (key type, state and scancode)
			ResultGuide *guide = (ResultGuide*)(&macro->guide[ pos ]);

			// Display Function Index
			printHex( guide->index );
    57fe:	f002 fa75 	bl	7cec <printHex_op>
			print("|");
    5802:	4840      	ldr	r0, [pc, #256]	; (5904 <macroDebugShowResult+0x148>)
    5804:	f002 f9d0 	bl	7ba8 <_print>

			// Display Function Ptr Address
			printHex( (nat_ptr_t)CapabilitiesList[ guide->index ].func );
    5808:	5d73      	ldrb	r3, [r6, r5]
    580a:	2101      	movs	r1, #1
    580c:	f839 0033 	ldrh.w	r0, [r9, r3, lsl #3]
    5810:	f002 fa6c 	bl	7cec <printHex_op>
			print("|");
    5814:	483b      	ldr	r0, [pc, #236]	; (5904 <macroDebugShowResult+0x148>)
    5816:	f002 f9c7 	bl	7ba8 <_print>

			// Display/Lookup Capability Name (utilize debug mode of capability)
			void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);
    581a:	5d73      	ldrb	r3, [r6, r5]
			capability( 0xFF, 0xFF, 0 );
    581c:	20ff      	movs	r0, #255	; 0xff
    581e:	4601      	mov	r1, r0
    5820:	2200      	movs	r2, #0
    5822:	f859 3033 	ldr.w	r3, [r9, r3, lsl #3]
    5826:	4798      	blx	r3

			// Display Argument(s)
			print("(");
    5828:	4837      	ldr	r0, [pc, #220]	; (5908 <macroDebugShowResult+0x14c>)
    582a:	f002 f9bd 	bl	7ba8 <_print>

		// Iterate through the combo
		while ( funcCount < comboLength )
		{
			// Assign TriggerGuide element (key type, state and scancode)
			ResultGuide *guide = (ResultGuide*)(&macro->guide[ pos ]);
    582e:	eb06 0b05 	add.w	fp, r6, r5
			// Display/Lookup Capability Name (utilize debug mode of capability)
			void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);
			capability( 0xFF, 0xFF, 0 );

			// Display Argument(s)
			print("(");
    5832:	2200      	movs	r2, #0
			for ( var_uint_t arg = 0; arg < CapabilitiesList[ guide->index ].argCount; arg++ )
    5834:	f89b 3000 	ldrb.w	r3, [fp]
    5838:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 592c <macroDebugShowResult+0x170>
    583c:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
    5840:	7919      	ldrb	r1, [r3, #4]
    5842:	b2d3      	uxtb	r3, r2
    5844:	4299      	cmp	r1, r3
    5846:	d919      	bls.n	587c <macroDebugShowResult+0xc0>
			{
				// Arguments are only 8 bit values
				printHex( (&guide->args)[ arg ] );
    5848:	eb0b 0103 	add.w	r1, fp, r3
    584c:	9201      	str	r2, [sp, #4]
    584e:	7848      	ldrb	r0, [r1, #1]
    5850:	9300      	str	r3, [sp, #0]
    5852:	2101      	movs	r1, #1
    5854:	f002 fa4a 	bl	7cec <printHex_op>

				// Only show arg separator if there are args left
				if ( arg + 1 < CapabilitiesList[ guide->index ].argCount )
    5858:	f89b 1000 	ldrb.w	r1, [fp]
    585c:	9b00      	ldr	r3, [sp, #0]
    585e:	9a01      	ldr	r2, [sp, #4]
    5860:	eb0a 0ac1 	add.w	sl, sl, r1, lsl #3
    5864:	3301      	adds	r3, #1
    5866:	f89a 1004 	ldrb.w	r1, [sl, #4]
    586a:	428b      	cmp	r3, r1
    586c:	da04      	bge.n	5878 <macroDebugShowResult+0xbc>
					print(",");
    586e:	4827      	ldr	r0, [pc, #156]	; (590c <macroDebugShowResult+0x150>)
    5870:	9200      	str	r2, [sp, #0]
    5872:	f002 f999 	bl	7ba8 <_print>
    5876:	9a00      	ldr	r2, [sp, #0]
    5878:	3201      	adds	r2, #1
    587a:	e7db      	b.n	5834 <macroDebugShowResult+0x78>
			}
			print(")");
    587c:	4824      	ldr	r0, [pc, #144]	; (5910 <macroDebugShowResult+0x154>)
    587e:	f002 f993 	bl	7ba8 <_print>

			// Increment position
			pos += ResultGuideSize( guide );
    5882:	f89b 3000 	ldrb.w	r3, [fp]
    5886:	eb0a 0ac3 	add.w	sl, sl, r3, lsl #3

			// Increment function count
			funcCount++;
    588a:	3701      	adds	r7, #1
    588c:	f89a 3004 	ldrb.w	r3, [sl, #4]
    5890:	b2ff      	uxtb	r7, r7
    5892:	3301      	adds	r3, #1
					print(",");
			}
			print(")");

			// Increment position
			pos += ResultGuideSize( guide );
    5894:	441d      	add	r5, r3

			// Increment function count
			funcCount++;

			// Only show combo separator if there are combos left in the sequence element
			if ( funcCount < comboLength )
    5896:	4547      	cmp	r7, r8
					print(",");
			}
			print(")");

			// Increment position
			pos += ResultGuideSize( guide );
    5898:	b2ed      	uxtb	r5, r5

			// Increment function count
			funcCount++;

			// Only show combo separator if there are combos left in the sequence element
			if ( funcCount < comboLength )
    589a:	d202      	bcs.n	58a2 <macroDebugShowResult+0xe6>
				print("+");
    589c:	481d      	ldr	r0, [pc, #116]	; (5914 <macroDebugShowResult+0x158>)
    589e:	f002 f983 	bl	7ba8 <_print>
	{
		// Function Counter, used to keep track of the combos processed
		var_uint_t funcCount = 0;

		// Iterate through the combo
		while ( funcCount < comboLength )
    58a2:	4547      	cmp	r7, r8
    58a4:	d1a7      	bne.n	57f6 <macroDebugShowResult+0x3a>
			if ( funcCount < comboLength )
				print("+");
		}

		// Read the next comboLength
		comboLength = macro->guide[ pos++ ];
    58a6:	f816 8005 	ldrb.w	r8, [r6, r5]
    58aa:	1c6f      	adds	r7, r5, #1
    58ac:	b2ff      	uxtb	r7, r7

		// Only show sequence separator if there is another combo to process
		if ( comboLength != 0 )
    58ae:	f1b8 0f00 	cmp.w	r8, #0
    58b2:	d003      	beq.n	58bc <macroDebugShowResult+0x100>
			print(";");
    58b4:	4818      	ldr	r0, [pc, #96]	; (5918 <macroDebugShowResult+0x15c>)
    58b6:	f002 f977 	bl	7ba8 <_print>
    58ba:	e797      	b.n	57ec <macroDebugShowResult+0x30>
	}

	// Display current position
	print( NL "Position: " );
    58bc:	4817      	ldr	r0, [pc, #92]	; (591c <macroDebugShowResult+0x160>)
    58be:	f002 f973 	bl	7ba8 <_print>
	printInt16( (uint16_t)record->pos ); // Hopefully large enough :P (can't assume 32-bit)
    58c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    58c6:	4b16      	ldr	r3, [pc, #88]	; (5920 <macroDebugShowResult+0x164>)
    58c8:	191d      	adds	r5, r3, r4
    58ca:	5d18      	ldrb	r0, [r3, r4]
    58cc:	f002 f9b9 	bl	7c42 <printInt16>

	// Display final trigger state/type
	print( NL "Final Trigger State (State/Type): " );
    58d0:	4814      	ldr	r0, [pc, #80]	; (5924 <macroDebugShowResult+0x168>)
    58d2:	f002 f969 	bl	7ba8 <_print>
	printHex( record->state );
    58d6:	7868      	ldrb	r0, [r5, #1]
    58d8:	2101      	movs	r1, #1
    58da:	f002 fa07 	bl	7cec <printHex_op>
	print("/");
    58de:	4812      	ldr	r0, [pc, #72]	; (5928 <macroDebugShowResult+0x16c>)
    58e0:	f002 f962 	bl	7ba8 <_print>
	printHex( record->stateType );
    58e4:	78a8      	ldrb	r0, [r5, #2]
    58e6:	2101      	movs	r1, #1
}
    58e8:	b003      	add	sp, #12
    58ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	// Display final trigger state/type
	print( NL "Final Trigger State (State/Type): " );
	printHex( record->state );
	print("/");
	printHex( record->stateType );
    58ee:	f002 b9fd 	b.w	7cec <printHex_op>
}
    58f2:	b003      	add	sp, #12
    58f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58f8:	0000bc21 	.word	0x0000bc21
    58fc:	0000b011 	.word	0x0000b011
    5900:	00009c4c 	.word	0x00009c4c
    5904:	0000afc9 	.word	0x0000afc9
    5908:	0000bb4f 	.word	0x0000bb4f
    590c:	0000b038 	.word	0x0000b038
    5910:	0000b68b 	.word	0x0000b68b
    5914:	00009342 	.word	0x00009342
    5918:	0000afcb 	.word	0x0000afcb
    591c:	0000afcd 	.word	0x0000afcd
    5920:	1fffa0e1 	.word	0x1fffa0e1
    5924:	0000b03a 	.word	0x0000b03a
    5928:	00009280 	.word	0x00009280
    592c:	00009ef8 	.word	0x00009ef8

00005930 <cliFunc_macroShow>:

void cliFunc_macroShow( char* args )
{
    5930:	b507      	push	{r0, r1, r2, lr}
	// Parse codes from arguments
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    5932:	9001      	str	r0, [sp, #4]

	// Process all args
	for ( ;; )
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    5934:	9801      	ldr	r0, [sp, #4]
    5936:	4669      	mov	r1, sp
    5938:	aa01      	add	r2, sp, #4
    593a:	f001 fe6d 	bl	7618 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    593e:	9800      	ldr	r0, [sp, #0]
    5940:	7803      	ldrb	r3, [r0, #0]
    5942:	b18b      	cbz	r3, 5968 <cliFunc_macroShow+0x38>
			break;

		// Ignore invalid codes
		switch ( arg1Ptr[0] )
    5944:	2b52      	cmp	r3, #82	; 0x52
    5946:	d008      	beq.n	595a <cliFunc_macroShow+0x2a>
    5948:	2b54      	cmp	r3, #84	; 0x54
    594a:	d1f3      	bne.n	5934 <cliFunc_macroShow+0x4>
		{
		// Indexed Trigger Macro
		case 'T':
			macroDebugShowTrigger( numToInt( &arg1Ptr[1] ) );
    594c:	3001      	adds	r0, #1
    594e:	f002 fa25 	bl	7d9c <numToInt>
    5952:	b2c0      	uxtb	r0, r0
    5954:	f7ff feaa 	bl	56ac <macroDebugShowTrigger>
			break;
    5958:	e7ec      	b.n	5934 <cliFunc_macroShow+0x4>
		// Indexed Result Macro
		case 'R':
			macroDebugShowResult( numToInt( &arg1Ptr[1] ) );
    595a:	3001      	adds	r0, #1
    595c:	f002 fa1e 	bl	7d9c <numToInt>
    5960:	b2c0      	uxtb	r0, r0
    5962:	f7ff ff2b 	bl	57bc <macroDebugShowResult>
			break;
    5966:	e7e5      	b.n	5934 <cliFunc_macroShow+0x4>
		}
	}
}
    5968:	b003      	add	sp, #12
    596a:	f85d fb04 	ldr.w	pc, [sp], #4
    596e:	0000      	movs	r0, r0

00005970 <Result_setup>:
{
}


void Result_setup()
{
    5970:	2300      	movs	r3, #0
	// Initialize ResultMacro states
	for ( var_uint_t macro = 0; macro < ResultMacroNum; macro++ )
	{
		ResultMacroRecordList[ macro ].pos       = 0;
    5972:	4805      	ldr	r0, [pc, #20]	; (5988 <Result_setup+0x18>)
    5974:	2200      	movs	r2, #0
    5976:	1819      	adds	r1, r3, r0
    5978:	541a      	strb	r2, [r3, r0]
    597a:	3303      	adds	r3, #3


void Result_setup()
{
	// Initialize ResultMacro states
	for ( var_uint_t macro = 0; macro < ResultMacroNum; macro++ )
    597c:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
	{
		ResultMacroRecordList[ macro ].pos       = 0;
		ResultMacroRecordList[ macro ].state     = 0;
    5980:	704a      	strb	r2, [r1, #1]
		ResultMacroRecordList[ macro ].stateType = 0;
    5982:	708a      	strb	r2, [r1, #2]


void Result_setup()
{
	// Initialize ResultMacro states
	for ( var_uint_t macro = 0; macro < ResultMacroNum; macro++ )
    5984:	d1f5      	bne.n	5972 <Result_setup+0x2>
	{
		ResultMacroRecordList[ macro ].pos       = 0;
		ResultMacroRecordList[ macro ].state     = 0;
		ResultMacroRecordList[ macro ].stateType = 0;
	}
}
    5986:	4770      	bx	lr
    5988:	1fffa0e1 	.word	0x1fffa0e1

0000598c <Result_process>:


void Result_process()
{
    598c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Tail pointer for macroResultMacroPendingList
	// Macros must be explicitly re-added
	var_uint_t macroResultMacroPendingListTail = 0;

	// Iterate through the pending ResultMacros, processing each of them
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    5990:	f04f 0800 	mov.w	r8, #0

void Result_process()
{
	// Tail pointer for macroResultMacroPendingList
	// Macros must be explicitly re-added
	var_uint_t macroResultMacroPendingListTail = 0;
    5994:	4647      	mov	r7, r8

	// Iterate through the pending ResultMacros, processing each of them
	for ( var_uint_t macro = 0; macro < macroResultMacroPendingListSize; macro++ )
    5996:	4b24      	ldr	r3, [pc, #144]	; (5a28 <Result_process+0x9c>)
    5998:	881a      	ldrh	r2, [r3, #0]
    599a:	fa5f f988 	uxtb.w	r9, r8
    599e:	4591      	cmp	r9, r2
    59a0:	d236      	bcs.n	5a10 <Result_process+0x84>

// Evaluate/Update ResultMacro
inline ResultMacroEval Macro_evalResultMacro( var_uint_t resultMacroIndex )
{
	// Lookup ResultMacro
	const ResultMacro *macro = &ResultMacroList[ resultMacroIndex ];
    59a2:	4b22      	ldr	r3, [pc, #136]	; (5a2c <Result_process+0xa0>)
	ResultMacroRecord *record = &ResultMacroRecordList[ resultMacroIndex ];

	// Current Macro position
	var_uint_t pos = record->pos;
    59a4:	4a22      	ldr	r2, [pc, #136]	; (5a30 <Result_process+0xa4>)

// Evaluate/Update ResultMacro
inline ResultMacroEval Macro_evalResultMacro( var_uint_t resultMacroIndex )
{
	// Lookup ResultMacro
	const ResultMacro *macro = &ResultMacroList[ resultMacroIndex ];
    59a6:	f813 5019 	ldrb.w	r5, [r3, r9, lsl #1]
	ResultMacroRecord *record = &ResultMacroRecordList[ resultMacroIndex ];

	// Current Macro position
	var_uint_t pos = record->pos;
    59aa:	eb05 0345 	add.w	r3, r5, r5, lsl #1

	// Function Counter, used to keep track of the combo items processed
	var_uint_t funcCount = 0;

	// Combo Item Position within the guide
	var_uint_t comboItem = pos + 1;
    59ae:	f04f 0a00 	mov.w	sl, #0
	// Lookup ResultMacro
	const ResultMacro *macro = &ResultMacroList[ resultMacroIndex ];
	ResultMacroRecord *record = &ResultMacroRecordList[ resultMacroIndex ];

	// Current Macro position
	var_uint_t pos = record->pos;
    59b2:	5cd4      	ldrb	r4, [r2, r3]

	// Length of combo being processed
	uint8_t comboLength = macro->guide[ pos ];
    59b4:	4b1f      	ldr	r3, [pc, #124]	; (5a34 <Result_process+0xa8>)
    59b6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
    59ba:	f816 b004 	ldrb.w	fp, [r6, r4]

	// Function Counter, used to keep track of the combo items processed
	var_uint_t funcCount = 0;

	// Combo Item Position within the guide
	var_uint_t comboItem = pos + 1;
    59be:	3401      	adds	r4, #1
    59c0:	b2e4      	uxtb	r4, r4

	// Iterate through the Result Combo
	while ( funcCount < comboLength )
    59c2:	fa5f f38a 	uxtb.w	r3, sl
    59c6:	455b      	cmp	r3, fp
    59c8:	4819      	ldr	r0, [pc, #100]	; (5a30 <Result_process+0xa4>)
    59ca:	d218      	bcs.n	59fe <Result_process+0x72>

		// Do lookup on capability function
		void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);

		// Call capability
		capability( record->state, record->stateType, &guide->args );
    59cc:	eb05 0145 	add.w	r1, r5, r5, lsl #1
	{
		// Assign TriggerGuide element (key type, state and scancode)
		ResultGuide *guide = (ResultGuide*)(&macro->guide[ comboItem ]);

		// Do lookup on capability function
		void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);
    59d0:	4b19      	ldr	r3, [pc, #100]	; (5a38 <Result_process+0xac>)
    59d2:	f816 e004 	ldrb.w	lr, [r6, r4]

		// Call capability
		capability( record->state, record->stateType, &guide->args );
    59d6:	9301      	str	r3, [sp, #4]
    59d8:	4401      	add	r1, r0

	// Iterate through the Result Combo
	while ( funcCount < comboLength )
	{
		// Assign TriggerGuide element (key type, state and scancode)
		ResultGuide *guide = (ResultGuide*)(&macro->guide[ comboItem ]);
    59da:	1932      	adds	r2, r6, r4

		// Do lookup on capability function
		void (*capability)(uint8_t, uint8_t, uint8_t*) = (void(*)(uint8_t, uint8_t, uint8_t*))(CapabilitiesList[ guide->index ].func);

		// Call capability
		capability( record->state, record->stateType, &guide->args );
    59dc:	f853 c03e 	ldr.w	ip, [r3, lr, lsl #3]
    59e0:	7848      	ldrb	r0, [r1, #1]
    59e2:	7889      	ldrb	r1, [r1, #2]
    59e4:	3201      	adds	r2, #1
    59e6:	47e0      	blx	ip

		// Increment counters
		funcCount++;
		comboItem += ResultGuideSize( (ResultGuide*)(&macro->guide[ comboItem ]) );
    59e8:	5d32      	ldrb	r2, [r6, r4]
    59ea:	9b01      	ldr	r3, [sp, #4]
    59ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    59f0:	f10a 0a01 	add.w	sl, sl, #1
    59f4:	791b      	ldrb	r3, [r3, #4]
    59f6:	3301      	adds	r3, #1
    59f8:	441c      	add	r4, r3
    59fa:	b2e4      	uxtb	r4, r4
    59fc:	e7e1      	b.n	59c2 <Result_process+0x36>
	}

	// Move to next item in the sequence
	record->pos = comboItem;
    59fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    5a02:	5544      	strb	r4, [r0, r5]

	// If the ResultMacro is finished, remove
	if ( macro->guide[ comboItem ] == 0 )
    5a04:	5d33      	ldrb	r3, [r6, r4]
    5a06:	b93b      	cbnz	r3, 5a18 <Result_process+0x8c>
	{
		record->pos = 0;
    5a08:	5543      	strb	r3, [r0, r5]
    5a0a:	f108 0801 	add.w	r8, r8, #1
    5a0e:	e7c2      	b.n	5996 <Result_process+0xa>
			break;
		}
	}

	// Update the macroResultMacroPendingListSize with the tail pointer
	macroResultMacroPendingListSize = macroResultMacroPendingListTail;
    5a10:	801f      	strh	r7, [r3, #0]
}
    5a12:	b003      	add	sp, #12
    5a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch ( Macro_evalResultMacro( macroResultMacroPendingList[ macro ] ) )
		{
		// Re-add macros to pending list
		case ResultMacroEval_DoNothing:
		default:
			macroResultMacroPendingList[ macroResultMacroPendingListTail++ ] = macroResultMacroPendingList[ macro ];
    5a18:	4b04      	ldr	r3, [pc, #16]	; (5a2c <Result_process+0xa0>)
    5a1a:	1c7a      	adds	r2, r7, #1
    5a1c:	f833 1019 	ldrh.w	r1, [r3, r9, lsl #1]
    5a20:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    5a24:	b2d7      	uxtb	r7, r2
			break;
    5a26:	e7f0      	b.n	5a0a <Result_process+0x7e>
    5a28:	1fff91d2 	.word	0x1fff91d2
    5a2c:	1fff91d4 	.word	0x1fff91d4
    5a30:	1fffa0e1 	.word	0x1fffa0e1
    5a34:	00009c4c 	.word	0x00009c4c
    5a38:	00009ef8 	.word	0x00009ef8

00005a3c <Macro_evalTriggerMacro>:
}


// Evaluate/Update TriggerMacro
TriggerMacroEval Macro_evalTriggerMacro( var_uint_t triggerMacroIndex )
{
    5a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Lookup TriggerMacro
	const TriggerMacro *macro = &TriggerMacroList[ triggerMacroIndex ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ triggerMacroIndex ];

	// Check if macro has finished and should be incremented sequence elements
	if ( record->state == TriggerMacro_Release )
    5a40:	4d8d      	ldr	r5, [pc, #564]	; (5c78 <Macro_evalTriggerMacro+0x23c>)
    5a42:	f8df 924c 	ldr.w	r9, [pc, #588]	; 5c90 <Macro_evalTriggerMacro+0x254>
}


// Evaluate/Update TriggerMacro
TriggerMacroEval Macro_evalTriggerMacro( var_uint_t triggerMacroIndex )
{
    5a46:	b085      	sub	sp, #20
	// Lookup TriggerMacro
	const TriggerMacro *macro = &TriggerMacroList[ triggerMacroIndex ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ triggerMacroIndex ];

	// Check if macro has finished and should be incremented sequence elements
	if ( record->state == TriggerMacro_Release )
    5a48:	0043      	lsls	r3, r0, #1
    5a4a:	9302      	str	r3, [sp, #8]
    5a4c:	18eb      	adds	r3, r5, r3
}


// Evaluate/Update TriggerMacro
TriggerMacroEval Macro_evalTriggerMacro( var_uint_t triggerMacroIndex )
{
    5a4e:	4682      	mov	sl, r0
	// Lookup TriggerMacro
	const TriggerMacro *macro = &TriggerMacroList[ triggerMacroIndex ];
	TriggerMacroRecord *record = &TriggerMacroRecordList[ triggerMacroIndex ];

	// Check if macro has finished and should be incremented sequence elements
	if ( record->state == TriggerMacro_Release )
    5a50:	7859      	ldrb	r1, [r3, #1]
    5a52:	2901      	cmp	r1, #1
    5a54:	d10c      	bne.n	5a70 <Macro_evalTriggerMacro+0x34>
	{
		record->state = TriggerMacro_Waiting;
    5a56:	2102      	movs	r1, #2
    5a58:	7059      	strb	r1, [r3, #1]
		record->pos = record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1;
    5a5a:	f815 1010 	ldrb.w	r1, [r5, r0, lsl #1]
    5a5e:	f859 303a 	ldr.w	r3, [r9, sl, lsl #3]
    5a62:	5c5b      	ldrb	r3, [r3, r1]
    5a64:	1c48      	adds	r0, r1, #1
    5a66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5a6a:	4403      	add	r3, r0
    5a6c:	f805 301a 	strb.w	r3, [r5, sl, lsl #1]
	}

	// Current Macro position
	var_uint_t pos = record->pos;
    5a70:	f815 301a 	ldrb.w	r3, [r5, sl, lsl #1]

	// Length of the combo being processed
	uint8_t comboLength = macro->guide[ pos ] * TriggerGuideSize;
    5a74:	f859 003a 	ldr.w	r0, [r9, sl, lsl #3]
		record->state = TriggerMacro_Waiting;
		record->pos = record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1;
	}

	// Current Macro position
	var_uint_t pos = record->pos;
    5a78:	9300      	str	r3, [sp, #0]

	// Length of the combo being processed
	uint8_t comboLength = macro->guide[ pos ] * TriggerGuideSize;
    5a7a:	5cc3      	ldrb	r3, [r0, r3]
    5a7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1

	// If no combo items are left, remove the TriggerMacro from the pending list
	if ( comboLength == 0 )
    5a80:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    5a84:	9303      	str	r3, [sp, #12]
    5a86:	d101      	bne.n	5a8c <Macro_evalTriggerMacro+0x50>
	{
		return TriggerMacroEval_Remove;
    5a88:	2003      	movs	r0, #3
    5a8a:	e0f1      	b.n	5c70 <Macro_evalTriggerMacro+0x234>
inline uint8_t Macro_isLongTriggerMacro( const TriggerMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	return macro->guide[ macro->guide[0] * TriggerGuideSize + 1 ];
    5a8c:	7801      	ldrb	r1, [r0, #0]
    5a8e:	2303      	movs	r3, #3
    5a90:	fb03 0301 	mla	r3, r3, r1, r0
	// On scan after position increment, change to TriggerMacro_Waiting state
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
    5a94:	2400      	movs	r4, #0
inline uint8_t Macro_isLongTriggerMacro( const TriggerMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	return macro->guide[ macro->guide[0] * TriggerGuideSize + 1 ];
    5a96:	785f      	ldrb	r7, [r3, #1]
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
    5a98:	9b00      	ldr	r3, [sp, #0]
    5a9a:	f103 0801 	add.w	r8, r3, #1
    5a9e:	fa5f f888 	uxtb.w	r8, r8
    5aa2:	9b00      	ldr	r3, [sp, #0]
    5aa4:	9a03      	ldr	r2, [sp, #12]
    5aa6:	4413      	add	r3, r2
    5aa8:	4543      	cmp	r3, r8
    5aaa:	db77      	blt.n	5b9c <Macro_evalTriggerMacro+0x160>
	{
		// Assign TriggerGuide element (key type, state and scancode)
		TriggerGuide *guide = (TriggerGuide*)(&macro->guide[ comboItem ]);
    5aac:	f859 303a 	ldr.w	r3, [r9, sl, lsl #3]

		TriggerMacroVote vote = TriggerMacroVote_Invalid;
		// Iterate through the key buffer, comparing to each key in the combo
		for ( var_uint_t key = 0; key < macroTriggerListBufferSize; key++ )
    5ab0:	f04f 0b00 	mov.w	fp, #0
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
	{
		// Assign TriggerGuide element (key type, state and scancode)
		TriggerGuide *guide = (TriggerGuide*)(&macro->guide[ comboItem ]);
    5ab4:	4443      	add	r3, r8
    5ab6:	9301      	str	r3, [sp, #4]

		TriggerMacroVote vote = TriggerMacroVote_Invalid;
    5ab8:	465e      	mov	r6, fp
		// Iterate through the key buffer, comparing to each key in the combo
		for ( var_uint_t key = 0; key < macroTriggerListBufferSize; key++ )
    5aba:	4b70      	ldr	r3, [pc, #448]	; (5c7c <Macro_evalTriggerMacro+0x240>)
    5abc:	7819      	ldrb	r1, [r3, #0]
    5abe:	fa5f f38b 	uxtb.w	r3, fp
    5ac2:	4299      	cmp	r1, r3
    5ac4:	f240 80d1 	bls.w	5c6a <Macro_evalTriggerMacro+0x22e>
    5ac8:	9a01      	ldr	r2, [sp, #4]
    5aca:	7811      	ldrb	r1, [r2, #0]

			// If vote is a pass (>= 0x08, no more keys in the combo need to be looked at)
			// Also mask all of the non-passing votes
			vote |= longMacro
				? Macro_evalLongTriggerMacroVote( keyInfo, guide )
				: Macro_evalShortTriggerMacroVote( keyInfo, guide );
    5acc:	b36f      	cbz	r7, 5b2a <Macro_evalTriggerMacro+0xee>
// Votes on the given key vs. guide, long macros
// A long macro is defined as a guide with more than 1 combo
inline TriggerMacroVote Macro_evalLongTriggerMacroVote( TriggerGuide *key, TriggerGuide *guide )
{
	// Depending on key type
	switch ( guide->type )
    5ace:	2901      	cmp	r1, #1
    5ad0:	d024      	beq.n	5b1c <Macro_evalTriggerMacro+0xe0>
    5ad2:	d303      	bcc.n	5adc <Macro_evalTriggerMacro+0xa0>
    5ad4:	2902      	cmp	r1, #2
    5ad6:	d123      	bne.n	5b20 <Macro_evalTriggerMacro+0xe4>
		erro_print("LED State Type - Not implemented...");
		break;

	// Analog State Type
	case 0x02:
		erro_print("Analog State Type - Not implemented...");
    5ad8:	4869      	ldr	r0, [pc, #420]	; (5c80 <Macro_evalTriggerMacro+0x244>)
    5ada:	e022      	b.n	5b22 <Macro_evalTriggerMacro+0xe6>
	{
	// Normal State Type
	case 0x00:
		// Depending on the state of the buffered key, make voting decision
		// Incorrect key
		if ( guide->scanCode != key->scanCode )
    5adc:	4969      	ldr	r1, [pc, #420]	; (5c84 <Macro_evalTriggerMacro+0x248>)
    5ade:	9a01      	ldr	r2, [sp, #4]
    5ae0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5ae4:	440b      	add	r3, r1
    5ae6:	7890      	ldrb	r0, [r2, #2]
    5ae8:	7899      	ldrb	r1, [r3, #2]
    5aea:	785b      	ldrb	r3, [r3, #1]
    5aec:	4288      	cmp	r0, r1
    5aee:	d00c      	beq.n	5b0a <Macro_evalTriggerMacro+0xce>
		{
			switch ( key->state )
    5af0:	2b02      	cmp	r3, #2
    5af2:	d040      	beq.n	5b76 <Macro_evalTriggerMacro+0x13a>
    5af4:	2b03      	cmp	r3, #3
    5af6:	d006      	beq.n	5b06 <Macro_evalTriggerMacro+0xca>
		erro_print("Invalid State Type. This is a bug.");
		break;
	}

	// XXX Shouldn't reach here
	return TriggerMacroVote_Invalid;
    5af8:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
    5afc:	f1dc 0300 	rsbs	r3, ip, #0
    5b00:	eb43 030c 	adc.w	r3, r3, ip
    5b04:	e037      	b.n	5b76 <Macro_evalTriggerMacro+0x13a>
			case 0x02:
				return TriggerMacroVote_DoNothing;

			// Wrong key released, fail out if pos == 0
			case 0x03:
				return TriggerMacroVote_DoNothing | TriggerMacroVote_DoNothingRelease;
    5b06:	2306      	movs	r3, #6
    5b08:	e035      	b.n	5b76 <Macro_evalTriggerMacro+0x13a>
		}

		// Correct key
		else
		{
			switch ( key->state )
    5b0a:	2b02      	cmp	r3, #2
    5b0c:	d027      	beq.n	5b5e <Macro_evalTriggerMacro+0x122>
    5b0e:	2b03      	cmp	r3, #3
    5b10:	d027      	beq.n	5b62 <Macro_evalTriggerMacro+0x126>
		erro_print("Invalid State Type. This is a bug.");
		break;
	}

	// XXX Shouldn't reach here
	return TriggerMacroVote_Invalid;
    5b12:	2b01      	cmp	r3, #1
    5b14:	bf0c      	ite	eq
    5b16:	2308      	moveq	r3, #8
    5b18:	2300      	movne	r3, #0
    5b1a:	e02c      	b.n	5b76 <Macro_evalTriggerMacro+0x13a>

		break;

	// LED State Type
	case 0x01:
		erro_print("LED State Type - Not implemented...");
    5b1c:	485a      	ldr	r0, [pc, #360]	; (5c88 <Macro_evalTriggerMacro+0x24c>)
    5b1e:	e000      	b.n	5b22 <Macro_evalTriggerMacro+0xe6>
		erro_print("Analog State Type - Not implemented...");
		break;

	// Invalid State Type
	default:
		erro_print("Invalid State Type. This is a bug.");
    5b20:	485a      	ldr	r0, [pc, #360]	; (5c8c <Macro_evalTriggerMacro+0x250>)
    5b22:	f002 f841 	bl	7ba8 <_print>
		break;
	}

	// XXX Shouldn't reach here
	return TriggerMacroVote_Invalid;
    5b26:	2300      	movs	r3, #0
    5b28:	e025      	b.n	5b76 <Macro_evalTriggerMacro+0x13a>

// Votes on the given key vs. guide, short macros
inline TriggerMacroVote Macro_evalShortTriggerMacroVote( TriggerGuide *key, TriggerGuide *guide )
{
	// Depending on key type
	switch ( guide->type )
    5b2a:	2901      	cmp	r1, #1
    5b2c:	d01b      	beq.n	5b66 <Macro_evalTriggerMacro+0x12a>
    5b2e:	d303      	bcc.n	5b38 <Macro_evalTriggerMacro+0xfc>
    5b30:	2902      	cmp	r1, #2
    5b32:	d11a      	bne.n	5b6a <Macro_evalTriggerMacro+0x12e>
		erro_print("LED State Type - Not implemented...");
		break;

	// Analog State Type
	case 0x02:
		erro_print("Analog State Type - Not implemented...");
    5b34:	4852      	ldr	r0, [pc, #328]	; (5c80 <Macro_evalTriggerMacro+0x244>)
    5b36:	e019      	b.n	5b6c <Macro_evalTriggerMacro+0x130>
	switch ( guide->type )
	{
	// Normal State Type
	case 0x00:
		// For short TriggerMacros completely ignore incorrect keys
		if ( guide->scanCode == key->scanCode )
    5b38:	4952      	ldr	r1, [pc, #328]	; (5c84 <Macro_evalTriggerMacro+0x248>)
    5b3a:	9a01      	ldr	r2, [sp, #4]
    5b3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5b40:	440b      	add	r3, r1
    5b42:	7890      	ldrb	r0, [r2, #2]
    5b44:	7899      	ldrb	r1, [r3, #2]
    5b46:	4288      	cmp	r0, r1
    5b48:	d114      	bne.n	5b74 <Macro_evalTriggerMacro+0x138>
		{
			switch ( key->state )
    5b4a:	785b      	ldrb	r3, [r3, #1]
    5b4c:	2b02      	cmp	r3, #2
    5b4e:	d006      	beq.n	5b5e <Macro_evalTriggerMacro+0x122>
    5b50:	2b03      	cmp	r3, #3
    5b52:	d006      	beq.n	5b62 <Macro_evalTriggerMacro+0x126>
			case 0x03:
				return TriggerMacroVote_Release;
			}
		}

		return TriggerMacroVote_DoNothing;
    5b54:	2b01      	cmp	r3, #1
    5b56:	bf0c      	ite	eq
    5b58:	2308      	moveq	r3, #8
    5b5a:	2302      	movne	r3, #2
    5b5c:	e00b      	b.n	5b76 <Macro_evalTriggerMacro+0x13a>
			case 0x01:
				return TriggerMacroVote_Pass;

			// Correct key, held, possible passing or release
			case 0x02:
				return TriggerMacroVote_PassRelease;
    5b5e:	2318      	movs	r3, #24
    5b60:	e009      	b.n	5b76 <Macro_evalTriggerMacro+0x13a>

			// Correct key, released, possible release
			case 0x03:
				return TriggerMacroVote_Release;
    5b62:	2310      	movs	r3, #16
    5b64:	e007      	b.n	5b76 <Macro_evalTriggerMacro+0x13a>

		return TriggerMacroVote_DoNothing;

	// LED State Type
	case 0x01:
		erro_print("LED State Type - Not implemented...");
    5b66:	4848      	ldr	r0, [pc, #288]	; (5c88 <Macro_evalTriggerMacro+0x24c>)
    5b68:	e000      	b.n	5b6c <Macro_evalTriggerMacro+0x130>
		erro_print("Analog State Type - Not implemented...");
		break;

	// Invalid State Type
	default:
		erro_print("Invalid State Type. This is a bug.");
    5b6a:	4848      	ldr	r0, [pc, #288]	; (5c8c <Macro_evalTriggerMacro+0x250>)
    5b6c:	f002 f81c 	bl	7ba8 <_print>
		break;
	}

	// XXX Shouldn't reach here
	return TriggerMacroVote_Invalid;
    5b70:	463b      	mov	r3, r7
    5b72:	e000      	b.n	5b76 <Macro_evalTriggerMacro+0x13a>
			case 0x03:
				return TriggerMacroVote_Release;
			}
		}

		return TriggerMacroVote_DoNothing;
    5b74:	2302      	movs	r3, #2
			// Lookup key information
			TriggerGuide *keyInfo = &macroTriggerListBuffer[ key ];

			// If vote is a pass (>= 0x08, no more keys in the combo need to be looked at)
			// Also mask all of the non-passing votes
			vote |= longMacro
    5b76:	4333      	orrs	r3, r6
    5b78:	b2de      	uxtb	r6, r3
				? Macro_evalLongTriggerMacroVote( keyInfo, guide )
				: Macro_evalShortTriggerMacroVote( keyInfo, guide );
			if ( vote >= TriggerMacroVote_Pass )
    5b7a:	2e07      	cmp	r6, #7
    5b7c:	f10b 0b01 	add.w	fp, fp, #1
    5b80:	d99b      	bls.n	5aba <Macro_evalTriggerMacro+0x7e>
			{
				vote &= TriggerMacroVote_Release | TriggerMacroVote_PassRelease | TriggerMacroVote_Pass;
    5b82:	f006 0618 	and.w	r6, r6, #24
			}
		}

		// If no pass vote was found after scanning all of the keys
		// Fail the combo, if this is a short macro (long macros already will have a fail vote)
		if ( !longMacro && vote < TriggerMacroVote_Pass )
    5b86:	b91f      	cbnz	r7, 5b90 <Macro_evalTriggerMacro+0x154>
    5b88:	2e07      	cmp	r6, #7
    5b8a:	d801      	bhi.n	5b90 <Macro_evalTriggerMacro+0x154>
			vote |= TriggerMacroVote_Fail;
    5b8c:	f046 0601 	orr.w	r6, r6, #1
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
    5b90:	f108 0803 	add.w	r8, r8, #3
		// Fail the combo, if this is a short macro (long macros already will have a fail vote)
		if ( !longMacro && vote < TriggerMacroVote_Pass )
			vote |= TriggerMacroVote_Fail;

		// After voting, append to overall vote
		overallVote |= vote;
    5b94:	4334      	orrs	r4, r6
	// TODO Add support for system LED states (NumLock, CapsLock, etc.)
	// TODO Add support for analog key states
	// TODO Add support for 0x00 Key state (not pressing a key, not all that useful in general)
	// TODO Add support for Press/Hold/Release differentiation when evaluating (not sure if useful)
	TriggerMacroVote overallVote = TriggerMacroVote_Invalid;
	for ( uint8_t comboItem = pos + 1; comboItem < pos + comboLength + 1; comboItem += TriggerGuideSize )
    5b96:	fa5f f888 	uxtb.w	r8, r8
    5b9a:	e782      	b.n	5aa2 <Macro_evalTriggerMacro+0x66>
		overallVote |= vote;
	}

	// If no pass vote was found after scanning the entire combo
	// And this is the first position in the combo, just remove it (nothing important happened)
	if ( longMacro && overallVote & TriggerMacroVote_DoNothingRelease && pos == 0 )
    5b9c:	b12f      	cbz	r7, 5baa <Macro_evalTriggerMacro+0x16e>
    5b9e:	0760      	lsls	r0, r4, #29
    5ba0:	d503      	bpl.n	5baa <Macro_evalTriggerMacro+0x16e>
    5ba2:	9a00      	ldr	r2, [sp, #0]
    5ba4:	b90a      	cbnz	r2, 5baa <Macro_evalTriggerMacro+0x16e>
		overallVote |= TriggerMacroVote_Fail;
    5ba6:	f044 0401 	orr.w	r4, r4, #1

	// Decide new state of macro after voting
	// Fail macro, remove from pending list
	if ( overallVote & TriggerMacroVote_Fail )
    5baa:	f014 0001 	ands.w	r0, r4, #1
    5bae:	f47f af6b 	bne.w	5a88 <Macro_evalTriggerMacro+0x4c>
	{
		return TriggerMacroEval_Remove;
	}
	// Do nothing, incorrect key is being held or released
	else if ( overallVote & TriggerMacroVote_DoNothing && longMacro )
    5bb2:	07a1      	lsls	r1, r4, #30
    5bb4:	d501      	bpl.n	5bba <Macro_evalTriggerMacro+0x17e>
    5bb6:	2f00      	cmp	r7, #0
    5bb8:	d15a      	bne.n	5c70 <Macro_evalTriggerMacro+0x234>
	{
		// Just doing nothing :)
	}
	// If ready for transition and in Press state, set to Waiting and increment combo position
	// Position is incremented (and possibly remove the macro from the pending list) on the next iteration
	else if ( overallVote & TriggerMacroVote_Release && record->state == TriggerMacro_Press )
    5bba:	f004 0110 	and.w	r1, r4, #16
    5bbe:	f001 00ff 	and.w	r0, r1, #255	; 0xff
    5bc2:	b1e1      	cbz	r1, 5bfe <Macro_evalTriggerMacro+0x1c2>
    5bc4:	9a02      	ldr	r2, [sp, #8]
    5bc6:	18a9      	adds	r1, r5, r2
    5bc8:	784e      	ldrb	r6, [r1, #1]
    5bca:	b9c6      	cbnz	r6, 5bfe <Macro_evalTriggerMacro+0x1c2>
	{
		record->state = TriggerMacro_Release;
    5bcc:	2301      	movs	r3, #1
    5bce:	704b      	strb	r3, [r1, #1]

		// If this is the last combo in the sequence, remove from the pending list
		if ( macro->guide[ record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1 ] == 0 )
    5bd0:	4b29      	ldr	r3, [pc, #164]	; (5c78 <Macro_evalTriggerMacro+0x23c>)
    5bd2:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
    5bd6:	f813 301a 	ldrb.w	r3, [r3, sl, lsl #1]
    5bda:	5cc8      	ldrb	r0, [r1, r3]
    5bdc:	2203      	movs	r2, #3
    5bde:	3301      	adds	r3, #1
    5be0:	fb12 3300 	smlabb	r3, r2, r0, r3
    5be4:	5ccb      	ldrb	r3, [r1, r3]
    5be6:	b143      	cbz	r3, 5bfa <Macro_evalTriggerMacro+0x1be>
		return TriggerMacroEval_DoResultAndRemove;
	}

	// If this is a short macro, just remove it
	// The state can be rebuilt on the next iteration
	if ( !longMacro )
    5be8:	2f00      	cmp	r7, #0
    5bea:	f43f af4d 	beq.w	5a88 <Macro_evalTriggerMacro+0x4c>
		return TriggerMacroEval_Remove;

	return TriggerMacroEval_DoNothing;
    5bee:	2000      	movs	r0, #0
    5bf0:	e03e      	b.n	5c70 <Macro_evalTriggerMacro+0x234>
		// If this result macro has more than 1 key, only send once
		// TODO Add option to have long macro repeat rate
		if ( macro->guide[ pos + comboLength + 1 ] == 0 )
		{
			// Long result macro (more than 1 combo)
			if ( Macro_isLongResultMacro( &ResultMacroList[ macro->result ] ) )
    5bf2:	5cc3      	ldrb	r3, [r0, r3]
    5bf4:	b353      	cbz	r3, 5c4c <Macro_evalTriggerMacro+0x210>
			{
				// Only ever trigger result once, on press
				if ( overallVote == TriggerMacroVote_Pass )
    5bf6:	2c08      	cmp	r4, #8
    5bf8:	d1f6      	bne.n	5be8 <Macro_evalTriggerMacro+0x1ac>
	{
		record->state = TriggerMacro_Release;

		// If this is the last combo in the sequence, remove from the pending list
		if ( macro->guide[ record->pos + macro->guide[ record->pos ] * TriggerGuideSize + 1 ] == 0 )
			return TriggerMacroEval_DoResultAndRemove;
    5bfa:	2002      	movs	r0, #2
    5bfc:	e038      	b.n	5c70 <Macro_evalTriggerMacro+0x234>
	}
	// If passing and in Waiting state, set macro state to Press
	else if ( overallVote & TriggerMacroVote_Pass
    5bfe:	0722      	lsls	r2, r4, #28
    5c00:	d530      	bpl.n	5c64 <Macro_evalTriggerMacro+0x228>
		&& ( record->state == TriggerMacro_Waiting || record->state == TriggerMacro_Press ) )
    5c02:	9a02      	ldr	r2, [sp, #8]
    5c04:	4415      	add	r5, r2
    5c06:	7869      	ldrb	r1, [r5, #1]
    5c08:	f011 01fd 	ands.w	r1, r1, #253	; 0xfd
    5c0c:	d12a      	bne.n	5c64 <Macro_evalTriggerMacro+0x228>
	{
		record->state = TriggerMacro_Press;
    5c0e:	7069      	strb	r1, [r5, #1]

		// If in press state, and this is the final combo, send request for ResultMacro
		// Check to see if the result macro only has a single element
		// If this result macro has more than 1 key, only send once
		// TODO Add option to have long macro repeat rate
		if ( macro->guide[ pos + comboLength + 1 ] == 0 )
    5c10:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
    5c14:	440b      	add	r3, r1
    5c16:	7859      	ldrb	r1, [r3, #1]
    5c18:	2900      	cmp	r1, #0
    5c1a:	d1e5      	bne.n	5be8 <Macro_evalTriggerMacro+0x1ac>
		{
			// Long result macro (more than 1 combo)
			if ( Macro_isLongResultMacro( &ResultMacroList[ macro->result ] ) )
    5c1c:	4b1c      	ldr	r3, [pc, #112]	; (5c90 <Macro_evalTriggerMacro+0x254>)
    5c1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    5c22:	7918      	ldrb	r0, [r3, #4]
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	var_uint_t position = 1;
	for ( var_uint_t result = 0; result < macro->guide[0]; result++ )
    5c24:	4b1b      	ldr	r3, [pc, #108]	; (5c94 <Macro_evalTriggerMacro+0x258>)
    5c26:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5c2a:	7806      	ldrb	r6, [r0, #0]
inline uint8_t Macro_isLongResultMacro( const ResultMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	var_uint_t position = 1;
    5c2c:	2301      	movs	r3, #1
	for ( var_uint_t result = 0; result < macro->guide[0]; result++ )
    5c2e:	b2cd      	uxtb	r5, r1
    5c30:	42b5      	cmp	r5, r6
    5c32:	d2de      	bcs.n	5bf2 <Macro_evalTriggerMacro+0x1b6>
		position += ResultGuideSize( (ResultGuide*)&macro->guide[ position ] );
    5c34:	f810 e003 	ldrb.w	lr, [r0, r3]
    5c38:	4d17      	ldr	r5, [pc, #92]	; (5c98 <Macro_evalTriggerMacro+0x25c>)
    5c3a:	eb05 05ce 	add.w	r5, r5, lr, lsl #3
    5c3e:	3101      	adds	r1, #1
    5c40:	792d      	ldrb	r5, [r5, #4]
    5c42:	3501      	adds	r5, #1
    5c44:	fa53 f385 	uxtab	r3, r3, r5
    5c48:	b2db      	uxtb	r3, r3
    5c4a:	e7f0      	b.n	5c2e <Macro_evalTriggerMacro+0x1f2>
    5c4c:	4b10      	ldr	r3, [pc, #64]	; (5c90 <Macro_evalTriggerMacro+0x254>)
    5c4e:	f853 203a 	ldr.w	r2, [r3, sl, lsl #3]
inline uint8_t Macro_isLongTriggerMacro( const TriggerMacro *macro )
{
	// Check the second sequence combo length
	// If non-zero return non-zero (long sequence)
	// 0 otherwise (short sequence)
	return macro->guide[ macro->guide[0] * TriggerGuideSize + 1 ];
    5c52:	7811      	ldrb	r1, [r2, #0]
    5c54:	2001      	movs	r0, #1
    5c56:	2303      	movs	r3, #3
    5c58:	fb13 0301 	smlabb	r3, r3, r1, r0
			}
			// Short result macro
			else
			{
				// Only trigger result once, on press, if long trigger (more than 1 combo)
				if ( Macro_isLongTriggerMacro( macro ) )
    5c5c:	5cd3      	ldrb	r3, [r2, r3]
    5c5e:	2b00      	cmp	r3, #0
    5c60:	d1cb      	bne.n	5bfa <Macro_evalTriggerMacro+0x1be>
    5c62:	e005      	b.n	5c70 <Macro_evalTriggerMacro+0x234>
			}
		}
	}
	// Otherwise, just remove the macro on key release
	// One more result has to be called to indicate to the ResultMacro that the key transitioned to the release state
	else if ( overallVote & TriggerMacroVote_Release )
    5c64:	2800      	cmp	r0, #0
    5c66:	d1c8      	bne.n	5bfa <Macro_evalTriggerMacro+0x1be>
    5c68:	e7be      	b.n	5be8 <Macro_evalTriggerMacro+0x1ac>
			}
		}

		// If no pass vote was found after scanning all of the keys
		// Fail the combo, if this is a short macro (long macros already will have a fail vote)
		if ( !longMacro && vote < TriggerMacroVote_Pass )
    5c6a:	2f00      	cmp	r7, #0
    5c6c:	d08e      	beq.n	5b8c <Macro_evalTriggerMacro+0x150>
    5c6e:	e78f      	b.n	5b90 <Macro_evalTriggerMacro+0x154>
	// The state can be rebuilt on the next iteration
	if ( !longMacro )
		return TriggerMacroEval_Remove;

	return TriggerMacroEval_DoNothing;
}
    5c70:	b005      	add	sp, #20
    5c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c76:	bf00      	nop
    5c78:	1fffa36e 	.word	0x1fffa36e
    5c7c:	1fff91c0 	.word	0x1fff91c0
    5c80:	0000b273 	.word	0x0000b273
    5c84:	1fff9fd6 	.word	0x1fff9fd6
    5c88:	0000b238 	.word	0x0000b238
    5c8c:	0000b2b1 	.word	0x0000b2b1
    5c90:	0000a0e0 	.word	0x0000a0e0
    5c94:	00009c4c 	.word	0x00009c4c
    5c98:	00009ef8 	.word	0x00009ef8

00005c9c <Trigger_setup>:
	return 0;
}


void Trigger_setup()
{
    5c9c:	2300      	movs	r3, #0
	// Initialize TriggerMacro states
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
	{
		TriggerMacroRecordList[ macro ].pos   = 0;
    5c9e:	4a05      	ldr	r2, [pc, #20]	; (5cb4 <Trigger_setup+0x18>)
    5ca0:	2000      	movs	r0, #0
    5ca2:	1899      	adds	r1, r3, r2
    5ca4:	5498      	strb	r0, [r3, r2]
		TriggerMacroRecordList[ macro ].state = TriggerMacro_Waiting;
    5ca6:	2202      	movs	r2, #2
    5ca8:	4413      	add	r3, r2


void Trigger_setup()
{
	// Initialize TriggerMacro states
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
    5caa:	2bda      	cmp	r3, #218	; 0xda
	{
		TriggerMacroRecordList[ macro ].pos   = 0;
		TriggerMacroRecordList[ macro ].state = TriggerMacro_Waiting;
    5cac:	704a      	strb	r2, [r1, #1]


void Trigger_setup()
{
	// Initialize TriggerMacro states
	for ( var_uint_t macro = 0; macro < TriggerMacroNum; macro++ )
    5cae:	d1f6      	bne.n	5c9e <Trigger_setup+0x2>
	{
		TriggerMacroRecordList[ macro ].pos   = 0;
		TriggerMacroRecordList[ macro ].state = TriggerMacro_Waiting;
	}
}
    5cb0:	4770      	bx	lr
    5cb2:	bf00      	nop
    5cb4:	1fffa36e 	.word	0x1fffa36e

00005cb8 <Trigger_process>:


void Trigger_process()
{
    5cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		// Number of Triggers in list
		nat_ptr_t triggerListSize = triggerList[0];

		// Iterate over triggerList to see if any TriggerMacros need to be added
		// First item is the number of items in the TriggerList
		for ( var_uint_t macro = 1; macro < triggerListSize + 1; macro++ )
    5cbc:	2500      	movs	r5, #0

// Update pending trigger list
inline void Macro_updateTriggerMacroPendingList()
{
	// Iterate over the macroTriggerListBuffer to add any new Trigger Macros to the pending list
	for ( var_uint_t key = 0; key < macroTriggerListBufferSize; key++ )
    5cbe:	4b36      	ldr	r3, [pc, #216]	; (5d98 <Trigger_process+0xe0>)
    5cc0:	781b      	ldrb	r3, [r3, #0]
    5cc2:	b2e8      	uxtb	r0, r5
    5cc4:	4283      	cmp	r3, r0
    5cc6:	d93b      	bls.n	5d40 <Trigger_process+0x88>
	{
		// TODO LED States
		// TODO Analog Switches
		// Only add TriggerMacro to pending list if key was pressed (not held, released or off)
		if ( macroTriggerListBuffer[ key ].state == 0x00 && macroTriggerListBuffer[ key ].state != 0x01 )
    5cc8:	4b34      	ldr	r3, [pc, #208]	; (5d9c <Trigger_process+0xe4>)
    5cca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5cce:	4418      	add	r0, r3
    5cd0:	7841      	ldrb	r1, [r0, #1]
    5cd2:	b399      	cbz	r1, 5d3c <Trigger_process+0x84>
		// TODO Analog
		// If this is a release case, indicate to layer lookup for possible latch expiry
		uint8_t latch_expire = macroTriggerListBuffer[ key ].state == 0x03;

		// Lookup Trigger List
		nat_ptr_t *triggerList = Macro_layerLookup( &macroTriggerListBuffer[ key ], latch_expire );
    5cd4:	1ecb      	subs	r3, r1, #3
    5cd6:	4259      	negs	r1, r3
    5cd8:	4159      	adcs	r1, r3
    5cda:	f7ff fa99 	bl	5210 <Macro_layerLookup>

		// If there was an error during lookup, skip
		if ( triggerList == 0 )
    5cde:	b368      	cbz	r0, 5d3c <Trigger_process+0x84>
    5ce0:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 5da8 <Trigger_process+0xf0>
			continue;

		// Number of Triggers in list
		nat_ptr_t triggerListSize = triggerList[0];
    5ce4:	f8d0 c000 	ldr.w	ip, [r0]
    5ce8:	f8be 3000 	ldrh.w	r3, [lr]

		// Iterate over triggerList to see if any TriggerMacros need to be added
		// First item is the number of items in the TriggerList
		for ( var_uint_t macro = 1; macro < triggerListSize + 1; macro++ )
    5cec:	2201      	movs	r2, #1
    5cee:	f10c 0101 	add.w	r1, ip, #1
    5cf2:	428a      	cmp	r2, r1
    5cf4:	d220      	bcs.n	5d38 <Trigger_process+0x80>
		{
			// Lookup trigger macro index
			var_uint_t triggerMacroIndex = triggerList[ macro ];
    5cf6:	f810 4022 	ldrb.w	r4, [r0, r2, lsl #2]
    5cfa:	2600      	movs	r6, #0

			// Iterate over macroTriggerMacroPendingList to see if any macro in the scancode's
			//  triggerList needs to be added
			var_uint_t pending = 0;
			for ( ; pending < macroTriggerMacroPendingListSize; pending++ )
    5cfc:	b2f7      	uxtb	r7, r6
    5cfe:	b2b9      	uxth	r1, r7
    5d00:	4299      	cmp	r1, r3
    5d02:	d207      	bcs.n	5d14 <Trigger_process+0x5c>
			{
				// Stop scanning if the trigger macro index is found in the pending list
				if ( macroTriggerMacroPendingList[ pending ] == triggerMacroIndex )
    5d04:	f8df 8098 	ldr.w	r8, [pc, #152]	; 5da0 <Trigger_process+0xe8>
    5d08:	f838 7017 	ldrh.w	r7, [r8, r7, lsl #1]
    5d0c:	42a7      	cmp	r7, r4
    5d0e:	f106 0601 	add.w	r6, r6, #1
    5d12:	d1f3      	bne.n	5cfc <Trigger_process+0x44>
					break;
			}

			// If the triggerMacroIndex (macro) was not found in the macroTriggerMacroPendingList
			// Add it to the list
			if ( pending == macroTriggerMacroPendingListSize )
    5d14:	4299      	cmp	r1, r3
    5d16:	d10c      	bne.n	5d32 <Trigger_process+0x7a>
			{
				macroTriggerMacroPendingList[ macroTriggerMacroPendingListSize++ ] = triggerMacroIndex;
    5d18:	4e21      	ldr	r6, [pc, #132]	; (5da0 <Trigger_process+0xe8>)
    5d1a:	f826 4011 	strh.w	r4, [r6, r1, lsl #1]

				// Reset macro position
				TriggerMacroRecordList[ triggerMacroIndex ].pos   = 0;
    5d1e:	4921      	ldr	r1, [pc, #132]	; (5da4 <Trigger_process+0xec>)
    5d20:	2600      	movs	r6, #0
    5d22:	f801 6014 	strb.w	r6, [r1, r4, lsl #1]
				TriggerMacroRecordList[ triggerMacroIndex ].state = TriggerMacro_Waiting;
    5d26:	eb01 0144 	add.w	r1, r1, r4, lsl #1

			// If the triggerMacroIndex (macro) was not found in the macroTriggerMacroPendingList
			// Add it to the list
			if ( pending == macroTriggerMacroPendingListSize )
			{
				macroTriggerMacroPendingList[ macroTriggerMacroPendingListSize++ ] = triggerMacroIndex;
    5d2a:	3301      	adds	r3, #1

				// Reset macro position
				TriggerMacroRecordList[ triggerMacroIndex ].pos   = 0;
				TriggerMacroRecordList[ triggerMacroIndex ].state = TriggerMacro_Waiting;
    5d2c:	2402      	movs	r4, #2

			// If the triggerMacroIndex (macro) was not found in the macroTriggerMacroPendingList
			// Add it to the list
			if ( pending == macroTriggerMacroPendingListSize )
			{
				macroTriggerMacroPendingList[ macroTriggerMacroPendingListSize++ ] = triggerMacroIndex;
    5d2e:	b29b      	uxth	r3, r3

				// Reset macro position
				TriggerMacroRecordList[ triggerMacroIndex ].pos   = 0;
				TriggerMacroRecordList[ triggerMacroIndex ].state = TriggerMacro_Waiting;
    5d30:	704c      	strb	r4, [r1, #1]
		// Number of Triggers in list
		nat_ptr_t triggerListSize = triggerList[0];

		// Iterate over triggerList to see if any TriggerMacros need to be added
		// First item is the number of items in the TriggerList
		for ( var_uint_t macro = 1; macro < triggerListSize + 1; macro++ )
    5d32:	3201      	adds	r2, #1
    5d34:	b2d2      	uxtb	r2, r2
    5d36:	e7da      	b.n	5cee <Trigger_process+0x36>
    5d38:	f8ae 3000 	strh.w	r3, [lr]
    5d3c:	3501      	adds	r5, #1
    5d3e:	e7be      	b.n	5cbe <Trigger_process+0x6>

// Update pending trigger list
inline void Macro_updateTriggerMacroPendingList()
{
	// Iterate over the macroTriggerListBuffer to add any new Trigger Macros to the pending list
	for ( var_uint_t key = 0; key < macroTriggerListBufferSize; key++ )
    5d40:	2700      	movs	r7, #0
    5d42:	463e      	mov	r6, r7
	// Tail pointer for macroTriggerMacroPendingList
	// Macros must be explicitly re-added
	var_uint_t macroTriggerMacroPendingListTail = 0;

	// Iterate through the pending TriggerMacros, processing each of them
	for ( var_uint_t macro = 0; macro < macroTriggerMacroPendingListSize; macro++ )
    5d44:	4b18      	ldr	r3, [pc, #96]	; (5da8 <Trigger_process+0xf0>)
    5d46:	881a      	ldrh	r2, [r3, #0]
    5d48:	b2fc      	uxtb	r4, r7
    5d4a:	4294      	cmp	r4, r2
    5d4c:	d221      	bcs.n	5d92 <Trigger_process+0xda>
	{
		switch ( Macro_evalTriggerMacro( macroTriggerMacroPendingList[ macro ] ) )
    5d4e:	4d14      	ldr	r5, [pc, #80]	; (5da0 <Trigger_process+0xe8>)
    5d50:	f815 0014 	ldrb.w	r0, [r5, r4, lsl #1]
    5d54:	f7ff fe72 	bl	5a3c <Macro_evalTriggerMacro>
    5d58:	2802      	cmp	r0, #2
    5d5a:	d011      	beq.n	5d80 <Trigger_process+0xc8>
    5d5c:	2803      	cmp	r0, #3
    5d5e:	d016      	beq.n	5d8e <Trigger_process+0xd6>
    5d60:	2801      	cmp	r0, #1
    5d62:	d106      	bne.n	5d72 <Trigger_process+0xba>
		{
		// Trigger Result Macro (purposely falling through)
		case TriggerMacroEval_DoResult:
			// Append ResultMacro to PendingList
			Macro_appendResultMacroToPendingList( &TriggerMacroList[ macroTriggerMacroPendingList[ macro ] ] );
    5d64:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
    5d68:	4b10      	ldr	r3, [pc, #64]	; (5dac <Trigger_process+0xf4>)
    5d6a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5d6e:	f7ff fbb5 	bl	54dc <Macro_appendResultMacroToPendingList>

		default:
			macroTriggerMacroPendingList[ macroTriggerMacroPendingListTail++ ] = macroTriggerMacroPendingList[ macro ];
    5d72:	1c73      	adds	r3, r6, #1
    5d74:	f835 2014 	ldrh.w	r2, [r5, r4, lsl #1]
    5d78:	f825 2016 	strh.w	r2, [r5, r6, lsl #1]
    5d7c:	b2de      	uxtb	r6, r3
			break;
    5d7e:	e006      	b.n	5d8e <Trigger_process+0xd6>

		// Trigger Result Macro and Remove (purposely falling through)
		case TriggerMacroEval_DoResultAndRemove:
			// Append ResultMacro to PendingList
			Macro_appendResultMacroToPendingList( &TriggerMacroList[ macroTriggerMacroPendingList[ macro ] ] );
    5d80:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
    5d84:	4b09      	ldr	r3, [pc, #36]	; (5dac <Trigger_process+0xf4>)
    5d86:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5d8a:	f7ff fba7 	bl	54dc <Macro_appendResultMacroToPendingList>
    5d8e:	3701      	adds	r7, #1
    5d90:	e7d8      	b.n	5d44 <Trigger_process+0x8c>
			break;
		}
	}

	// Update the macroTriggerMacroPendingListSize with the tail pointer
	macroTriggerMacroPendingListSize = macroTriggerMacroPendingListTail;
    5d92:	801e      	strh	r6, [r3, #0]
    5d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d98:	1fff91c0 	.word	0x1fff91c0
    5d9c:	1fff9fd6 	.word	0x1fff9fd6
    5da0:	1fff929a 	.word	0x1fff929a
    5da4:	1fffa36e 	.word	0x1fffa36e
    5da8:	1fff9298 	.word	0x1fff9298
    5dac:	0000a0e0 	.word	0x0000a0e0

00005db0 <cliFunc_sendKeys>:


void cliFunc_sendKeys( char* args )
{
	// Copy USBKeys_KeysCLI to USBKeys_Keys
	for ( uint8_t key = 0; key < USBKeys_SentCLI; ++key )
    5db0:	4b04      	ldr	r3, [pc, #16]	; (5dc4 <cliFunc_sendKeys+0x14>)
	{
		// TODO
		//USBKeys_Keys[key] = USBKeys_KeysCLI[key];
	}
	USBKeys_Sent = USBKeys_SentCLI;
    5db2:	781a      	ldrb	r2, [r3, #0]
    5db4:	4b04      	ldr	r3, [pc, #16]	; (5dc8 <cliFunc_sendKeys+0x18>)
    5db6:	701a      	strb	r2, [r3, #0]

	// Set modifier byte
	USBKeys_Modifiers = USBKeys_ModifiersCLI;
    5db8:	4b04      	ldr	r3, [pc, #16]	; (5dcc <cliFunc_sendKeys+0x1c>)
    5dba:	781a      	ldrb	r2, [r3, #0]
    5dbc:	4b04      	ldr	r3, [pc, #16]	; (5dd0 <cliFunc_sendKeys+0x20>)
    5dbe:	701a      	strb	r2, [r3, #0]
    5dc0:	4770      	bx	lr
    5dc2:	bf00      	nop
    5dc4:	1fff9387 	.word	0x1fff9387
    5dc8:	1fff9385 	.word	0x1fff9385
    5dcc:	1fff9388 	.word	0x1fff9388
    5dd0:	1fff9376 	.word	0x1fff9376

00005dd4 <cliFunc_kbdProtocol>:


// ----- CLI Command Functions -----

void cliFunc_kbdProtocol( char* args )
{
    5dd4:	b508      	push	{r3, lr}
	print( NL );
    5dd6:	4806      	ldr	r0, [pc, #24]	; (5df0 <cliFunc_kbdProtocol+0x1c>)
    5dd8:	f001 fee6 	bl	7ba8 <_print>
	info_msg("Keyboard Protocol: ");
    5ddc:	4805      	ldr	r0, [pc, #20]	; (5df4 <cliFunc_kbdProtocol+0x20>)
    5dde:	f001 fee3 	bl	7ba8 <_print>
	printInt8( USBKeys_Protocol );
    5de2:	4b05      	ldr	r3, [pc, #20]	; (5df8 <cliFunc_kbdProtocol+0x24>)
    5de4:	7818      	ldrb	r0, [r3, #0]
}
    5de6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void cliFunc_kbdProtocol( char* args )
{
	print( NL );
	info_msg("Keyboard Protocol: ");
	printInt8( USBKeys_Protocol );
    5dea:	f001 bf0c 	b.w	7c06 <printInt8>
    5dee:	bf00      	nop
    5df0:	0000bc21 	.word	0x0000bc21
    5df4:	0000b501 	.word	0x0000b501
    5df8:	1fff8d58 	.word	0x1fff8d58

00005dfc <cliFunc_readLEDs>:
	}
}


void cliFunc_readLEDs( char* args )
{
    5dfc:	b508      	push	{r3, lr}
	print( NL );
    5dfe:	4806      	ldr	r0, [pc, #24]	; (5e18 <cliFunc_readLEDs+0x1c>)
    5e00:	f001 fed2 	bl	7ba8 <_print>
	info_msg("LED State: ");
    5e04:	4805      	ldr	r0, [pc, #20]	; (5e1c <cliFunc_readLEDs+0x20>)
    5e06:	f001 fecf 	bl	7ba8 <_print>
	printInt8( USBKeys_LEDs );
    5e0a:	4b05      	ldr	r3, [pc, #20]	; (5e20 <cliFunc_readLEDs+0x24>)
    5e0c:	7818      	ldrb	r0, [r3, #0]
}
    5e0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void cliFunc_readLEDs( char* args )
{
	print( NL );
	info_msg("LED State: ");
	printInt8( USBKeys_LEDs );
    5e12:	f001 bef8 	b.w	7c06 <printInt8>
    5e16:	bf00      	nop
    5e18:	0000bc21 	.word	0x0000bc21
    5e1c:	0000b527 	.word	0x0000b527
    5e20:	1fff9377 	.word	0x1fff9377

00005e24 <cliFunc_setKeys>:
	USBKeys_Modifiers = USBKeys_ModifiersCLI;
}


void cliFunc_setKeys( char* args )
{
    5e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;

	// Parse up to USBKeys_MaxSize args (whichever is least)
	for ( USBKeys_SentCLI = 0; USBKeys_SentCLI < USB_BOOT_MAX_KEYS; ++USBKeys_SentCLI )
    5e26:	4b0b      	ldr	r3, [pc, #44]	; (5e54 <cliFunc_setKeys+0x30>)

void cliFunc_setKeys( char* args )
{
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;
    5e28:	9001      	str	r0, [sp, #4]

	// Parse up to USBKeys_MaxSize args (whichever is least)
	for ( USBKeys_SentCLI = 0; USBKeys_SentCLI < USB_BOOT_MAX_KEYS; ++USBKeys_SentCLI )
    5e2a:	2200      	movs	r2, #0
    5e2c:	701a      	strb	r2, [r3, #0]
    5e2e:	461c      	mov	r4, r3
    5e30:	7823      	ldrb	r3, [r4, #0]
    5e32:	4d08      	ldr	r5, [pc, #32]	; (5e54 <cliFunc_setKeys+0x30>)
    5e34:	2b05      	cmp	r3, #5
    5e36:	d80b      	bhi.n	5e50 <cliFunc_setKeys+0x2c>
	{
		curArgs = arg2Ptr;
		CLI_argumentIsolation( curArgs, &arg1Ptr, &arg2Ptr );
    5e38:	9801      	ldr	r0, [sp, #4]
    5e3a:	4669      	mov	r1, sp
    5e3c:	aa01      	add	r2, sp, #4
    5e3e:	f001 fbeb 	bl	7618 <CLI_argumentIsolation>

		// Stop processing args if no more are found
		if ( *arg1Ptr == '\0' )
    5e42:	9b00      	ldr	r3, [sp, #0]
    5e44:	781b      	ldrb	r3, [r3, #0]
    5e46:	b11b      	cbz	r3, 5e50 <cliFunc_setKeys+0x2c>
	char* curArgs;
	char* arg1Ptr;
	char* arg2Ptr = args;

	// Parse up to USBKeys_MaxSize args (whichever is least)
	for ( USBKeys_SentCLI = 0; USBKeys_SentCLI < USB_BOOT_MAX_KEYS; ++USBKeys_SentCLI )
    5e48:	782b      	ldrb	r3, [r5, #0]
    5e4a:	3301      	adds	r3, #1
    5e4c:	702b      	strb	r3, [r5, #0]
    5e4e:	e7ef      	b.n	5e30 <cliFunc_setKeys+0xc>

		// Add the USB code to be sent
		// TODO
		//USBKeys_KeysCLI[USBKeys_SentCLI] = numToInt( arg1Ptr );
	}
}
    5e50:	b003      	add	sp, #12
    5e52:	bd30      	pop	{r4, r5, pc}
    5e54:	1fff9387 	.word	0x1fff9387

00005e58 <cliFunc_outputDebug>:
	printInt8( USBKeys_Protocol );
}


void cliFunc_outputDebug( char* args )
{
    5e58:	b513      	push	{r0, r1, r4, lr}
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );

	// Default to 1 if no argument is given
	Output_DebugMode = 1;
    5e5a:	4c07      	ldr	r4, [pc, #28]	; (5e78 <cliFunc_outputDebug+0x20>)
{
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    5e5c:	4669      	mov	r1, sp
    5e5e:	aa01      	add	r2, sp, #4
    5e60:	f001 fbda 	bl	7618 <CLI_argumentIsolation>

	// Default to 1 if no argument is given
	Output_DebugMode = 1;
    5e64:	2301      	movs	r3, #1

	if ( arg1Ptr[0] != '\0' )
    5e66:	9800      	ldr	r0, [sp, #0]
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );

	// Default to 1 if no argument is given
	Output_DebugMode = 1;
    5e68:	7023      	strb	r3, [r4, #0]

	if ( arg1Ptr[0] != '\0' )
    5e6a:	7803      	ldrb	r3, [r0, #0]
    5e6c:	b113      	cbz	r3, 5e74 <cliFunc_outputDebug+0x1c>
	{
		Output_DebugMode = (uint16_t)numToInt( arg1Ptr );
    5e6e:	f001 ff95 	bl	7d9c <numToInt>
    5e72:	7020      	strb	r0, [r4, #0]
	}
}
    5e74:	b002      	add	sp, #8
    5e76:	bd10      	pop	{r4, pc}
    5e78:	1fff9389 	.word	0x1fff9389

00005e7c <cliFunc_setMod>:
	}
}


void cliFunc_setMod( char* args )
{
    5e7c:	b507      	push	{r0, r1, r2, lr}
	// Parse number from argument
	//  NOTE: Only first argument is used
	char* arg1Ptr;
	char* arg2Ptr;
	CLI_argumentIsolation( args, &arg1Ptr, &arg2Ptr );
    5e7e:	4669      	mov	r1, sp
    5e80:	aa01      	add	r2, sp, #4
    5e82:	f001 fbc9 	bl	7618 <CLI_argumentIsolation>

	USBKeys_ModifiersCLI = numToInt( arg1Ptr );
    5e86:	9800      	ldr	r0, [sp, #0]
    5e88:	f001 ff88 	bl	7d9c <numToInt>
    5e8c:	4b02      	ldr	r3, [pc, #8]	; (5e98 <cliFunc_setMod+0x1c>)
    5e8e:	7018      	strb	r0, [r3, #0]
}
    5e90:	b003      	add	sp, #12
    5e92:	f85d fb04 	ldr.w	pc, [sp], #4
    5e96:	bf00      	nop
    5e98:	1fff9388 	.word	0x1fff9388

00005e9c <Output_consCtrlSend_capability>:

// Sends a Consumer Control code to the USB Output buffer
void Output_consCtrlSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5e9c:	29ff      	cmp	r1, #255	; 0xff
}


// Sends a Consumer Control code to the USB Output buffer
void Output_consCtrlSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    5e9e:	b530      	push	{r4, r5, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5ea0:	d103      	bne.n	5eaa <Output_consCtrlSend_capability+0xe>
    5ea2:	28ff      	cmp	r0, #255	; 0xff
    5ea4:	d101      	bne.n	5eaa <Output_consCtrlSend_capability+0xe>
	{
		print("Output_consCtrlSend(consCode)");
    5ea6:	480e      	ldr	r0, [pc, #56]	; (5ee0 <Output_consCtrlSend_capability+0x44>)
    5ea8:	e003      	b.n	5eb2 <Output_consCtrlSend_capability+0x16>
		return;
	}

	// Not implemented in Boot Mode
	if ( USBKeys_Protocol == 0 )
    5eaa:	4b0e      	ldr	r3, [pc, #56]	; (5ee4 <Output_consCtrlSend_capability+0x48>)
    5eac:	781b      	ldrb	r3, [r3, #0]
    5eae:	b923      	cbnz	r3, 5eba <Output_consCtrlSend_capability+0x1e>
	{
		warn_print("Consumer Control is not implemented for Boot Mode");
    5eb0:	480d      	ldr	r0, [pc, #52]	; (5ee8 <Output_consCtrlSend_capability+0x4c>)
		return;
	}

	// Set consumer control code
	USBKeys_ConsCtrl = *(uint16_t*)(&args[0]);
}
    5eb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	}

	// Not implemented in Boot Mode
	if ( USBKeys_Protocol == 0 )
	{
		warn_print("Consumer Control is not implemented for Boot Mode");
    5eb6:	f001 be77 	b.w	7ba8 <_print>
		return;
	}

	// TODO Analog inputs
	// Only indicate USB has changed if either a press or release has occured
	if ( state == 0x01 || state == 0x03 )
    5eba:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
    5ebe:	2b01      	cmp	r3, #1
    5ec0:	4c0a      	ldr	r4, [pc, #40]	; (5eec <Output_consCtrlSend_capability+0x50>)
    5ec2:	d109      	bne.n	5ed8 <Output_consCtrlSend_capability+0x3c>
		USBKeys_Changed |= USBKeyChangeState_Consumer;
    5ec4:	4d0a      	ldr	r5, [pc, #40]	; (5ef0 <Output_consCtrlSend_capability+0x54>)
    5ec6:	782b      	ldrb	r3, [r5, #0]
    5ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5ecc:	702b      	strb	r3, [r5, #0]

	// Only send keypresses if press or hold state
	if ( stateType == 0x00 && state == 0x03 ) // Release state
    5ece:	b919      	cbnz	r1, 5ed8 <Output_consCtrlSend_capability+0x3c>
    5ed0:	2803      	cmp	r0, #3
    5ed2:	d101      	bne.n	5ed8 <Output_consCtrlSend_capability+0x3c>
	{
		USBKeys_ConsCtrl = 0;
    5ed4:	8021      	strh	r1, [r4, #0]
		return;
    5ed6:	bd30      	pop	{r4, r5, pc}
	}

	// Set consumer control code
	USBKeys_ConsCtrl = *(uint16_t*)(&args[0]);
    5ed8:	8813      	ldrh	r3, [r2, #0]
    5eda:	8023      	strh	r3, [r4, #0]
    5edc:	bd30      	pop	{r4, r5, pc}
    5ede:	bf00      	nop
    5ee0:	0000b545 	.word	0x0000b545
    5ee4:	1fff8d58 	.word	0x1fff8d58
    5ee8:	0000b563 	.word	0x0000b563
    5eec:	1fffa480 	.word	0x1fffa480
    5ef0:	1fff9378 	.word	0x1fff9378

00005ef4 <Output_noneSend_capability>:
// Ignores the given key status update
// Used to prevent fall-through, this is the None keyword in KLL
void Output_noneSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5ef4:	29ff      	cmp	r1, #255	; 0xff
    5ef6:	d104      	bne.n	5f02 <Output_noneSend_capability+0xe>
    5ef8:	28ff      	cmp	r0, #255	; 0xff
    5efa:	d102      	bne.n	5f02 <Output_noneSend_capability+0xe>
	{
		print("Output_noneSend()");
    5efc:	4801      	ldr	r0, [pc, #4]	; (5f04 <Output_noneSend_capability+0x10>)
    5efe:	f001 be53 	b.w	7ba8 <_print>
    5f02:	4770      	bx	lr
    5f04:	0000b5ac 	.word	0x0000b5ac

00005f08 <Output_sysCtrlSend_capability>:

// Sends a System Control code to the USB Output buffer
void Output_sysCtrlSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5f08:	29ff      	cmp	r1, #255	; 0xff
}


// Sends a System Control code to the USB Output buffer
void Output_sysCtrlSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    5f0a:	b530      	push	{r4, r5, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5f0c:	d103      	bne.n	5f16 <Output_sysCtrlSend_capability+0xe>
    5f0e:	28ff      	cmp	r0, #255	; 0xff
    5f10:	d101      	bne.n	5f16 <Output_sysCtrlSend_capability+0xe>
	{
		print("Output_sysCtrlSend(sysCode)");
    5f12:	480e      	ldr	r0, [pc, #56]	; (5f4c <Output_sysCtrlSend_capability+0x44>)
    5f14:	e003      	b.n	5f1e <Output_sysCtrlSend_capability+0x16>
		return;
	}

	// Not implemented in Boot Mode
	if ( USBKeys_Protocol == 0 )
    5f16:	4b0e      	ldr	r3, [pc, #56]	; (5f50 <Output_sysCtrlSend_capability+0x48>)
    5f18:	781b      	ldrb	r3, [r3, #0]
    5f1a:	b923      	cbnz	r3, 5f26 <Output_sysCtrlSend_capability+0x1e>
	{
		warn_print("System Control is not implemented for Boot Mode");
    5f1c:	480d      	ldr	r0, [pc, #52]	; (5f54 <Output_sysCtrlSend_capability+0x4c>)
		return;
	}

	// Set system control code
	USBKeys_SysCtrl = args[0];
}
    5f1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	}

	// Not implemented in Boot Mode
	if ( USBKeys_Protocol == 0 )
	{
		warn_print("System Control is not implemented for Boot Mode");
    5f22:	f001 be41 	b.w	7ba8 <_print>
		return;
	}

	// TODO Analog inputs
	// Only indicate USB has changed if either a press or release has occured
	if ( state == 0x01 || state == 0x03 )
    5f26:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
    5f2a:	2b01      	cmp	r3, #1
    5f2c:	4c0a      	ldr	r4, [pc, #40]	; (5f58 <Output_sysCtrlSend_capability+0x50>)
    5f2e:	d109      	bne.n	5f44 <Output_sysCtrlSend_capability+0x3c>
		USBKeys_Changed |= USBKeyChangeState_System;
    5f30:	4d0a      	ldr	r5, [pc, #40]	; (5f5c <Output_sysCtrlSend_capability+0x54>)
    5f32:	782b      	ldrb	r3, [r5, #0]
    5f34:	f043 0320 	orr.w	r3, r3, #32
    5f38:	702b      	strb	r3, [r5, #0]

	// Only send keypresses if press or hold state
	if ( stateType == 0x00 && state == 0x03 ) // Release state
    5f3a:	b919      	cbnz	r1, 5f44 <Output_sysCtrlSend_capability+0x3c>
    5f3c:	2803      	cmp	r0, #3
    5f3e:	d101      	bne.n	5f44 <Output_sysCtrlSend_capability+0x3c>
	{
		USBKeys_SysCtrl = 0;
    5f40:	7021      	strb	r1, [r4, #0]
		return;
    5f42:	bd30      	pop	{r4, r5, pc}
	}

	// Set system control code
	USBKeys_SysCtrl = args[0];
    5f44:	7813      	ldrb	r3, [r2, #0]
    5f46:	7023      	strb	r3, [r4, #0]
    5f48:	bd30      	pop	{r4, r5, pc}
    5f4a:	bf00      	nop
    5f4c:	0000b5be 	.word	0x0000b5be
    5f50:	1fff8d58 	.word	0x1fff8d58
    5f54:	0000b5da 	.word	0x0000b5da
    5f58:	1fffa448 	.word	0x1fffa448
    5f5c:	1fff9378 	.word	0x1fff9378

00005f60 <Output_flashMode_capability>:
}

void Output_flashMode_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5f60:	29ff      	cmp	r1, #255	; 0xff
    5f62:	d104      	bne.n	5f6e <Output_flashMode_capability+0xe>
    5f64:	28ff      	cmp	r0, #255	; 0xff
    5f66:	d102      	bne.n	5f6e <Output_flashMode_capability+0xe>
	{
		print("Output_flashMode()");
    5f68:	4802      	ldr	r0, [pc, #8]	; (5f74 <Output_flashMode_capability+0x14>)
    5f6a:	f001 be1d 	b.w	7ba8 <_print>


// Sets the device into firmware reload mode
inline void Output_firmwareReload()
{
	usb_device_reload();
    5f6e:	f000 baf5 	b.w	655c <usb_device_reload>
    5f72:	bf00      	nop
    5f74:	0000b621 	.word	0x0000b621

00005f78 <Output_usbMouse_capability>:
// Argument #2: USB X Axis (16 bit) relative
// Argument #3: USB Y Axis (16 bit) relative
void Output_usbMouse_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5f78:	29ff      	cmp	r1, #255	; 0xff
//     If you use it, be prepared that your .kll files will break in the future (post KLL 0.5)
// Argument #1: USB Mouse Button (16 bit)
// Argument #2: USB X Axis (16 bit) relative
// Argument #3: USB Y Axis (16 bit) relative
void Output_usbMouse_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    5f7a:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    5f7c:	d106      	bne.n	5f8c <Output_usbMouse_capability+0x14>
    5f7e:	28ff      	cmp	r0, #255	; 0xff
    5f80:	d104      	bne.n	5f8c <Output_usbMouse_capability+0x14>
	{
		print("Output_usbMouse(mouseButton,relX,relY)");
    5f82:	4819      	ldr	r0, [pc, #100]	; (5fe8 <Output_usbMouse_capability+0x70>)
	if ( mouse_button )
		USBMouse_Changed |= USBMouseChangeState_Buttons;

	if ( mouse_x || mouse_y )
		USBMouse_Changed |= USBMouseChangeState_Relative;
}
    5f84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
void Output_usbMouse_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Output_usbMouse(mouseButton,relX,relY)");
    5f88:	f001 be0e 	b.w	7ba8 <_print>
	// The USB spec defines up to a max of 0xFFFF buttons
	// The usual are:
	// 1 - Button 1 - (Primary)
	// 2 - Button 2 - (Secondary)
	// 3 - Button 3 - (Tertiary)
	uint16_t mouse_button = *(uint16_t*)(&args[0]);
    5f8c:	8814      	ldrh	r4, [r2, #0]

	// X/Y Relative Axis
	uint16_t mouse_x = *(uint16_t*)(&args[2]);
    5f8e:	8857      	ldrh	r7, [r2, #2]
	uint16_t mouse_y = *(uint16_t*)(&args[4]);
    5f90:	8896      	ldrh	r6, [r2, #4]

	// Adjust for bit shift
	uint16_t mouse_button_shift = mouse_button - 1;
    5f92:	1e65      	subs	r5, r4, #1
    5f94:	b2ad      	uxth	r5, r5

	// Only send mouse button if in press or hold state
	if ( stateType == 0x00 && state == 0x03 ) // Release state
    5f96:	b959      	cbnz	r1, 5fb0 <Output_usbMouse_capability+0x38>
    5f98:	2803      	cmp	r0, #3
    5f9a:	d109      	bne.n	5fb0 <Output_usbMouse_capability+0x38>
	{
		// Release
		if ( mouse_button )
    5f9c:	b1e4      	cbz	r4, 5fd8 <Output_usbMouse_capability+0x60>
			USBMouse_Buttons &= ~(1 << mouse_button_shift);
    5f9e:	4913      	ldr	r1, [pc, #76]	; (5fec <Output_usbMouse_capability+0x74>)
    5fa0:	880b      	ldrh	r3, [r1, #0]
    5fa2:	b29a      	uxth	r2, r3
    5fa4:	2301      	movs	r3, #1
    5fa6:	40ab      	lsls	r3, r5
    5fa8:	ea22 0303 	bic.w	r3, r2, r3
    5fac:	800b      	strh	r3, [r1, #0]
    5fae:	e00e      	b.n	5fce <Output_usbMouse_capability+0x56>
	}
	else
	{
		// Press or hold
		if ( mouse_button )
    5fb0:	b134      	cbz	r4, 5fc0 <Output_usbMouse_capability+0x48>
			USBMouse_Buttons |= (1 << mouse_button_shift);
    5fb2:	490e      	ldr	r1, [pc, #56]	; (5fec <Output_usbMouse_capability+0x74>)
    5fb4:	2301      	movs	r3, #1
    5fb6:	880a      	ldrh	r2, [r1, #0]
    5fb8:	40ab      	lsls	r3, r5
    5fba:	4313      	orrs	r3, r2
    5fbc:	b29b      	uxth	r3, r3
    5fbe:	800b      	strh	r3, [r1, #0]

		if ( mouse_x )
    5fc0:	b10f      	cbz	r7, 5fc6 <Output_usbMouse_capability+0x4e>
			USBMouse_Relative_x = mouse_x;
    5fc2:	4b0b      	ldr	r3, [pc, #44]	; (5ff0 <Output_usbMouse_capability+0x78>)
    5fc4:	801f      	strh	r7, [r3, #0]
		if ( mouse_y )
    5fc6:	b10e      	cbz	r6, 5fcc <Output_usbMouse_capability+0x54>
			USBMouse_Relative_y = mouse_y;
    5fc8:	4b0a      	ldr	r3, [pc, #40]	; (5ff4 <Output_usbMouse_capability+0x7c>)
    5fca:	801e      	strh	r6, [r3, #0]
	}

	// Trigger updates
	if ( mouse_button )
    5fcc:	b124      	cbz	r4, 5fd8 <Output_usbMouse_capability+0x60>
		USBMouse_Changed |= USBMouseChangeState_Buttons;
    5fce:	4a0a      	ldr	r2, [pc, #40]	; (5ff8 <Output_usbMouse_capability+0x80>)
    5fd0:	7813      	ldrb	r3, [r2, #0]
    5fd2:	f043 0301 	orr.w	r3, r3, #1
    5fd6:	7013      	strb	r3, [r2, #0]

	if ( mouse_x || mouse_y )
    5fd8:	b907      	cbnz	r7, 5fdc <Output_usbMouse_capability+0x64>
    5fda:	b126      	cbz	r6, 5fe6 <Output_usbMouse_capability+0x6e>
		USBMouse_Changed |= USBMouseChangeState_Relative;
    5fdc:	4a06      	ldr	r2, [pc, #24]	; (5ff8 <Output_usbMouse_capability+0x80>)
    5fde:	7813      	ldrb	r3, [r2, #0]
    5fe0:	f043 0302 	orr.w	r3, r3, #2
    5fe4:	7013      	strb	r3, [r2, #0]
    5fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fe8:	0000b634 	.word	0x0000b634
    5fec:	1fff937a 	.word	0x1fff937a
    5ff0:	1fff9380 	.word	0x1fff9380
    5ff4:	1fff9382 	.word	0x1fff9382
    5ff8:	1fff937c 	.word	0x1fff937c

00005ffc <Output_flushBuffers>:

// ----- Functions -----

// Flush Key buffers
void Output_flushBuffers()
{
    5ffc:	2200      	movs	r2, #0
	// Zero out USBKeys_Keys array
	for ( uint8_t c = 0; c < USB_NKRO_BITFIELD_SIZE_KEYS; c++ )
		USBKeys_Keys[ c ] = 0;
    5ffe:	4906      	ldr	r1, [pc, #24]	; (6018 <Output_flushBuffers+0x1c>)
    6000:	2300      	movs	r3, #0
    6002:	5453      	strb	r3, [r2, r1]
    6004:	3201      	adds	r2, #1

// Flush Key buffers
void Output_flushBuffers()
{
	// Zero out USBKeys_Keys array
	for ( uint8_t c = 0; c < USB_NKRO_BITFIELD_SIZE_KEYS; c++ )
    6006:	2a1b      	cmp	r2, #27
    6008:	d1f9      	bne.n	5ffe <Output_flushBuffers+0x2>
		USBKeys_Keys[ c ] = 0;

	// Zero out other key buffers
	USBKeys_ConsCtrl = 0;
    600a:	4a04      	ldr	r2, [pc, #16]	; (601c <Output_flushBuffers+0x20>)
    600c:	8013      	strh	r3, [r2, #0]
	USBKeys_Modifiers = 0;
    600e:	4a04      	ldr	r2, [pc, #16]	; (6020 <Output_flushBuffers+0x24>)
    6010:	7013      	strb	r3, [r2, #0]
	USBKeys_SysCtrl = 0;
    6012:	4a04      	ldr	r2, [pc, #16]	; (6024 <Output_flushBuffers+0x28>)
    6014:	7013      	strb	r3, [r2, #0]
    6016:	4770      	bx	lr
    6018:	1fffa449 	.word	0x1fffa449
    601c:	1fffa480 	.word	0x1fffa480
    6020:	1fff9376 	.word	0x1fff9376
    6024:	1fffa448 	.word	0x1fffa448

00006028 <Output_kbdProtocolBoot_capability>:

// Set Boot Keyboard Protocol
void Output_kbdProtocolBoot_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    6028:	29ff      	cmp	r1, #255	; 0xff

// ----- Capabilities -----

// Set Boot Keyboard Protocol
void Output_kbdProtocolBoot_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    602a:	b510      	push	{r4, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    602c:	d106      	bne.n	603c <Output_kbdProtocolBoot_capability+0x14>
    602e:	28ff      	cmp	r0, #255	; 0xff
    6030:	d104      	bne.n	603c <Output_kbdProtocolBoot_capability+0x14>
	{
		print("Output_kbdProtocolBoot()");
    6032:	4807      	ldr	r0, [pc, #28]	; (6050 <Output_kbdProtocolBoot_capability+0x28>)
	// Flush the key buffers
	Output_flushBuffers();

	// Set the keyboard protocol to Boot Mode
	USBKeys_Protocol = 0;
}
    6034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void Output_kbdProtocolBoot_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Output_kbdProtocolBoot()");
    6038:	f001 bdb6 	b.w	7ba8 <_print>
		return;
	}

	// Only set if necessary
	if ( USBKeys_Protocol == 0 )
    603c:	4c05      	ldr	r4, [pc, #20]	; (6054 <Output_kbdProtocolBoot_capability+0x2c>)
    603e:	7823      	ldrb	r3, [r4, #0]
    6040:	b12b      	cbz	r3, 604e <Output_kbdProtocolBoot_capability+0x26>
		return;

	// TODO Analog inputs
	// Only set on key press
	if ( stateType != 0x01 )
    6042:	2901      	cmp	r1, #1
    6044:	d103      	bne.n	604e <Output_kbdProtocolBoot_capability+0x26>
		return;

	// Flush the key buffers
	Output_flushBuffers();
    6046:	f7ff ffd9 	bl	5ffc <Output_flushBuffers>

	// Set the keyboard protocol to Boot Mode
	USBKeys_Protocol = 0;
    604a:	2300      	movs	r3, #0
    604c:	7023      	strb	r3, [r4, #0]
    604e:	bd10      	pop	{r4, pc}
    6050:	0000b65b 	.word	0x0000b65b
    6054:	1fff8d58 	.word	0x1fff8d58

00006058 <Output_kbdProtocolNKRO_capability>:

// Set NKRO Keyboard Protocol
void Output_kbdProtocolNKRO_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    6058:	29ff      	cmp	r1, #255	; 0xff
}


// Set NKRO Keyboard Protocol
void Output_kbdProtocolNKRO_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    605a:	b538      	push	{r3, r4, r5, lr}
    605c:	460c      	mov	r4, r1
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    605e:	d106      	bne.n	606e <Output_kbdProtocolNKRO_capability+0x16>
    6060:	28ff      	cmp	r0, #255	; 0xff
    6062:	d104      	bne.n	606e <Output_kbdProtocolNKRO_capability+0x16>
	{
		print("Output_kbdProtocolNKRO()");
    6064:	4807      	ldr	r0, [pc, #28]	; (6084 <Output_kbdProtocolNKRO_capability+0x2c>)
	// Flush the key buffers
	Output_flushBuffers();

	// Set the keyboard protocol to NKRO Mode
	USBKeys_Protocol = 1;
}
    6066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Output_kbdProtocolNKRO_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
	{
		print("Output_kbdProtocolNKRO()");
    606a:	f001 bd9d 	b.w	7ba8 <_print>
		return;
	}

	// Only set if necessary
	if ( USBKeys_Protocol == 1 )
    606e:	4d06      	ldr	r5, [pc, #24]	; (6088 <Output_kbdProtocolNKRO_capability+0x30>)
    6070:	782b      	ldrb	r3, [r5, #0]
    6072:	2b01      	cmp	r3, #1
    6074:	d004      	beq.n	6080 <Output_kbdProtocolNKRO_capability+0x28>
		return;

	// TODO Analog inputs
	// Only set on key press
	if ( stateType != 0x01 )
    6076:	2c01      	cmp	r4, #1
    6078:	d102      	bne.n	6080 <Output_kbdProtocolNKRO_capability+0x28>
		return;

	// Flush the key buffers
	Output_flushBuffers();
    607a:	f7ff ffbf 	bl	5ffc <Output_flushBuffers>

	// Set the keyboard protocol to NKRO Mode
	USBKeys_Protocol = 1;
    607e:	702c      	strb	r4, [r5, #0]
    6080:	bd38      	pop	{r3, r4, r5, pc}
    6082:	bf00      	nop
    6084:	0000b674 	.word	0x0000b674
    6088:	1fff8d58 	.word	0x1fff8d58

0000608c <Output_usbCodeSend_capability>:
// Adds a single USB Code to the USB Output buffer
// Argument #1: USB Code
void Output_usbCodeSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    608c:	29ff      	cmp	r1, #255	; 0xff


// Adds a single USB Code to the USB Output buffer
// Argument #1: USB Code
void Output_usbCodeSend_capability( uint8_t state, uint8_t stateType, uint8_t *args )
{
    608e:	b538      	push	{r3, r4, r5, lr}
	// Display capability name
	if ( stateType == 0xFF && state == 0xFF )
    6090:	d103      	bne.n	609a <Output_usbCodeSend_capability+0xe>
    6092:	28ff      	cmp	r0, #255	; 0xff
    6094:	d101      	bne.n	609a <Output_usbCodeSend_capability+0xe>
	{
		print("Output_usbCodeSend(usbCode)");
    6096:	485f      	ldr	r0, [pc, #380]	; (6214 <Output_usbCodeSend_capability+0x188>)
    6098:	e0a8      	b.n	61ec <Output_usbCodeSend_capability+0x160>
		return;
	}

	// Depending on which mode the keyboard is in the USB needs Press/Hold/Release events
	uint8_t keyPress = 0; // Default to key release, only used for NKRO
	switch ( USBKeys_Protocol )
    609a:	4b5f      	ldr	r3, [pc, #380]	; (6218 <Output_usbCodeSend_capability+0x18c>)
    609c:	781c      	ldrb	r4, [r3, #0]
    609e:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    60a2:	b114      	cbz	r4, 60aa <Output_usbCodeSend_capability+0x1e>
    60a4:	2d01      	cmp	r5, #1
    60a6:	d00b      	beq.n	60c0 <Output_usbCodeSend_capability+0x34>
    60a8:	e012      	b.n	60d0 <Output_usbCodeSend_capability+0x44>
	{
	case 0: // Boot Mode
		// TODO Analog inputs
		// Only indicate USB has changed if either a press or release has occured
		if ( state == 0x01 || state == 0x03 )
    60aa:	f000 04fd 	and.w	r4, r0, #253	; 0xfd
    60ae:	2c01      	cmp	r4, #1
    60b0:	d10e      	bne.n	60d0 <Output_usbCodeSend_capability+0x44>
			USBKeys_Changed = USBKeyChangeState_MainKeys;
    60b2:	4c5a      	ldr	r4, [pc, #360]	; (621c <Output_usbCodeSend_capability+0x190>)
    60b4:	2502      	movs	r5, #2
    60b6:	7025      	strb	r5, [r4, #0]

		// Only send keypresses if press or hold state
		if ( stateType == 0x00 && state == 0x03 ) // Release state
    60b8:	b951      	cbnz	r1, 60d0 <Output_usbCodeSend_capability+0x44>
    60ba:	2803      	cmp	r0, #3
    60bc:	d108      	bne.n	60d0 <Output_usbCodeSend_capability+0x44>
    60be:	bd38      	pop	{r3, r4, r5, pc}
			return;
		break;
	case 1: // NKRO Mode
		// Only send press and release events
		if ( stateType == 0x00 && state == 0x02 ) // Hold state
    60c0:	b931      	cbnz	r1, 60d0 <Output_usbCodeSend_capability+0x44>
    60c2:	2802      	cmp	r0, #2
    60c4:	f000 80a4 	beq.w	6210 <Output_usbCodeSend_capability+0x184>
		print("Output_usbCodeSend(usbCode)");
		return;
	}

	// Depending on which mode the keyboard is in the USB needs Press/Hold/Release events
	uint8_t keyPress = 0; // Default to key release, only used for NKRO
    60c8:	1e41      	subs	r1, r0, #1
    60ca:	4248      	negs	r0, r1
    60cc:	4148      	adcs	r0, r1
    60ce:	e000      	b.n	60d2 <Output_usbCodeSend_capability+0x46>
    60d0:	2000      	movs	r0, #0
	//  Bits  48 - 161 (bytes  6 - 20) correspond to USB Codes  51 - 164 (Secondary)
	//  Bits 168 - 213 (bytes 21 - 26) correspond to USB Codes 176 - 221 (Tertiary)
	//  Bits 214 - 216                 unused
	uint8_t bytePosition = 0;
	uint8_t byteShift = 0;
	switch ( USBKeys_Protocol )
    60d2:	781b      	ldrb	r3, [r3, #0]
			keyPress = 1;
		break;
	}

	// Get the keycode from arguments
	uint8_t key = args[0];
    60d4:	7814      	ldrb	r4, [r2, #0]
	//  Bits  48 - 161 (bytes  6 - 20) correspond to USB Codes  51 - 164 (Secondary)
	//  Bits 168 - 213 (bytes 21 - 26) correspond to USB Codes 176 - 221 (Tertiary)
	//  Bits 214 - 216                 unused
	uint8_t bytePosition = 0;
	uint8_t byteShift = 0;
	switch ( USBKeys_Protocol )
    60d6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    60da:	b113      	cbz	r3, 60e2 <Output_usbCodeSend_capability+0x56>
    60dc:	2d01      	cmp	r5, #1
    60de:	d020      	beq.n	6122 <Output_usbCodeSend_capability+0x96>
    60e0:	bd38      	pop	{r3, r4, r5, pc}
	{
	case 0: // Boot Mode
		// Set the modifier bit if this key is a modifier
		if ( (key & 0xE0) == 0xE0 ) // AND with 0xE0 (Left Ctrl, first modifier)
    60e2:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
    60e6:	2be0      	cmp	r3, #224	; 0xe0
    60e8:	d108      	bne.n	60fc <Output_usbCodeSend_capability+0x70>
		{
			USBKeys_Modifiers |= 1 << (key ^ 0xE0); // Left shift 1 by key XOR 0xE0
    60ea:	494d      	ldr	r1, [pc, #308]	; (6220 <Output_usbCodeSend_capability+0x194>)
    60ec:	f084 04e0 	eor.w	r4, r4, #224	; 0xe0
    60f0:	780a      	ldrb	r2, [r1, #0]
    60f2:	2301      	movs	r3, #1
    60f4:	40a3      	lsls	r3, r4
    60f6:	4313      	orrs	r3, r2
    60f8:	700b      	strb	r3, [r1, #0]
    60fa:	bd38      	pop	{r3, r4, r5, pc}
		}
		// Normal USB Code
		else
		{
			// USB Key limit reached
			if ( USBKeys_Sent >= USB_BOOT_MAX_KEYS )
    60fc:	4a49      	ldr	r2, [pc, #292]	; (6224 <Output_usbCodeSend_capability+0x198>)
    60fe:	7813      	ldrb	r3, [r2, #0]
    6100:	2b05      	cmp	r3, #5
    6102:	d901      	bls.n	6108 <Output_usbCodeSend_capability+0x7c>
			{
				warn_print("USB Key limit reached");
    6104:	4848      	ldr	r0, [pc, #288]	; (6228 <Output_usbCodeSend_capability+0x19c>)
    6106:	e071      	b.n	61ec <Output_usbCodeSend_capability+0x160>
				return;
			}

			// Make sure key is within the USB HID range
			if ( key <= 104 )
    6108:	2c68      	cmp	r4, #104	; 0x68
    610a:	d804      	bhi.n	6116 <Output_usbCodeSend_capability+0x8a>
			{
				USBKeys_Keys[USBKeys_Sent++] = key;
    610c:	1c59      	adds	r1, r3, #1
    610e:	7011      	strb	r1, [r2, #0]
    6110:	4a46      	ldr	r2, [pc, #280]	; (622c <Output_usbCodeSend_capability+0x1a0>)
    6112:	54d4      	strb	r4, [r2, r3]
    6114:	bd38      	pop	{r3, r4, r5, pc}
			}
			// Invalid key
			else
			{
				warn_msg("USB Code above 104/0x68 in Boot Mode: ");
    6116:	4846      	ldr	r0, [pc, #280]	; (6230 <Output_usbCodeSend_capability+0x1a4>)
    6118:	f001 fd46 	bl	7ba8 <_print>
				printHex( key );
    611c:	4620      	mov	r0, r4
    611e:	2101      	movs	r1, #1
    6120:	e061      	b.n	61e6 <Output_usbCodeSend_capability+0x15a>
		}
		break;

	case 1: // NKRO Mode
		// Set the modifier bit if this key is a modifier
		if ( (key & 0xE0) == 0xE0 ) // AND with 0xE0 (Left Ctrl, first modifier)
    6122:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
    6126:	2be0      	cmp	r3, #224	; 0xe0
    6128:	d110      	bne.n	614c <Output_usbCodeSend_capability+0xc0>
    612a:	4b3d      	ldr	r3, [pc, #244]	; (6220 <Output_usbCodeSend_capability+0x194>)
    612c:	f084 04e0 	eor.w	r4, r4, #224	; 0xe0
		{
			if ( keyPress )
			{
				USBKeys_Modifiers |= 1 << (key ^ 0xE0); // Left shift 1 by key XOR 0xE0
    6130:	40a5      	lsls	r5, r4
    6132:	781a      	ldrb	r2, [r3, #0]

	case 1: // NKRO Mode
		// Set the modifier bit if this key is a modifier
		if ( (key & 0xE0) == 0xE0 ) // AND with 0xE0 (Left Ctrl, first modifier)
		{
			if ( keyPress )
    6134:	b108      	cbz	r0, 613a <Output_usbCodeSend_capability+0xae>
			{
				USBKeys_Modifiers |= 1 << (key ^ 0xE0); // Left shift 1 by key XOR 0xE0
    6136:	4315      	orrs	r5, r2
    6138:	e001      	b.n	613e <Output_usbCodeSend_capability+0xb2>
			}
			else // Release
			{
				USBKeys_Modifiers &= ~(1 << (key ^ 0xE0)); // Left shift 1 by key XOR 0xE0
    613a:	ea22 0505 	bic.w	r5, r2, r5
			}

			USBKeys_Changed |= USBKeyChangeState_Modifiers;
    613e:	4a37      	ldr	r2, [pc, #220]	; (621c <Output_usbCodeSend_capability+0x190>)
			{
				USBKeys_Modifiers |= 1 << (key ^ 0xE0); // Left shift 1 by key XOR 0xE0
			}
			else // Release
			{
				USBKeys_Modifiers &= ~(1 << (key ^ 0xE0)); // Left shift 1 by key XOR 0xE0
    6140:	701d      	strb	r5, [r3, #0]
			}

			USBKeys_Changed |= USBKeyChangeState_Modifiers;
    6142:	7813      	ldrb	r3, [r2, #0]
    6144:	f043 0301 	orr.w	r3, r3, #1
    6148:	7013      	strb	r3, [r2, #0]
			break;
    614a:	bd38      	pop	{r3, r4, r5, pc}
		}
		// First 6 bytes
		else if ( key >= 4 && key <= 49 )
    614c:	1f23      	subs	r3, r4, #4
    614e:	2b2d      	cmp	r3, #45	; 0x2d
    6150:	d80f      	bhi.n	6172 <Output_usbCodeSend_capability+0xe6>
    6152:	3c05      	subs	r4, #5
    6154:	b2e4      	uxtb	r4, r4
    6156:	2c2e      	cmp	r4, #46	; 0x2e
    6158:	bf9f      	itttt	ls
    615a:	4b36      	ldrls	r3, [pc, #216]	; (6234 <Output_usbCodeSend_capability+0x1a8>)
    615c:	5d1a      	ldrbls	r2, [r3, r4]
    615e:	4b36      	ldrls	r3, [pc, #216]	; (6238 <Output_usbCodeSend_capability+0x1ac>)
    6160:	5d19      	ldrbls	r1, [r3, r4]
				byteLookup( 3 );
				byteLookup( 4 );
				byteLookup( 5 );
			}

			USBKeys_Changed |= USBKeyChangeState_MainKeys;
    6162:	4c2e      	ldr	r4, [pc, #184]	; (621c <Output_usbCodeSend_capability+0x190>)
    6164:	7823      	ldrb	r3, [r4, #0]

			USBKeys_Changed |= USBKeyChangeState_Modifiers;
			break;
		}
		// First 6 bytes
		else if ( key >= 4 && key <= 49 )
    6166:	bf84      	itt	hi
    6168:	2100      	movhi	r1, #0
    616a:	460a      	movhi	r2, r1
				byteLookup( 3 );
				byteLookup( 4 );
				byteLookup( 5 );
			}

			USBKeys_Changed |= USBKeyChangeState_MainKeys;
    616c:	f043 0302 	orr.w	r3, r3, #2
    6170:	e00c      	b.n	618c <Output_usbCodeSend_capability+0x100>
		}
		// Next 14 bytes
		else if ( key >= 51 && key <= 155 )
    6172:	f1a4 0333 	sub.w	r3, r4, #51	; 0x33
    6176:	b2db      	uxtb	r3, r3
    6178:	2b68      	cmp	r3, #104	; 0x68
    617a:	d809      	bhi.n	6190 <Output_usbCodeSend_capability+0x104>
    617c:	4a2f      	ldr	r2, [pc, #188]	; (623c <Output_usbCodeSend_capability+0x1b0>)
    617e:	4930      	ldr	r1, [pc, #192]	; (6240 <Output_usbCodeSend_capability+0x1b4>)
				byteLookup( 17 );
				byteLookup( 18 );
				byteLookup( 19 );
			}

			USBKeys_Changed |= USBKeyChangeState_SecondaryKeys;
    6180:	4c26      	ldr	r4, [pc, #152]	; (621c <Output_usbCodeSend_capability+0x190>)
    6182:	5cd2      	ldrb	r2, [r2, r3]
    6184:	5cc9      	ldrb	r1, [r1, r3]
    6186:	7823      	ldrb	r3, [r4, #0]
    6188:	f043 0304 	orr.w	r3, r3, #4
    618c:	7023      	strb	r3, [r4, #0]
    618e:	e031      	b.n	61f4 <Output_usbCodeSend_capability+0x168>
		}
		// Next byte
		else if ( key >= 157 && key <= 164 )
    6190:	f104 0363 	add.w	r3, r4, #99	; 0x63
    6194:	b2db      	uxtb	r3, r3
    6196:	2b07      	cmp	r3, #7
    6198:	d808      	bhi.n	61ac <Output_usbCodeSend_capability+0x120>
    619a:	4a2a      	ldr	r2, [pc, #168]	; (6244 <Output_usbCodeSend_capability+0x1b8>)
    619c:	5cd1      	ldrb	r1, [r2, r3]
			switch ( keyPos )
			{
				byteLookup( 20 );
			}

			USBKeys_Changed |= USBKeyChangeState_TertiaryKeys;
    619e:	4a1f      	ldr	r2, [pc, #124]	; (621c <Output_usbCodeSend_capability+0x190>)
    61a0:	7813      	ldrb	r3, [r2, #0]
    61a2:	f043 0308 	orr.w	r3, r3, #8
    61a6:	7013      	strb	r3, [r2, #0]
    61a8:	2214      	movs	r2, #20
    61aa:	e023      	b.n	61f4 <Output_usbCodeSend_capability+0x168>
		}
		// Last 6 bytes
		else if ( key >= 176 && key <= 221 )
    61ac:	f104 0350 	add.w	r3, r4, #80	; 0x50
    61b0:	b2db      	uxtb	r3, r3
    61b2:	2b2d      	cmp	r3, #45	; 0x2d
    61b4:	d808      	bhi.n	61c8 <Output_usbCodeSend_capability+0x13c>
    61b6:	4a24      	ldr	r2, [pc, #144]	; (6248 <Output_usbCodeSend_capability+0x1bc>)
    61b8:	4924      	ldr	r1, [pc, #144]	; (624c <Output_usbCodeSend_capability+0x1c0>)
				byteLookup( 24 );
				byteLookup( 25 );
				byteLookup( 26 );
			}

			USBKeys_Changed |= USBKeyChangeState_QuartiaryKeys;
    61ba:	4c18      	ldr	r4, [pc, #96]	; (621c <Output_usbCodeSend_capability+0x190>)
    61bc:	5cd2      	ldrb	r2, [r2, r3]
    61be:	5cc9      	ldrb	r1, [r1, r3]
    61c0:	7823      	ldrb	r3, [r4, #0]
    61c2:	f043 0310 	orr.w	r3, r3, #16
    61c6:	e7e1      	b.n	618c <Output_usbCodeSend_capability+0x100>
		}
		// Received 0x00
		// This is a special USB Code that internally indicates a "break"
		// It is used to send "nothing" in order to break up sequences of USB Codes
		else if ( key == 0x00 )
    61c8:	b944      	cbnz	r4, 61dc <Output_usbCodeSend_capability+0x150>
		{
			USBKeys_Changed |= USBKeyChangeState_MainKeys;
    61ca:	4a14      	ldr	r2, [pc, #80]	; (621c <Output_usbCodeSend_capability+0x190>)
    61cc:	7813      	ldrb	r3, [r2, #0]
    61ce:	f043 0302 	orr.w	r3, r3, #2
    61d2:	7013      	strb	r3, [r2, #0]
			USBKeys_Sent++;
		}

		break;
	}
}
    61d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		else if ( key == 0x00 )
		{
			USBKeys_Changed |= USBKeyChangeState_MainKeys;

			// Also flush out buffers just in case
			Output_flushBuffers();
    61d8:	f7ff bf10 	b.w	5ffc <Output_flushBuffers>
			break;
		}
		// Invalid key
		else
		{
			warn_msg("USB Code not within 4-49 (0x4-0x31), 51-155 (0x33-0x9B), 157-164 (0x9D-0xA4), 176-221 (0xB0-0xDD) or 224-231 (0xE0-0xE7) NKRO Mode: ");
    61dc:	481c      	ldr	r0, [pc, #112]	; (6250 <Output_usbCodeSend_capability+0x1c4>)
    61de:	f001 fce3 	bl	7ba8 <_print>
			printHex( key );
    61e2:	4620      	mov	r0, r4
    61e4:	4629      	mov	r1, r5
    61e6:	f001 fd81 	bl	7cec <printHex_op>
			print( NL );
    61ea:	481a      	ldr	r0, [pc, #104]	; (6254 <Output_usbCodeSend_capability+0x1c8>)
			USBKeys_Sent++;
		}

		break;
	}
}
    61ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		// Invalid key
		else
		{
			warn_msg("USB Code not within 4-49 (0x4-0x31), 51-155 (0x33-0x9B), 157-164 (0x9D-0xA4), 176-221 (0xB0-0xDD) or 224-231 (0xE0-0xE7) NKRO Mode: ");
			printHex( key );
			print( NL );
    61f0:	f001 bcda 	b.w	7ba8 <_print>
    61f4:	4d0d      	ldr	r5, [pc, #52]	; (622c <Output_usbCodeSend_capability+0x1a0>)
    61f6:	4c0b      	ldr	r4, [pc, #44]	; (6224 <Output_usbCodeSend_capability+0x198>)
    61f8:	2301      	movs	r3, #1
		}

		// Set/Unset
		if ( keyPress )
		{
			USBKeys_Keys[bytePosition] |= (1 << byteShift);
    61fa:	408b      	lsls	r3, r1
    61fc:	5ca9      	ldrb	r1, [r5, r2]
			print( NL );
			break;
		}

		// Set/Unset
		if ( keyPress )
    61fe:	b108      	cbz	r0, 6204 <Output_usbCodeSend_capability+0x178>
		{
			USBKeys_Keys[bytePosition] |= (1 << byteShift);
    6200:	430b      	orrs	r3, r1
    6202:	e001      	b.n	6208 <Output_usbCodeSend_capability+0x17c>
			USBKeys_Sent++;
		}
		else // Release
		{
			USBKeys_Keys[bytePosition] &= ~(1 << byteShift);
    6204:	ea21 0303 	bic.w	r3, r1, r3
    6208:	54ab      	strb	r3, [r5, r2]
			USBKeys_Sent++;
    620a:	7823      	ldrb	r3, [r4, #0]
    620c:	3301      	adds	r3, #1
    620e:	7023      	strb	r3, [r4, #0]
    6210:	bd38      	pop	{r3, r4, r5, pc}
    6212:	bf00      	nop
    6214:	0000b68d 	.word	0x0000b68d
    6218:	1fff8d58 	.word	0x1fff8d58
    621c:	1fff9378 	.word	0x1fff9378
    6220:	1fff9376 	.word	0x1fff9376
    6224:	1fff9385 	.word	0x1fff9385
    6228:	0000b6a9 	.word	0x0000b6a9
    622c:	1fffa449 	.word	0x1fffa449
    6230:	0000b6d6 	.word	0x0000b6d6
    6234:	0000b8a3 	.word	0x0000b8a3
    6238:	0000b8d2 	.word	0x0000b8d2
    623c:	0000b356 	.word	0x0000b356
    6240:	0000b3da 	.word	0x0000b3da
    6244:	0000b31e 	.word	0x0000b31e
    6248:	0000b326 	.word	0x0000b326
    624c:	0000b901 	.word	0x0000b901
    6250:	0000b712 	.word	0x0000b712
    6254:	0000bc21 	.word	0x0000bc21

00006258 <Output_setup>:
}


// USB Module Setup
inline void Output_setup()
{
    6258:	b508      	push	{r3, lr}
	// Initialize the USB
	// If a USB connection does not exist, just ignore it
	// All usb related functions will non-fatally fail if called
	// If the USB initialization is delayed, then functionality will just be delayed
	usb_init();
    625a:	f000 fd9f 	bl	6d9c <usb_init>

	// Register USB Output CLI dictionary
	CLI_registerDictionary( outputCLIDict, outputCLIDictName );
    625e:	4804      	ldr	r0, [pc, #16]	; (6270 <Output_setup+0x18>)
    6260:	4904      	ldr	r1, [pc, #16]	; (6274 <Output_setup+0x1c>)
    6262:	f001 fa4d 	bl	7700 <CLI_registerDictionary>

	// Flush key buffers
	Output_flushBuffers();
}
    6266:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	// Register USB Output CLI dictionary
	CLI_registerDictionary( outputCLIDict, outputCLIDictName );

	// Flush key buffers
	Output_flushBuffers();
    626a:	f7ff bec7 	b.w	5ffc <Output_flushBuffers>
    626e:	bf00      	nop
    6270:	0000b44c 	.word	0x0000b44c
    6274:	0000b3c6 	.word	0x0000b3c6

00006278 <Output_send>:
}


// USB Data Send
inline void Output_send()
{
    6278:	b510      	push	{r4, lr}
	// USB status checks
	// Non-standard USB state manipulation, usually does nothing
	usb_device_check();
    627a:	f000 fde5 	bl	6e48 <usb_device_check>

	// Boot Mode Only, unset stale keys
	if ( USBKeys_Protocol == 0 )
    627e:	4b15      	ldr	r3, [pc, #84]	; (62d4 <Output_send+0x5c>)
    6280:	781a      	ldrb	r2, [r3, #0]
    6282:	461c      	mov	r4, r3
    6284:	b94a      	cbnz	r2, 629a <Output_send+0x22>
		for ( uint8_t c = USBKeys_Sent; c < USB_BOOT_MAX_KEYS; c++ )
    6286:	4b14      	ldr	r3, [pc, #80]	; (62d8 <Output_send+0x60>)
    6288:	781b      	ldrb	r3, [r3, #0]
    628a:	2b05      	cmp	r3, #5
    628c:	d805      	bhi.n	629a <Output_send+0x22>
			USBKeys_Keys[c] = 0;
    628e:	4a13      	ldr	r2, [pc, #76]	; (62dc <Output_send+0x64>)
    6290:	2100      	movs	r1, #0
    6292:	54d1      	strb	r1, [r2, r3]
	// Non-standard USB state manipulation, usually does nothing
	usb_device_check();

	// Boot Mode Only, unset stale keys
	if ( USBKeys_Protocol == 0 )
		for ( uint8_t c = USBKeys_Sent; c < USB_BOOT_MAX_KEYS; c++ )
    6294:	3301      	adds	r3, #1
    6296:	b2db      	uxtb	r3, r3
    6298:	e7f7      	b.n	628a <Output_send+0x12>
			USBKeys_Keys[c] = 0;

	// Process mouse actions
	while ( USBMouse_Changed )
    629a:	4b11      	ldr	r3, [pc, #68]	; (62e0 <Output_send+0x68>)
    629c:	781b      	ldrb	r3, [r3, #0]
    629e:	b113      	cbz	r3, 62a6 <Output_send+0x2e>
		usb_mouse_send();
    62a0:	f000 ffa0 	bl	71e4 <usb_mouse_send>
    62a4:	e7f9      	b.n	629a <Output_send+0x22>

	// Send keypresses while there are pending changes
	while ( USBKeys_Changed )
    62a6:	4b0f      	ldr	r3, [pc, #60]	; (62e4 <Output_send+0x6c>)
    62a8:	781b      	ldrb	r3, [r3, #0]
    62aa:	b113      	cbz	r3, 62b2 <Output_send+0x3a>
		usb_keyboard_send();
    62ac:	f000 fdf6 	bl	6e9c <usb_keyboard_send>
    62b0:	e7f9      	b.n	62a6 <Output_send+0x2e>

	// Clear keys sent
	USBKeys_Sent = 0;
    62b2:	4a09      	ldr	r2, [pc, #36]	; (62d8 <Output_send+0x60>)
    62b4:	7013      	strb	r3, [r2, #0]

	// Signal Scan Module we are finished
	switch ( USBKeys_Protocol )
    62b6:	7822      	ldrb	r2, [r4, #0]
    62b8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    62bc:	b112      	cbz	r2, 62c4 <Output_send+0x4c>
    62be:	2801      	cmp	r0, #1
    62c0:	d003      	beq.n	62ca <Output_send+0x52>
    62c2:	bd10      	pop	{r4, pc}
	{
	case 0: // Boot Mode
		// Clear modifiers only in boot mode
		USBKeys_Modifiers = 0;
    62c4:	4b08      	ldr	r3, [pc, #32]	; (62e8 <Output_send+0x70>)
    62c6:	7018      	strb	r0, [r3, #0]
    62c8:	e000      	b.n	62cc <Output_send+0x54>
		Scan_finishedWithOutput( USBKeys_Sent <= USB_BOOT_MAX_KEYS ? USBKeys_Sent : USB_BOOT_MAX_KEYS );
		break;
	case 1: // NKRO Mode
		Scan_finishedWithOutput( USBKeys_Sent );
    62ca:	4618      	mov	r0, r3
		break;
	}
}
    62cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		// Clear modifiers only in boot mode
		USBKeys_Modifiers = 0;
		Scan_finishedWithOutput( USBKeys_Sent <= USB_BOOT_MAX_KEYS ? USBKeys_Sent : USB_BOOT_MAX_KEYS );
		break;
	case 1: // NKRO Mode
		Scan_finishedWithOutput( USBKeys_Sent );
    62d0:	f7fe bc68 	b.w	4ba4 <Scan_finishedWithOutput>
    62d4:	1fff8d58 	.word	0x1fff8d58
    62d8:	1fff9385 	.word	0x1fff9385
    62dc:	1fffa449 	.word	0x1fffa449
    62e0:	1fff937c 	.word	0x1fff937c
    62e4:	1fff9378 	.word	0x1fff9378
    62e8:	1fff9376 	.word	0x1fff9376

000062ec <Output_availablechar>:


// USB Input buffer available
inline unsigned int Output_availablechar()
{
	return usb_serial_available();
    62ec:	f000 bff2 	b.w	72d4 <usb_serial_available>

000062f0 <Output_getchar>:

// USB Get Character from input buffer
inline int Output_getchar()
{
	// XXX Make sure to check output_availablechar() first! Information is lost with the cast (error codes) (AVR)
	return (int)usb_serial_getchar();
    62f0:	f000 bfca 	b.w	7288 <usb_serial_getchar>

000062f4 <Output_putstr>:
	uint16_t count = 0;
#elif defined(_mk20dx128_) || defined(_mk20dx128vlf5_) || defined(_mk20dx256_) || defined(_mk20dx256vlh7_) // ARM
	uint32_t count = 0;
#endif
	// Count characters until NULL character, then send the amount counted
	while ( str[count] != '\0' )
    62f4:	4603      	mov	r3, r0
    62f6:	1a19      	subs	r1, r3, r0
    62f8:	f813 2b01 	ldrb.w	r2, [r3], #1
    62fc:	2a00      	cmp	r2, #0
    62fe:	d1fa      	bne.n	62f6 <Output_putstr+0x2>
		count++;

	return usb_serial_write( str, count );
    6300:	f000 bff6 	b.w	72f0 <usb_serial_write>

00006304 <Output_softReset>:


// Soft Chip Reset
inline void Output_softReset()
{
	usb_device_software_reset();
    6304:	4b01      	ldr	r3, [pc, #4]	; (630c <Output_softReset+0x8>)
    6306:	4a02      	ldr	r2, [pc, #8]	; (6310 <Output_softReset+0xc>)
    6308:	601a      	str	r2, [r3, #0]
    630a:	4770      	bx	lr
    630c:	e000ed0c 	.word	0xe000ed0c
    6310:	05fa0004 	.word	0x05fa0004

00006314 <Output_current_available>:
unsigned int Output_current_available()
{
	unsigned int total_current = 0;

	// Check for USB current source
	total_current += Output_USBCurrent_Available;
    6314:	4a03      	ldr	r2, [pc, #12]	; (6324 <Output_current_available+0x10>)

	// Check for external current source
	total_current += Output_ExtCurrent_Available;
    6316:	4b04      	ldr	r3, [pc, #16]	; (6328 <Output_current_available+0x14>)
unsigned int Output_current_available()
{
	unsigned int total_current = 0;

	// Check for USB current source
	total_current += Output_USBCurrent_Available;
    6318:	8810      	ldrh	r0, [r2, #0]

	// Check for external current source
	total_current += Output_ExtCurrent_Available;
    631a:	881b      	ldrh	r3, [r3, #0]

	// XXX If the total available current is still 0
	// Set to 100 mA, which is generally a safe assumption at startup
	// before we've been able to determine actual available current
	if ( total_current == 0 )
    631c:	1818      	adds	r0, r3, r0
	{
		total_current = 100;
	}

	return total_current;
}
    631e:	bf08      	it	eq
    6320:	2064      	moveq	r0, #100	; 0x64
    6322:	4770      	bx	lr
    6324:	1fff9374 	.word	0x1fff9374
    6328:	1fff937e 	.word	0x1fff937e

0000632c <Output_update_usb_current>:


// Update USB current (mA)
// Triggers power change event
void Output_update_usb_current( unsigned int current )
{
    632c:	b508      	push	{r3, lr}
	// Only signal if changed
	if ( current == Output_USBCurrent_Available )
    632e:	4b06      	ldr	r3, [pc, #24]	; (6348 <Output_update_usb_current+0x1c>)
    6330:	881a      	ldrh	r2, [r3, #0]
    6332:	4290      	cmp	r0, r2
    6334:	d006      	beq.n	6344 <Output_update_usb_current+0x18>
		return;

	// Update USB current
	Output_USBCurrent_Available = current;
    6336:	8018      	strh	r0, [r3, #0]
	printInt32( total_current );
	print(" mA" NL);
	*/

	// Send new total current to the Scan Modules
	Scan_currentChange( Output_current_available() );
    6338:	f7ff ffec 	bl	6314 <Output_current_available>
}
    633c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printInt32( total_current );
	print(" mA" NL);
	*/

	// Send new total current to the Scan Modules
	Scan_currentChange( Output_current_available() );
    6340:	f7fe bc36 	b.w	4bb0 <Scan_currentChange>
    6344:	bd08      	pop	{r3, pc}
    6346:	bf00      	nop
    6348:	1fff9374 	.word	0x1fff9374

0000634c <Output_update_external_current>:
// Update external current (mA)
// Triggers power change event
void Output_update_external_current( unsigned int current )
{
	// Only signal if changed
	if ( current == Output_ExtCurrent_Available )
    634c:	4b0c      	ldr	r3, [pc, #48]	; (6380 <Output_update_external_current+0x34>)
    634e:	881a      	ldrh	r2, [r3, #0]
    6350:	4290      	cmp	r0, r2


// Update external current (mA)
// Triggers power change event
void Output_update_external_current( unsigned int current )
{
    6352:	b510      	push	{r4, lr}
	// Only signal if changed
	if ( current == Output_ExtCurrent_Available )
    6354:	d012      	beq.n	637c <Output_update_external_current+0x30>
		return;

	// Update external current
	Output_ExtCurrent_Available = current;
    6356:	8018      	strh	r0, [r3, #0]

	unsigned int total_current = Output_current_available();
    6358:	f7ff ffdc 	bl	6314 <Output_current_available>
    635c:	4604      	mov	r4, r0
	info_msg("External Available Current Changed. Total Available: ");
    635e:	4809      	ldr	r0, [pc, #36]	; (6384 <Output_update_external_current+0x38>)
    6360:	f001 fc22 	bl	7ba8 <_print>
	printInt32( total_current );
    6364:	4620      	mov	r0, r4
    6366:	f001 fc8b 	bl	7c80 <printInt32>
	print(" mA" NL);
    636a:	4807      	ldr	r0, [pc, #28]	; (6388 <Output_update_external_current+0x3c>)
    636c:	f001 fc1c 	bl	7ba8 <_print>

	// Send new total current to the Scan Modules
	Scan_currentChange( Output_current_available() );
    6370:	f7ff ffd0 	bl	6314 <Output_current_available>
}
    6374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	info_msg("External Available Current Changed. Total Available: ");
	printInt32( total_current );
	print(" mA" NL);

	// Send new total current to the Scan Modules
	Scan_currentChange( Output_current_available() );
    6378:	f7fe bc1a 	b.w	4bb0 <Scan_currentChange>
    637c:	bd10      	pop	{r4, pc}
    637e:	bf00      	nop
    6380:	1fff937e 	.word	0x1fff937e
    6384:	0000b7ac 	.word	0x0000b7ac
    6388:	0000b7f4 	.word	0x0000b7f4

0000638c <endpoint0_transmit>:
	#endif
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
    638c:	b5f0      	push	{r4, r5, r6, r7, lr}
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    638e:	4c0c      	ldr	r4, [pc, #48]	; (63c0 <endpoint0_transmit+0x34>)
    6390:	4e0c      	ldr	r6, [pc, #48]	; (63c4 <endpoint0_transmit+0x38>)
    6392:	7823      	ldrb	r3, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    6394:	4d0c      	ldr	r5, [pc, #48]	; (63c8 <endpoint0_transmit+0x3c>)
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    6396:	f043 0702 	orr.w	r7, r3, #2
    639a:	eb06 02c7 	add.w	r2, r6, r7, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    639e:	f083 0301 	eor.w	r3, r3, #1
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    63a2:	6050      	str	r0, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    63a4:	782a      	ldrb	r2, [r5, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    63a6:	7023      	strb	r3, [r4, #0]
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    63a8:	2a00      	cmp	r2, #0
    63aa:	bf14      	ite	ne
    63ac:	20c8      	movne	r0, #200	; 0xc8
    63ae:	2088      	moveq	r0, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    63b0:	f082 0201 	eor.w	r2, r2, #1
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    63b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
	ep0_tx_data_toggle ^= 1;
    63b8:	702a      	strb	r2, [r5, #0]
}

static void endpoint0_transmit( const void *data, uint32_t len )
{
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    63ba:	f846 1037 	str.w	r1, [r6, r7, lsl #3]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    63be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63c0:	1fff941c 	.word	0x1fff941c
    63c4:	1fff8000 	.word	0x1fff8000
    63c8:	1fff94b7 	.word	0x1fff94b7

000063cc <usb_rx>:

usb_packet_t *usb_rx( uint32_t endpoint )
{
	//print("USB RX");
	usb_packet_t *ret;
	endpoint--;
    63cc:	1e43      	subs	r3, r0, #1
	if ( endpoint >= NUM_ENDPOINTS )
    63ce:	2b07      	cmp	r3, #7
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
}

usb_packet_t *usb_rx( uint32_t endpoint )
{
    63d0:	b510      	push	{r4, lr}
	//print("USB RX");
	usb_packet_t *ret;
	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
    63d2:	d810      	bhi.n	63f6 <usb_rx+0x2a>
		return NULL;
	__disable_irq();
    63d4:	b672      	cpsid	i
	ret = rx_first[endpoint];
    63d6:	4a09      	ldr	r2, [pc, #36]	; (63fc <usb_rx+0x30>)
    63d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
	if ( ret )
    63dc:	b110      	cbz	r0, 63e4 <usb_rx+0x18>
		rx_first[ endpoint ] = ret->next;
    63de:	6841      	ldr	r1, [r0, #4]
    63e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	usb_rx_byte_count_data[ endpoint ] -= ret->len;
    63e4:	4906      	ldr	r1, [pc, #24]	; (6400 <usb_rx+0x34>)
    63e6:	8804      	ldrh	r4, [r0, #0]
    63e8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    63ec:	1b12      	subs	r2, r2, r4
    63ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	__enable_irq();
    63f2:	b662      	cpsie	i
	//serial_print("rx, epidx=");
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
    63f4:	bd10      	pop	{r4, pc}
{
	//print("USB RX");
	usb_packet_t *ret;
	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return NULL;
    63f6:	2000      	movs	r0, #0
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    63f8:	bd10      	pop	{r4, pc}
    63fa:	bf00      	nop
    63fc:	1fff93fc 	.word	0x1fff93fc
    6400:	1fffa482 	.word	0x1fffa482

00006404 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count( uint32_t endpoint )
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    6404:	3801      	subs	r0, #1
	if ( endpoint >= NUM_ENDPOINTS )
    6406:	2807      	cmp	r0, #7
    6408:	d80a      	bhi.n	6420 <usb_tx_packet_count+0x1c>
		return 0;
	__disable_irq();
    640a:	b672      	cpsid	i
	for ( p = tx_first[ endpoint ]; p; p = p->next )
    640c:	4b05      	ldr	r3, [pc, #20]	; (6424 <usb_tx_packet_count+0x20>)
    640e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
}

uint32_t usb_tx_packet_count( uint32_t endpoint )
{
	const usb_packet_t *p;
	uint32_t count=0;
    6412:	2000      	movs	r0, #0

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return 0;
	__disable_irq();
	for ( p = tx_first[ endpoint ]; p; p = p->next )
    6414:	b113      	cbz	r3, 641c <usb_tx_packet_count+0x18>
		count++;
    6416:	3001      	adds	r0, #1

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return 0;
	__disable_irq();
	for ( p = tx_first[ endpoint ]; p; p = p->next )
    6418:	685b      	ldr	r3, [r3, #4]
    641a:	e7fb      	b.n	6414 <usb_tx_packet_count+0x10>
		count++;
	__enable_irq();
    641c:	b662      	cpsie	i
	return count;
    641e:	4770      	bx	lr
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return 0;
    6420:	2000      	movs	r0, #0
	__disable_irq();
	for ( p = tx_first[ endpoint ]; p; p = p->next )
		count++;
	__enable_irq();
	return count;
}
    6422:	4770      	bx	lr
    6424:	1fff9460 	.word	0x1fff9460

00006428 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory( usb_packet_t *packet )
{
    6428:	b510      	push	{r4, lr}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    642a:	b672      	cpsid	i
	for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    642c:	2301      	movs	r3, #1
    642e:	4a17      	ldr	r2, [pc, #92]	; (648c <usb_rx_memory+0x64>)
    6430:	441a      	add	r2, r3
	{
		if ( *cfg++ & USB_ENDPT_EPRXEN )
    6432:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    6436:	0712      	lsls	r2, r2, #28
    6438:	d51c      	bpl.n	6474 <usb_rx_memory+0x4c>
		{
			if ( table[ index( i, RX, EVEN ) ].desc == 0 )
    643a:	009a      	lsls	r2, r3, #2
    643c:	4914      	ldr	r1, [pc, #80]	; (6490 <usb_rx_memory+0x68>)
    643e:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
    6442:	b92c      	cbnz	r4, 6450 <usb_rx_memory+0x28>
			{
				table[ index( i, RX, EVEN ) ].addr = packet->buf;
    6444:	eb01 1343 	add.w	r3, r1, r3, lsl #5
    6448:	3008      	adds	r0, #8
    644a:	6058      	str	r0, [r3, #4]
				table[ index( i, RX, EVEN ) ].desc = BDT_DESC( 64, 0 );
    644c:	4b11      	ldr	r3, [pc, #68]	; (6494 <usb_rx_memory+0x6c>)
    644e:	e009      	b.n	6464 <usb_rx_memory+0x3c>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if ( table[ index( i, RX, ODD ) ].desc == 0 )
    6450:	f042 0201 	orr.w	r2, r2, #1
    6454:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
    6458:	b964      	cbnz	r4, 6474 <usb_rx_memory+0x4c>
			{
				table[ index( i, RX, ODD ) ].addr = packet->buf;
    645a:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
    645e:	3008      	adds	r0, #8
    6460:	6058      	str	r0, [r3, #4]
				table[ index( i, RX, ODD ) ].desc = BDT_DESC( 64, 1 );
    6462:	4b0d      	ldr	r3, [pc, #52]	; (6498 <usb_rx_memory+0x70>)
    6464:	f841 3032 	str.w	r3, [r1, r2, lsl #3]
				usb_rx_memory_needed--;
    6468:	4a0c      	ldr	r2, [pc, #48]	; (649c <usb_rx_memory+0x74>)
    646a:	7813      	ldrb	r3, [r2, #0]
    646c:	3b01      	subs	r3, #1
    646e:	7013      	strb	r3, [r2, #0]
				__enable_irq();
    6470:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",odd\n");
				return;
    6472:	bd10      	pop	{r4, pc}
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
	for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    6474:	3301      	adds	r3, #1
    6476:	2b09      	cmp	r3, #9
    6478:	d1d9      	bne.n	642e <usb_rx_memory+0x6>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    647a:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    647c:	4b07      	ldr	r3, [pc, #28]	; (649c <usb_rx_memory+0x74>)
    647e:	2200      	movs	r2, #0
    6480:	701a      	strb	r2, [r3, #0]
	usb_free( packet );
	return;
}
    6482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free( packet );
    6486:	f000 be8b 	b.w	71a0 <usb_free>
    648a:	bf00      	nop
    648c:	0000b9a8 	.word	0x0000b9a8
    6490:	1fff8000 	.word	0x1fff8000
    6494:	00400088 	.word	0x00400088
    6498:	004000c8 	.word	0x004000c8
    649c:	1fff94ad 	.word	0x1fff94ad

000064a0 <usb_tx>:

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx( uint32_t endpoint, usb_packet_t *packet )
{
    64a0:	b570      	push	{r4, r5, r6, lr}
	// If we have been sleeping, try to wake up host
	if ( usb_dev_sleep )
    64a2:	4b27      	ldr	r3, [pc, #156]	; (6540 <usb_tx+0xa0>)
    64a4:	781b      	ldrb	r3, [r3, #0]

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx( uint32_t endpoint, usb_packet_t *packet )
{
    64a6:	4604      	mov	r4, r0
    64a8:	460d      	mov	r5, r1
	// If we have been sleeping, try to wake up host
	if ( usb_dev_sleep )
    64aa:	b15b      	cbz	r3, 64c4 <usb_tx+0x24>
	{
		// Force wake-up for 10 ms
		// According to the USB Spec a device must hold resume for at least 1 ms but no more than 15 ms
		USB0_CTL |= USB_CTL_RESUME;
    64ac:	4e25      	ldr	r6, [pc, #148]	; (6544 <usb_tx+0xa4>)
    64ae:	7833      	ldrb	r3, [r6, #0]
    64b0:	f043 0304 	orr.w	r3, r3, #4
    64b4:	7033      	strb	r3, [r6, #0]
		delay(10);
    64b6:	200a      	movs	r0, #10
    64b8:	f7fc f88e 	bl	25d8 <delay>
		USB0_CTL &= ~(USB_CTL_RESUME);
    64bc:	7833      	ldrb	r3, [r6, #0]
    64be:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    64c2:	7033      	strb	r3, [r6, #0]
	}

	// Since we are transmitting data, USB will be brought out of sleep/suspend
	// if it's in that state
	// Use the currently set descriptor value
	Output_update_usb_current( *usb_bMaxPower * 2 );
    64c4:	4b20      	ldr	r3, [pc, #128]	; (6548 <usb_tx+0xa8>)
    64c6:	681b      	ldr	r3, [r3, #0]
    64c8:	7818      	ldrb	r0, [r3, #0]
    64ca:	0040      	lsls	r0, r0, #1
    64cc:	f7ff ff2e 	bl	632c <Output_update_usb_current>

	bdt_t *b = &table[ index( endpoint, TX, EVEN ) ];
	uint8_t next;

	endpoint--;
    64d0:	1e63      	subs	r3, r4, #1
	if ( endpoint >= NUM_ENDPOINTS )
    64d2:	2b07      	cmp	r3, #7
    64d4:	d832      	bhi.n	653c <usb_tx+0x9c>
	// Since we are transmitting data, USB will be brought out of sleep/suspend
	// if it's in that state
	// Use the currently set descriptor value
	Output_update_usb_current( *usb_bMaxPower * 2 );

	bdt_t *b = &table[ index( endpoint, TX, EVEN ) ];
    64d6:	0164      	lsls	r4, r4, #5
    64d8:	481c      	ldr	r0, [pc, #112]	; (654c <usb_tx+0xac>)
    64da:	f044 0410 	orr.w	r4, r4, #16
    64de:	4420      	add	r0, r4
	uint8_t next;

	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return;
	__disable_irq();
    64e0:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[ endpoint ]);
	//serial_print("\n");
	switch ( tx_state[ endpoint ] )
    64e2:	4a1b      	ldr	r2, [pc, #108]	; (6550 <usb_tx+0xb0>)
    64e4:	5cd1      	ldrb	r1, [r2, r3]
    64e6:	2903      	cmp	r1, #3
    64e8:	d80b      	bhi.n	6502 <usb_tx+0x62>
    64ea:	e8df f001 	tbb	[pc, r1]
    64ee:	0418      	.short	0x0418
    64f0:	0702      	.short	0x0702
	case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
		next = TX_STATE_EVEN_FREE;
		break;
	case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    64f2:	2105      	movs	r1, #5
    64f4:	e014      	b.n	6520 <usb_tx+0x80>
	{
	case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    64f6:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    64f8:	2102      	movs	r1, #2
		break;
    64fa:	e011      	b.n	6520 <usb_tx+0x80>
	case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
		break;
	case TX_STATE_ODD_FREE:
		b++;
    64fc:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    64fe:	2104      	movs	r1, #4
		break;
    6500:	e00e      	b.n	6520 <usb_tx+0x80>
	default:
		if (tx_first[ endpoint ] == NULL)
    6502:	4914      	ldr	r1, [pc, #80]	; (6554 <usb_tx+0xb4>)
    6504:	4a14      	ldr	r2, [pc, #80]	; (6558 <usb_tx+0xb8>)
    6506:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
    650a:	b910      	cbnz	r0, 6512 <usb_tx+0x72>
		{
			tx_first[ endpoint ] = packet;
    650c:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
    6510:	e002      	b.n	6518 <usb_tx+0x78>
		}
		else
		{
			tx_last[ endpoint ]->next = packet;
    6512:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    6516:	604d      	str	r5, [r1, #4]
		}
		tx_last[ endpoint ] = packet;
    6518:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    651c:	e00d      	b.n	653a <usb_tx+0x9a>
	//serial_phex(tx_state[ endpoint ]);
	//serial_print("\n");
	switch ( tx_state[ endpoint ] )
	{
	case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    651e:	2103      	movs	r1, #3
		tx_last[ endpoint ] = packet;
		__enable_irq();
		return;
	}

	tx_state[ endpoint ] = next;
    6520:	54d1      	strb	r1, [r2, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC( packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    6522:	f010 0f08 	tst.w	r0, #8
		__enable_irq();
		return;
	}

	tx_state[ endpoint ] = next;
	b->addr = packet->buf;
    6526:	f105 0308 	add.w	r3, r5, #8
	b->desc = BDT_DESC( packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    652a:	882a      	ldrh	r2, [r5, #0]
		__enable_irq();
		return;
	}

	tx_state[ endpoint ] = next;
	b->addr = packet->buf;
    652c:	6043      	str	r3, [r0, #4]
	b->desc = BDT_DESC( packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    652e:	bf14      	ite	ne
    6530:	23c8      	movne	r3, #200	; 0xc8
    6532:	2388      	moveq	r3, #136	; 0x88
    6534:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    6538:	6003      	str	r3, [r0, #0]
	__enable_irq();
    653a:	b662      	cpsie	i
    653c:	bd70      	pop	{r4, r5, r6, pc}
    653e:	bf00      	nop
    6540:	1fff94ac 	.word	0x1fff94ac
    6544:	40072094 	.word	0x40072094
    6548:	1fff8ea0 	.word	0x1fff8ea0
    654c:	1fff8000 	.word	0x1fff8000
    6550:	1fff93b0 	.word	0x1fff93b0
    6554:	1fff9460 	.word	0x1fff9460
    6558:	1fff9480 	.word	0x1fff9480

0000655c <usb_device_reload>:
}


void usb_device_reload()
{
    655c:	4b07      	ldr	r3, [pc, #28]	; (657c <usb_device_reload+0x20>)
    655e:	4908      	ldr	r1, [pc, #32]	; (6580 <usb_device_reload+0x24>)
    6560:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
    6564:	f5a2 3278 	sub.w	r2, r2, #253952	; 0x3e000
// MCHCK
// Kiibohd mk20dx256vlh7
#if defined(_mk20dx128vlf5_) || defined(_mk20dx256vlh7_)
	// Copies variable into the VBAT register, must be identical to the variable in the bootloader to jump to the bootloader flash mode
	for ( int pos = 0; pos < sizeof(sys_reset_to_loader_magic); pos++ )
		(&VBAT)[ pos ] = sys_reset_to_loader_magic[ pos ];
    6568:	5c52      	ldrb	r2, [r2, r1]
    656a:	f803 2b01 	strb.w	r2, [r3], #1
{
// MCHCK
// Kiibohd mk20dx256vlh7
#if defined(_mk20dx128vlf5_) || defined(_mk20dx256vlh7_)
	// Copies variable into the VBAT register, must be identical to the variable in the bootloader to jump to the bootloader flash mode
	for ( int pos = 0; pos < sizeof(sys_reset_to_loader_magic); pos++ )
    656e:	4a05      	ldr	r2, [pc, #20]	; (6584 <usb_device_reload+0x28>)
    6570:	4293      	cmp	r3, r2
    6572:	d1f4      	bne.n	655e <usb_device_reload+0x2>
		(&VBAT)[ pos ] = sys_reset_to_loader_magic[ pos ];
	SOFTWARE_RESET();
    6574:	4b04      	ldr	r3, [pc, #16]	; (6588 <usb_device_reload+0x2c>)
    6576:	4a05      	ldr	r2, [pc, #20]	; (658c <usb_device_reload+0x30>)
    6578:	601a      	str	r2, [r3, #0]
    657a:	4770      	bx	lr
    657c:	4003e000 	.word	0x4003e000
    6580:	00007ea5 	.word	0x00007ea5
    6584:	4003e016 	.word	0x4003e016
    6588:	e000ed0c 	.word	0xe000ed0c
    658c:	05fa0004 	.word	0x05fa0004

00006590 <usb_isr>:
#endif
}


void usb_isr()
{
    6590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
restart:
	status = USB0_ISTAT;
    6594:	4dac      	ldr	r5, [pc, #688]	; (6848 <usb_isr+0x2b8>)
    6596:	782c      	ldrb	r4, [r5, #0]
    6598:	b2e4      	uxtb	r4, r4
	print("USB ISR STATUS: ");
	printHex( status );
	print( NL );
	*/

	if ( (status & USB_INTEN_SOFTOKEN /* 04 */ ) )
    659a:	f014 0f04 	tst.w	r4, #4
    659e:	462e      	mov	r6, r5
    65a0:	d01a      	beq.n	65d8 <usb_isr+0x48>
	{
		if ( usb_configuration )
    65a2:	4baa      	ldr	r3, [pc, #680]	; (684c <usb_isr+0x2bc>)
    65a4:	781b      	ldrb	r3, [r3, #0]
    65a6:	b1ab      	cbz	r3, 65d4 <usb_isr+0x44>
		{
			t = usb_reboot_timer;
    65a8:	4aa9      	ldr	r2, [pc, #676]	; (6850 <usb_isr+0x2c0>)
    65aa:	7811      	ldrb	r1, [r2, #0]
			if ( t )
    65ac:	f001 03ff 	and.w	r3, r1, #255	; 0xff
    65b0:	b129      	cbz	r1, 65be <usb_isr+0x2e>
			{
				usb_reboot_timer = --t;
    65b2:	3b01      	subs	r3, #1
    65b4:	b2db      	uxtb	r3, r3
    65b6:	7013      	strb	r3, [r2, #0]
				if ( !t )
    65b8:	b90b      	cbnz	r3, 65be <usb_isr+0x2e>
					usb_device_reload();
    65ba:	f7ff ffcf 	bl	655c <usb_device_reload>
			}

			// CDC Interface
			t = usb_cdc_transmit_flush_timer;
    65be:	4aa5      	ldr	r2, [pc, #660]	; (6854 <usb_isr+0x2c4>)
    65c0:	7811      	ldrb	r1, [r2, #0]
			if ( t )
    65c2:	f001 03ff 	and.w	r3, r1, #255	; 0xff
    65c6:	b129      	cbz	r1, 65d4 <usb_isr+0x44>
			{
				usb_cdc_transmit_flush_timer = --t;
    65c8:	3b01      	subs	r3, #1
    65ca:	b2db      	uxtb	r3, r3
    65cc:	7013      	strb	r3, [r2, #0]
				if ( t == 0 )
    65ce:	b90b      	cbnz	r3, 65d4 <usb_isr+0x44>
					usb_serial_flush_callback();
    65d0:	f000 fef6 	bl	73c0 <usb_serial_flush_callback>
			}

		}
		USB0_ISTAT = USB_INTEN_SOFTOKEN;
    65d4:	2304      	movs	r3, #4
    65d6:	702b      	strb	r3, [r5, #0]
	}

	if ( (status & USB_ISTAT_TOKDNE /* 08 */ ) )
    65d8:	f004 0308 	and.w	r3, r4, #8
    65dc:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    65e0:	2b00      	cmp	r3, #0
    65e2:	f000 8368 	beq.w	6cb6 <usb_isr+0x726>
	{
		uint8_t endpoint;
		stat = USB0_STAT;
    65e6:	4b9c      	ldr	r3, [pc, #624]	; (6858 <usb_isr+0x2c8>)
    65e8:	4f9c      	ldr	r7, [pc, #624]	; (685c <usb_isr+0x2cc>)
    65ea:	781b      	ldrb	r3, [r3, #0]
    65ec:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if ( endpoint == 0 )
    65ee:	0919      	lsrs	r1, r3, #4
    65f0:	ea4f 0493 	mov.w	r4, r3, lsr #2
    65f4:	f040 82e0 	bne.w	6bb8 <usb_isr+0x628>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor( stat );
    65f8:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
	pid = BDT_PID( b->desc );
	buf = b->addr;
    65fc:	6859      	ldr	r1, [r3, #4]
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor( stat );
	pid = BDT_PID( b->desc );
    65fe:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
    6602:	f3c3 0383 	ubfx	r3, r3, #2, #4
	print(", count:");
	printHex32(b->desc);
	print(" - ");
	#endif

	switch (pid)
    6606:	3b01      	subs	r3, #1
    6608:	2b0c      	cmp	r3, #12
    660a:	f200 82a3 	bhi.w	6b54 <usb_isr+0x5c4>
    660e:	e8df f013 	tbh	[pc, r3, lsl #1]
    6612:	0244      	.short	0x0244
    6614:	02a10244 	.word	0x02a10244
    6618:	02a102a1 	.word	0x02a102a1
    661c:	02a102a1 	.word	0x02a102a1
    6620:	027c02a1 	.word	0x027c02a1
    6624:	02a102a1 	.word	0x02a102a1
    6628:	000d02a1 	.word	0x000d02a1
	{
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    662c:	f8df 8240 	ldr.w	r8, [pc, #576]	; 6870 <usb_isr+0x2e0>
    6630:	680b      	ldr	r3, [r1, #0]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    6632:	4a8b      	ldr	r2, [pc, #556]	; (6860 <usb_isr+0x2d0>)
	{
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    6634:	f8c8 3000 	str.w	r3, [r8]
		setup.word2 = *(uint32_t *)(buf + 4);
    6638:	684b      	ldr	r3, [r1, #4]
    663a:	f8c8 3004 	str.w	r3, [r8, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    663e:	2101      	movs	r1, #1
    6640:	7011      	strb	r1, [r2, #0]
	const uint8_t *cfg;
	int i;

	// If another request is made, disable the power negotiation check
	// See GET_DESCRIPTOR - Configuration
	if ( power_neg_delay )
    6642:	4988      	ldr	r1, [pc, #544]	; (6864 <usb_isr+0x2d4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
    6644:	4b88      	ldr	r3, [pc, #544]	; (6868 <usb_isr+0x2d8>)
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    6646:	4e89      	ldr	r6, [pc, #548]	; (686c <usb_isr+0x2dc>)
	const uint8_t *cfg;
	int i;

	// If another request is made, disable the power negotiation check
	// See GET_DESCRIPTOR - Configuration
	if ( power_neg_delay )
    6648:	780a      	ldrb	r2, [r1, #0]
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
    664a:	f847 3034 	str.w	r3, [r7, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    664e:	2300      	movs	r3, #0
    6650:	6033      	str	r3, [r6, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    6652:	613b      	str	r3, [r7, #16]
		table[index(0, TX, ODD)].desc = 0;
    6654:	61bb      	str	r3, [r7, #24]
	const uint8_t *cfg;
	int i;

	// If another request is made, disable the power negotiation check
	// See GET_DESCRIPTOR - Configuration
	if ( power_neg_delay )
    6656:	b102      	cbz	r2, 665a <usb_isr+0xca>
	{
		power_neg_delay = 0;
    6658:	700b      	strb	r3, [r1, #0]
	}

	switch ( setup.wRequestAndType )
    665a:	f8b8 3000 	ldrh.w	r3, [r8]
    665e:	4c84      	ldr	r4, [pc, #528]	; (6870 <usb_isr+0x2e0>)
    6660:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    6664:	f000 81ea 	beq.w	6a3c <usb_isr+0x4ac>
    6668:	d83c      	bhi.n	66e4 <usb_isr+0x154>
    666a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    666e:	f000 8164 	beq.w	693a <usb_isr+0x3aa>
    6672:	d816      	bhi.n	66a2 <usb_isr+0x112>
    6674:	2b82      	cmp	r3, #130	; 0x82
    6676:	f000 814f 	beq.w	6918 <usb_isr+0x388>
    667a:	d807      	bhi.n	668c <usb_isr+0xfc>
    667c:	2b80      	cmp	r3, #128	; 0x80
    667e:	f040 81d7 	bne.w	6a30 <usb_isr+0x4a0>
		datalen = 1;
		data = reply_buffer;
		goto send;

	case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    6682:	4c7c      	ldr	r4, [pc, #496]	; (6874 <usb_isr+0x2e4>)
    6684:	2300      	movs	r3, #0
    6686:	7023      	strb	r3, [r4, #0]
		reply_buffer[1] = 0;
    6688:	7063      	strb	r3, [r4, #1]
    668a:	e1d5      	b.n	6a38 <usb_isr+0x4a8>
	if ( power_neg_delay )
	{
		power_neg_delay = 0;
	}

	switch ( setup.wRequestAndType )
    668c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    6690:	f000 8162 	beq.w	6958 <usb_isr+0x3c8>
    6694:	f240 1201 	movw	r2, #257	; 0x101
    6698:	4293      	cmp	r3, r2
    669a:	f040 81c9 	bne.w	6a30 <usb_isr+0x4a0>
		endpoint0_stall();
		return;

	case 0x0101: // CLEAR_FEATURE (interface)
		// TODO: Currently ignoring, perhaps useful? -HaaTa
		warn_msg("CLEAR_FEATURE - Interface wValue(");
    669e:	4876      	ldr	r0, [pc, #472]	; (6878 <usb_isr+0x2e8>)
    66a0:	e167      	b.n	6972 <usb_isr+0x3e2>
	if ( power_neg_delay )
	{
		power_neg_delay = 0;
	}

	switch ( setup.wRequestAndType )
    66a2:	f240 3201 	movw	r2, #769	; 0x301
    66a6:	4293      	cmp	r3, r2
    66a8:	f000 8162 	beq.w	6970 <usb_isr+0x3e0>
    66ac:	d809      	bhi.n	66c2 <usb_isr+0x132>
    66ae:	f240 12a1 	movw	r2, #417	; 0x1a1
    66b2:	4293      	cmp	r3, r2
    66b4:	f000 81a3 	beq.w	69fe <usb_isr+0x46e>
    66b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    66bc:	f000 814c 	beq.w	6958 <usb_isr+0x3c8>
    66c0:	e1b6      	b.n	6a30 <usb_isr+0x4a0>
    66c2:	f240 3202 	movw	r2, #770	; 0x302
    66c6:	4293      	cmp	r3, r2
    66c8:	f000 815e 	beq.w	6988 <usb_isr+0x3f8>
    66cc:	f240 32a1 	movw	r2, #929	; 0x3a1
    66d0:	4293      	cmp	r3, r2
    66d2:	f040 81ad 	bne.w	6a30 <usb_isr+0x4a0>
		printHex( setup.wValue );
		print(" - ");
		printHex( USBKeys_Protocol );
		print(NL);
		#endif
		reply_buffer[0] = USBKeys_Protocol;
    66d6:	4b69      	ldr	r3, [pc, #420]	; (687c <usb_isr+0x2ec>)
    66d8:	781a      	ldrb	r2, [r3, #0]
    66da:	4b66      	ldr	r3, [pc, #408]	; (6874 <usb_isr+0x2e4>)
	}
}

static void usb_setup()
{
	const uint8_t *data = NULL;
    66dc:	2400      	movs	r4, #0
		printHex( setup.wValue );
		print(" - ");
		printHex( USBKeys_Protocol );
		print(NL);
		#endif
		reply_buffer[0] = USBKeys_Protocol;
    66de:	701a      	strb	r2, [r3, #0]
		datalen = 1;
    66e0:	2301      	movs	r3, #1
    66e2:	e1ad      	b.n	6a40 <usb_isr+0x4b0>
	if ( power_neg_delay )
	{
		power_neg_delay = 0;
	}

	switch ( setup.wRequestAndType )
    66e4:	f640 1221 	movw	r2, #2337	; 0x921
    66e8:	4293      	cmp	r3, r2
    66ea:	f000 817a 	beq.w	69e2 <usb_isr+0x452>
    66ee:	d820      	bhi.n	6732 <usb_isr+0x1a2>
    66f0:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    66f4:	f000 810a 	beq.w	690c <usb_isr+0x37c>
    66f8:	d808      	bhi.n	670c <usb_isr+0x17c>
    66fa:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    66fe:	2b01      	cmp	r3, #1
    6700:	f200 8196 	bhi.w	6a30 <usb_isr+0x4a0>
		#endif
		for ( list = usb_descriptor_list; 1; list++ )
		{
			if ( list->addr == NULL )
				break;
			if ( setup.wValue == list->wValue && setup.wIndex == list->wIndex )
    6704:	8862      	ldrh	r2, [r4, #2]
    6706:	88a0      	ldrh	r0, [r4, #4]
    6708:	4b5d      	ldr	r3, [pc, #372]	; (6880 <usb_isr+0x2f0>)
    670a:	e151      	b.n	69b0 <usb_isr+0x420>
	if ( power_neg_delay )
	{
		power_neg_delay = 0;
	}

	switch ( setup.wRequestAndType )
    670c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    6710:	f040 818e 	bne.w	6a30 <usb_isr+0x4a0>

	case 0x0900: // SET_CONFIGURATION
		#ifdef UART_DEBUG
		print("CONFIGURE - ");
		#endif
		usb_configuration = setup.wValue;
    6714:	4b4d      	ldr	r3, [pc, #308]	; (684c <usb_isr+0x2bc>)
    6716:	78a2      	ldrb	r2, [r4, #2]
    6718:	701a      	strb	r2, [r3, #0]
		Output_Available = usb_configuration;
    671a:	781b      	ldrb	r3, [r3, #0]
    671c:	4a59      	ldr	r2, [pc, #356]	; (6884 <usb_isr+0x2f4>)
    671e:	b2db      	uxtb	r3, r3
    6720:	7013      	strb	r3, [r2, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;

		// Now configured so we can utilize bMaxPower now
		Output_update_usb_current( *usb_bMaxPower * 2 );
    6722:	4b59      	ldr	r3, [pc, #356]	; (6888 <usb_isr+0x2f8>)
    6724:	681b      	ldr	r3, [r3, #0]
    6726:	7818      	ldrb	r0, [r3, #0]
    6728:	0040      	lsls	r0, r0, #1
    672a:	f7ff fdff 	bl	632c <Output_update_usb_current>
    672e:	2400      	movs	r4, #0
    6730:	e021      	b.n	6776 <usb_isr+0x1e6>
	if ( power_neg_delay )
	{
		power_neg_delay = 0;
	}

	switch ( setup.wRequestAndType )
    6732:	f242 0221 	movw	r2, #8225	; 0x2021
    6736:	4293      	cmp	r3, r2
    6738:	f000 81ac 	beq.w	6a94 <usb_isr+0x504>
    673c:	d80c      	bhi.n	6758 <usb_isr+0x1c8>
    673e:	f640 2221 	movw	r2, #2593	; 0xa21
    6742:	4293      	cmp	r3, r2
    6744:	f000 816a 	beq.w	6a1c <usb_isr+0x48c>
    6748:	f640 3221 	movw	r2, #2849	; 0xb21
    674c:	4293      	cmp	r3, r2
    674e:	f040 816f 	bne.w	6a30 <usb_isr+0x4a0>
		printHex( setup.wValue );
		print(" - ");
		printHex( setup.wValue & 0xFF );
		print(NL);
		#endif
		USBKeys_Protocol = setup.wValue & 0xFF; // 0 - Boot Mode, 1 - NKRO Mode
    6752:	78a2      	ldrb	r2, [r4, #2]
    6754:	4b49      	ldr	r3, [pc, #292]	; (687c <usb_isr+0x2ec>)
    6756:	e169      	b.n	6a2c <usb_isr+0x49c>
	if ( power_neg_delay )
	{
		power_neg_delay = 0;
	}

	switch ( setup.wRequestAndType )
    6758:	f242 12a1 	movw	r2, #8609	; 0x21a1
    675c:	4293      	cmp	r3, r2
    675e:	d007      	beq.n	6770 <usb_isr+0x1e0>
    6760:	f242 2221 	movw	r2, #8737	; 0x2221
    6764:	4293      	cmp	r3, r2
    6766:	f040 8163 	bne.w	6a30 <usb_isr+0x4a0>
		#endif
		endpoint0_stall();
		return;

	case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr = setup.wValue;
    676a:	78a2      	ldrb	r2, [r4, #2]
    676c:	4b47      	ldr	r3, [pc, #284]	; (688c <usb_isr+0x2fc>)
    676e:	e15d      	b.n	6a2c <usb_isr+0x49c>
		//serial_print("set control line state\n");
		goto send;

	case 0x21A1: // CDC_GET_LINE_CODING
		data = (uint8_t*)usb_cdc_line_coding;
		datalen = sizeof( usb_cdc_line_coding );
    6770:	2307      	movs	r3, #7
		usb_cdc_line_rtsdtr = setup.wValue;
		//serial_print("set control line state\n");
		goto send;

	case 0x21A1: // CDC_GET_LINE_CODING
		data = (uint8_t*)usb_cdc_line_coding;
    6772:	4c47      	ldr	r4, [pc, #284]	; (6890 <usb_isr+0x300>)
    6774:	e164      	b.n	6a40 <usb_isr+0x4b0>
    6776:	193b      	adds	r3, r7, r4
		Output_update_usb_current( *usb_bMaxPower * 2 );

		// clear all BDT entries, free any allocated memory...
		for ( i = 4; i < ( NUM_ENDPOINTS + 1) * 4; i++ )
		{
			if ( table[i].desc & BDT_OWN )
    6778:	6a1a      	ldr	r2, [r3, #32]
    677a:	0611      	lsls	r1, r2, #24
    677c:	d503      	bpl.n	6786 <usb_isr+0x1f6>
			{
				usb_free( (usb_packet_t *)((uint8_t *)(table[ i ].addr) - 8) );
    677e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    6780:	3808      	subs	r0, #8
    6782:	f000 fd0d 	bl	71a0 <usb_free>
    6786:	3408      	adds	r4, #8

		// Now configured so we can utilize bMaxPower now
		Output_update_usb_current( *usb_bMaxPower * 2 );

		// clear all BDT entries, free any allocated memory...
		for ( i = 4; i < ( NUM_ENDPOINTS + 1) * 4; i++ )
    6788:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    678c:	d1f3      	bne.n	6776 <usb_isr+0x1e6>
    678e:	f8df a120 	ldr.w	sl, [pc, #288]	; 68b0 <usb_isr+0x320>
    6792:	f04f 0900 	mov.w	r9, #0
		}
		// free all queued packets
		for ( i = 0; i < NUM_ENDPOINTS; i++ )
		{
			usb_packet_t *p, *n;
			p = rx_first[i];
    6796:	f8df b11c 	ldr.w	fp, [pc, #284]	; 68b4 <usb_isr+0x324>
    679a:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
    679e:	ea4f 0489 	mov.w	r4, r9, lsl #2
			while ( p )
    67a2:	b130      	cbz	r0, 67b2 <usb_isr+0x222>
			{
				n = p->next;
    67a4:	6843      	ldr	r3, [r0, #4]
    67a6:	9301      	str	r3, [sp, #4]
				usb_free(p);
    67a8:	f000 fcfa 	bl	71a0 <usb_free>
				p = n;
    67ac:	9b01      	ldr	r3, [sp, #4]
    67ae:	4618      	mov	r0, r3
    67b0:	e7f7      	b.n	67a2 <usb_isr+0x212>
			}
			rx_first[ i ] = NULL;
    67b2:	f84b 0004 	str.w	r0, [fp, r4]
			rx_last[ i ] = NULL;
    67b6:	4b37      	ldr	r3, [pc, #220]	; (6894 <usb_isr+0x304>)
			p = tx_first[i];
    67b8:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 68b8 <usb_isr+0x328>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[ i ] = NULL;
			rx_last[ i ] = NULL;
    67bc:	50e0      	str	r0, [r4, r3]
			p = tx_first[i];
    67be:	f854 000b 	ldr.w	r0, [r4, fp]
			while (p)
    67c2:	b130      	cbz	r0, 67d2 <usb_isr+0x242>
			{
				n = p->next;
    67c4:	6843      	ldr	r3, [r0, #4]
    67c6:	9301      	str	r3, [sp, #4]
				usb_free(p);
    67c8:	f000 fcea 	bl	71a0 <usb_free>
				p = n;
    67cc:	9b01      	ldr	r3, [sp, #4]
    67ce:	4618      	mov	r0, r3
    67d0:	e7f7      	b.n	67c2 <usb_isr+0x232>
			}
			tx_first[ i ] = NULL;
			tx_last[ i ] = NULL;
    67d2:	4b31      	ldr	r3, [pc, #196]	; (6898 <usb_isr+0x308>)
			{
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[ i ] = NULL;
    67d4:	f84b 0004 	str.w	r0, [fp, r4]
			tx_last[ i ] = NULL;
    67d8:	50e0      	str	r0, [r4, r3]
			usb_rx_byte_count_data[i] = 0;
    67da:	4b30      	ldr	r3, [pc, #192]	; (689c <usb_isr+0x30c>)
    67dc:	f823 0019 	strh.w	r0, [r3, r9, lsl #1]

			switch ( tx_state[ i ] )
    67e0:	f89a 3000 	ldrb.w	r3, [sl]
    67e4:	3b02      	subs	r3, #2
    67e6:	2b03      	cmp	r3, #3
    67e8:	d808      	bhi.n	67fc <usb_isr+0x26c>
    67ea:	e8df f003 	tbb	[pc, r3]
    67ee:	0402      	.short	0x0402
    67f0:	0402      	.short	0x0402
			{
			case TX_STATE_EVEN_FREE:
			case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[ i ] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    67f2:	2300      	movs	r3, #0
    67f4:	e000      	b.n	67f8 <usb_isr+0x268>
				break;
			case TX_STATE_ODD_FREE:
			case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[ i ] = TX_STATE_BOTH_FREE_ODD_FIRST;
    67f6:	2301      	movs	r3, #1
    67f8:	f88a 3000 	strb.w	r3, [sl]
			{
				usb_free( (usb_packet_t *)((uint8_t *)(table[ i ].addr) - 8) );
			}
		}
		// free all queued packets
		for ( i = 0; i < NUM_ENDPOINTS; i++ )
    67fc:	f109 0901 	add.w	r9, r9, #1
    6800:	f1b9 0f08 	cmp.w	r9, #8
    6804:	f10a 0a01 	add.w	sl, sl, #1
    6808:	d1c5      	bne.n	6796 <usb_isr+0x206>
				break;
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    680a:	4b25      	ldr	r3, [pc, #148]	; (68a0 <usb_isr+0x310>)
    680c:	2200      	movs	r2, #0
    680e:	701a      	strb	r2, [r3, #0]
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    6810:	2401      	movs	r4, #1
    6812:	4699      	mov	r9, r3
    6814:	4a23      	ldr	r2, [pc, #140]	; (68a4 <usb_isr+0x314>)
    6816:	4b24      	ldr	r3, [pc, #144]	; (68a8 <usb_isr+0x318>)
    6818:	4422      	add	r2, r4
    681a:	4423      	add	r3, r4
		{
			epconf = *cfg++;
    681c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    6820:	009b      	lsls	r3, r3, #2
			*reg = epconf;
			reg += 4;
			if ( epconf & USB_ENDPT_EPRXEN )
    6822:	f012 0f08 	tst.w	r2, #8
		}
		usb_rx_memory_needed = 0;
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
		{
			epconf = *cfg++;
			*reg = epconf;
    6826:	701a      	strb	r2, [r3, #0]
    6828:	ea4f 0a84 	mov.w	sl, r4, lsl #2
			reg += 4;
			if ( epconf & USB_ENDPT_EPRXEN )
    682c:	d061      	beq.n	68f2 <usb_isr+0x362>
			{
				usb_packet_t *p;
				p = usb_malloc();
    682e:	f000 fc99 	bl	7164 <usb_malloc>
				if ( p )
    6832:	2800      	cmp	r0, #0
    6834:	d042      	beq.n	68bc <usb_isr+0x32c>
				{
					table[ index( i, RX, EVEN ) ].addr = p->buf;
    6836:	eb07 1344 	add.w	r3, r7, r4, lsl #5
    683a:	3008      	adds	r0, #8
    683c:	6058      	str	r0, [r3, #4]
					table[ index( i, RX, EVEN ) ].desc = BDT_DESC( 64, 0 );
    683e:	4b1b      	ldr	r3, [pc, #108]	; (68ac <usb_isr+0x31c>)
    6840:	f847 303a 	str.w	r3, [r7, sl, lsl #3]
    6844:	e041      	b.n	68ca <usb_isr+0x33a>
    6846:	bf00      	nop
    6848:	40072080 	.word	0x40072080
    684c:	1fff94b6 	.word	0x1fff94b6
    6850:	1fff941d 	.word	0x1fff941d
    6854:	1fff94ba 	.word	0x1fff94ba
    6858:	40072090 	.word	0x40072090
    685c:	1fff8000 	.word	0x1fff8000
    6860:	1fff94b7 	.word	0x1fff94b7
    6864:	1fff93b8 	.word	0x1fff93b8
    6868:	004000c8 	.word	0x004000c8
    686c:	1fff938c 	.word	0x1fff938c
    6870:	1fff94a0 	.word	0x1fff94a0
    6874:	1fff94ae 	.word	0x1fff94ae
    6878:	0000bb1a 	.word	0x0000bb1a
    687c:	1fff8d58 	.word	0x1fff8d58
    6880:	0000b9b0 	.word	0x0000b9b0
    6884:	1fff9386 	.word	0x1fff9386
    6888:	1fff8ea0 	.word	0x1fff8ea0
    688c:	1fff94c8 	.word	0x1fff94c8
    6890:	1fff917c 	.word	0x1fff917c
    6894:	1fff9390 	.word	0x1fff9390
    6898:	1fff9480 	.word	0x1fff9480
    689c:	1fffa482 	.word	0x1fffa482
    68a0:	1fff94ad 	.word	0x1fff94ad
    68a4:	0000b9a8 	.word	0x0000b9a8
    68a8:	1001c830 	.word	0x1001c830
    68ac:	00400088 	.word	0x00400088
    68b0:	1fff93b0 	.word	0x1fff93b0
    68b4:	1fff93fc 	.word	0x1fff93fc
    68b8:	1fff9460 	.word	0x1fff9460
				}
				else
				{
					table[ index( i, RX, EVEN ) ].desc = 0;
					usb_rx_memory_needed++;
    68bc:	f899 3000 	ldrb.w	r3, [r9]
					table[ index( i, RX, EVEN ) ].addr = p->buf;
					table[ index( i, RX, EVEN ) ].desc = BDT_DESC( 64, 0 );
				}
				else
				{
					table[ index( i, RX, EVEN ) ].desc = 0;
    68c0:	f847 003a 	str.w	r0, [r7, sl, lsl #3]
					usb_rx_memory_needed++;
    68c4:	3301      	adds	r3, #1
    68c6:	f889 3000 	strb.w	r3, [r9]
				}
				p = usb_malloc();
    68ca:	f000 fc4b 	bl	7164 <usb_malloc>
				if ( p )
				{
					table[ index( i, RX, ODD ) ].addr = p->buf;
    68ce:	f04a 0301 	orr.w	r3, sl, #1
				{
					table[ index( i, RX, EVEN ) ].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if ( p )
    68d2:	b138      	cbz	r0, 68e4 <usb_isr+0x354>
				{
					table[ index( i, RX, ODD ) ].addr = p->buf;
    68d4:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    68d8:	3008      	adds	r0, #8
    68da:	6050      	str	r0, [r2, #4]
					table[ index( i, RX, ODD ) ].desc = BDT_DESC( 64, 1 );
    68dc:	4a9f      	ldr	r2, [pc, #636]	; (6b5c <usb_isr+0x5cc>)
    68de:	f847 2033 	str.w	r2, [r7, r3, lsl #3]
    68e2:	e006      	b.n	68f2 <usb_isr+0x362>
				}
				else
				{
					table[ index( i, RX, ODD ) ].desc = 0;
    68e4:	f847 0033 	str.w	r0, [r7, r3, lsl #3]
					usb_rx_memory_needed++;
    68e8:	f899 3000 	ldrb.w	r3, [r9]
    68ec:	3301      	adds	r3, #1
    68ee:	f889 3000 	strb.w	r3, [r9]
				}
			}
			table[ index( i, TX, EVEN ) ].desc = 0;
    68f2:	f04a 0202 	orr.w	r2, sl, #2
    68f6:	2300      	movs	r3, #0
    68f8:	f847 3032 	str.w	r3, [r7, r2, lsl #3]
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    68fc:	3401      	adds	r4, #1
					table[ index( i, RX, ODD ) ].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[ index( i, TX, EVEN ) ].desc = 0;
			table[ index( i, TX, ODD ) ].desc = 0;
    68fe:	f04a 0203 	orr.w	r2, sl, #3
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    6902:	2c09      	cmp	r4, #9
					table[ index( i, RX, ODD ) ].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[ index( i, TX, EVEN ) ].desc = 0;
			table[ index( i, TX, ODD ) ].desc = 0;
    6904:	f847 3032 	str.w	r3, [r7, r2, lsl #3]
			default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for ( i = 1; i <= NUM_ENDPOINTS; i++ )
    6908:	d184      	bne.n	6814 <usb_isr+0x284>
    690a:	e098      	b.n	6a3e <usb_isr+0x4ae>
			table[ index( i, TX, ODD ) ].desc = 0;
		}
		goto send;

	case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    690c:	4b94      	ldr	r3, [pc, #592]	; (6b60 <usb_isr+0x5d0>)
    690e:	4c95      	ldr	r4, [pc, #596]	; (6b64 <usb_isr+0x5d4>)
    6910:	781b      	ldrb	r3, [r3, #0]
    6912:	7023      	strb	r3, [r4, #0]
		datalen = 1;
    6914:	2301      	movs	r3, #1
    6916:	e093      	b.n	6a40 <usb_isr+0x4b0>
		datalen = 2;
		data = reply_buffer;
		goto send;

	case 0x0082: // GET_STATUS (endpoint)
		if ( setup.wIndex > NUM_ENDPOINTS )
    6918:	88a3      	ldrh	r3, [r4, #4]
    691a:	2b08      	cmp	r3, #8
    691c:	f200 8088 	bhi.w	6a30 <usb_isr+0x4a0>
		{
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    6920:	4c90      	ldr	r4, [pc, #576]	; (6b64 <usb_isr+0x5d4>)
    6922:	2200      	movs	r2, #0
    6924:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    6926:	7062      	strb	r2, [r4, #1]
		if ( *(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02 )
    6928:	009b      	lsls	r3, r3, #2
    692a:	4a8f      	ldr	r2, [pc, #572]	; (6b68 <usb_isr+0x5d8>)
    692c:	5cd3      	ldrb	r3, [r2, r3]
    692e:	079a      	lsls	r2, r3, #30
    6930:	f140 8082 	bpl.w	6a38 <usb_isr+0x4a8>
			reply_buffer[0] = 1;
    6934:	2301      	movs	r3, #1
    6936:	7023      	strb	r3, [r4, #0]
    6938:	e07e      	b.n	6a38 <usb_isr+0x4a8>
		print( ")" NL );
		endpoint0_stall();
		return;

	case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
    693a:	88a2      	ldrh	r2, [r4, #4]
		if ( i > NUM_ENDPOINTS || setup.wValue != 0 )
    693c:	f002 037f 	and.w	r3, r2, #127	; 0x7f
    6940:	2b08      	cmp	r3, #8
    6942:	d875      	bhi.n	6a30 <usb_isr+0x4a0>
    6944:	8863      	ldrh	r3, [r4, #2]
    6946:	2b00      	cmp	r3, #0
    6948:	d172      	bne.n	6a30 <usb_isr+0x4a0>
		{
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4)) &= ~0x02;
    694a:	0091      	lsls	r1, r2, #2
    694c:	4a86      	ldr	r2, [pc, #536]	; (6b68 <usb_isr+0x5d8>)
    694e:	440a      	add	r2, r1
    6950:	7811      	ldrb	r1, [r2, #0]
    6952:	f021 0102 	bic.w	r1, r1, #2
    6956:	e025      	b.n	69a4 <usb_isr+0x414>
		// TODO: do we need to clear the data toggle here?
		goto send;

	case 0x0300: // SET_FEATURE (device)
		switch ( setup.wValue )
    6958:	8863      	ldrh	r3, [r4, #2]
    695a:	2b01      	cmp	r3, #1
    695c:	d06e      	beq.n	6a3c <usb_isr+0x4ac>
		// http://community.silabs.com/t5/8-bit-MCU/Remote-wakeup-HID/m-p/74957#M30802
		case 0x1:
			goto send;
		}

		warn_msg("SET_FEATURE - Device wValue(");
    695e:	4883      	ldr	r0, [pc, #524]	; (6b6c <usb_isr+0x5dc>)
    6960:	f001 f922 	bl	7ba8 <_print>
		printHex( setup.wValue );
    6964:	8860      	ldrh	r0, [r4, #2]
    6966:	2101      	movs	r1, #1
    6968:	f001 f9c0 	bl	7cec <printHex_op>
		print( ")" NL );
    696c:	4880      	ldr	r0, [pc, #512]	; (6b70 <usb_isr+0x5e0>)
    696e:	e043      	b.n	69f8 <usb_isr+0x468>
		endpoint0_stall();
		return;

	case 0x0301: // SET_FEATURE (interface)
		// TODO: Currently ignoring, perhaps useful? -HaaTa
		warn_msg("SET_FEATURE - Interface wValue(");
    6970:	4880      	ldr	r0, [pc, #512]	; (6b74 <usb_isr+0x5e4>)
    6972:	f001 f919 	bl	7ba8 <_print>
		printHex( setup.wValue );
    6976:	8860      	ldrh	r0, [r4, #2]
    6978:	2101      	movs	r1, #1
    697a:	f001 f9b7 	bl	7cec <printHex_op>
		print(") wIndex(");
    697e:	487e      	ldr	r0, [pc, #504]	; (6b78 <usb_isr+0x5e8>)
    6980:	f001 f912 	bl	7ba8 <_print>
		printHex( setup.wIndex );
    6984:	88a0      	ldrh	r0, [r4, #4]
    6986:	e7ee      	b.n	6966 <usb_isr+0x3d6>
		print( ")" NL );
		endpoint0_stall();
		return;

	case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
    6988:	88a2      	ldrh	r2, [r4, #4]
		if ( i > NUM_ENDPOINTS || setup.wValue != 0 )
    698a:	f002 037f 	and.w	r3, r2, #127	; 0x7f
    698e:	2b08      	cmp	r3, #8
    6990:	d84e      	bhi.n	6a30 <usb_isr+0x4a0>
    6992:	8863      	ldrh	r3, [r4, #2]
    6994:	2b00      	cmp	r3, #0
    6996:	d14b      	bne.n	6a30 <usb_isr+0x4a0>
		{
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4)) |= 0x02;
    6998:	0091      	lsls	r1, r2, #2
    699a:	4a73      	ldr	r2, [pc, #460]	; (6b68 <usb_isr+0x5d8>)
    699c:	440a      	add	r2, r1
    699e:	7811      	ldrb	r1, [r2, #0]
    69a0:	f041 0102 	orr.w	r1, r1, #2
    69a4:	7011      	strb	r1, [r2, #0]
    69a6:	e04a      	b.n	6a3e <usb_isr+0x4ae>
		#endif
		for ( list = usb_descriptor_list; 1; list++ )
		{
			if ( list->addr == NULL )
				break;
			if ( setup.wValue == list->wValue && setup.wIndex == list->wIndex )
    69a8:	881f      	ldrh	r7, [r3, #0]
    69aa:	4297      	cmp	r7, r2
    69ac:	d004      	beq.n	69b8 <usb_isr+0x428>
		#ifdef UART_DEBUG
		print("desc:");
		printHex( setup.wValue );
		print( NL );
		#endif
		for ( list = usb_descriptor_list; 1; list++ )
    69ae:	330c      	adds	r3, #12
		{
			if ( list->addr == NULL )
    69b0:	685c      	ldr	r4, [r3, #4]
    69b2:	2c00      	cmp	r4, #0
    69b4:	d1f8      	bne.n	69a8 <usb_isr+0x418>
    69b6:	e03b      	b.n	6a30 <usb_isr+0x4a0>
				break;
			if ( setup.wValue == list->wValue && setup.wIndex == list->wIndex )
    69b8:	885f      	ldrh	r7, [r3, #2]
    69ba:	42b8      	cmp	r0, r7
    69bc:	d1f7      	bne.n	69ae <usb_isr+0x41e>
			{
				data = list->addr;
				if ( (setup.wValue >> 8) == 3 )
    69be:	0a17      	lsrs	r7, r2, #8
    69c0:	2f03      	cmp	r7, #3
    69c2:	d101      	bne.n	69c8 <usb_isr+0x438>
				{
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    69c4:	7823      	ldrb	r3, [r4, #0]
    69c6:	e03b      	b.n	6a40 <usb_isr+0x4b0>
				// According to notes online, it says that some Apple devices can only do 20 mA
				// However, in my testing this hasn't been the case
				// (you can also draw as much current as you want if you just lie in the descriptor :P)
				// If this becomes an issue we can use this hack a second time to negotiate down to 20 mA
				// (which should be fine for just the mcu)
				if ( setup.wValue == 0x0200 && setup.wIndex == 0x0 )
    69c8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
					// length.
					datalen = *(list->addr);
				}
				else
				{
					datalen = list->length;
    69cc:	891b      	ldrh	r3, [r3, #8]
				// According to notes online, it says that some Apple devices can only do 20 mA
				// However, in my testing this hasn't been the case
				// (you can also draw as much current as you want if you just lie in the descriptor :P)
				// If this becomes an issue we can use this hack a second time to negotiate down to 20 mA
				// (which should be fine for just the mcu)
				if ( setup.wValue == 0x0200 && setup.wIndex == 0x0 )
    69ce:	d137      	bne.n	6a40 <usb_isr+0x4b0>
    69d0:	2800      	cmp	r0, #0
    69d2:	d135      	bne.n	6a40 <usb_isr+0x4b0>
				{
					power_neg_delay = 1;
    69d4:	2201      	movs	r2, #1
    69d6:	700a      	strb	r2, [r1, #0]
					power_neg_time = systick_millis_count;
    69d8:	4a68      	ldr	r2, [pc, #416]	; (6b7c <usb_isr+0x5ec>)
    69da:	6811      	ldr	r1, [r2, #0]
    69dc:	4a68      	ldr	r2, [pc, #416]	; (6b80 <usb_isr+0x5f0>)
    69de:	6011      	str	r1, [r2, #0]
    69e0:	e02e      	b.n	6a40 <usb_isr+0x4b0>
		//serial_print("set coding, waiting...\n");
		return;

	case 0x0921: // HID SET_REPORT
		// Interface
		switch ( setup.wIndex & 0xFF )
    69e2:	7923      	ldrb	r3, [r4, #4]
    69e4:	2b01      	cmp	r3, #1
    69e6:	d955      	bls.n	6a94 <usb_isr+0x504>
			break;
		// NKRO Keyboard Interface
		case NKRO_KEYBOARD_INTERFACE:
			break;
		default:
			warn_msg("Unknown interface - ");
    69e8:	4866      	ldr	r0, [pc, #408]	; (6b84 <usb_isr+0x5f4>)
    69ea:	f001 f8dd 	bl	7ba8 <_print>
			printHex( setup.wIndex );
    69ee:	88a0      	ldrh	r0, [r4, #4]
    69f0:	2101      	movs	r1, #1
    69f2:	f001 f97b 	bl	7cec <printHex_op>
			print( NL );
    69f6:	4864      	ldr	r0, [pc, #400]	; (6b88 <usb_isr+0x5f8>)
    69f8:	f001 f8d6 	bl	7ba8 <_print>
    69fc:	e018      	b.n	6a30 <usb_isr+0x4a0>
		{
			if ( list->addr == NULL )
				break;
			if ( list->wValue != 0x2200 )
				continue;
			if ( setup.wIndex == list->wIndex )
    69fe:	88a2      	ldrh	r2, [r4, #4]
    6a00:	4b62      	ldr	r3, [pc, #392]	; (6b8c <usb_isr+0x5fc>)
		print(NL);
		#endif
		// Search through descriptors returning necessary info
		for ( list = usb_descriptor_list; 1; list++ )
		{
			if ( list->addr == NULL )
    6a02:	685c      	ldr	r4, [r3, #4]
    6a04:	b1a4      	cbz	r4, 6a30 <usb_isr+0x4a0>
				break;
			if ( list->wValue != 0x2200 )
    6a06:	8819      	ldrh	r1, [r3, #0]
    6a08:	f5b1 5f08 	cmp.w	r1, #8704	; 0x2200
    6a0c:	d104      	bne.n	6a18 <usb_isr+0x488>
				continue;
			if ( setup.wIndex == list->wIndex )
    6a0e:	8859      	ldrh	r1, [r3, #2]
    6a10:	4291      	cmp	r1, r2
    6a12:	d101      	bne.n	6a18 <usb_isr+0x488>
			{
				data = list->addr;
				datalen = list->length;
    6a14:	891b      	ldrh	r3, [r3, #8]
    6a16:	e013      	b.n	6a40 <usb_isr+0x4b0>
		print("GET_REPORT - ");
		printHex( setup.wIndex );
		print(NL);
		#endif
		// Search through descriptors returning necessary info
		for ( list = usb_descriptor_list; 1; list++ )
    6a18:	330c      	adds	r3, #12
    6a1a:	e7f2      	b.n	6a02 <usb_isr+0x472>
		#ifdef UART_DEBUG
		print("SET_IDLE - ");
		printHex( setup.wValue );
		print(NL);
		#endif
		USBKeys_Idle_Config = (setup.wValue >> 8);
    6a1c:	8863      	ldrh	r3, [r4, #2]
    6a1e:	4a5c      	ldr	r2, [pc, #368]	; (6b90 <usb_isr+0x600>)
    6a20:	0a1b      	lsrs	r3, r3, #8
    6a22:	7013      	strb	r3, [r2, #0]
		USBKeys_Idle_Count = 0;
    6a24:	4a5b      	ldr	r2, [pc, #364]	; (6b94 <usb_isr+0x604>)
    6a26:	2300      	movs	r3, #0
    6a28:	7013      	strb	r3, [r2, #0]
    6a2a:	e008      	b.n	6a3e <usb_isr+0x4ae>
		printHex( setup.wValue );
		print(" - ");
		printHex( setup.wValue & 0xFF );
		print(NL);
		#endif
		USBKeys_Protocol = setup.wValue & 0xFF; // 0 - Boot Mode, 1 - NKRO Mode
    6a2c:	701a      	strb	r2, [r3, #0]
    6a2e:	e005      	b.n	6a3c <usb_isr+0x4ac>
static void endpoint0_stall()
{
	#ifdef UART_DEBUG_UNKNOWN
	print("STALL" NL );
	#endif
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    6a30:	4b4d      	ldr	r3, [pc, #308]	; (6b68 <usb_isr+0x5d8>)
    6a32:	220f      	movs	r2, #15
    6a34:	701a      	strb	r2, [r3, #0]
    6a36:	e02d      	b.n	6a94 <usb_isr+0x504>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ( *(uint8_t *)(&USB0_ENDPT0 + setup.wIndex * 4) & 0x02 )
			reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    6a38:	2302      	movs	r3, #2
    6a3a:	e001      	b.n	6a40 <usb_isr+0x4b0>
}

static void usb_setup()
{
	const uint8_t *data = NULL;
	uint32_t datalen = 0;
    6a3c:	2300      	movs	r3, #0
	}
}

static void usb_setup()
{
	const uint8_t *data = NULL;
    6a3e:	461c      	mov	r4, r3
	print(",");
	printHex( datalen );
	print( NL );
	#endif

	if ( datalen > setup.wLength )
    6a40:	f8b8 7006 	ldrh.w	r7, [r8, #6]
    6a44:	429f      	cmp	r7, r3
    6a46:	bf28      	it	cs
    6a48:	461f      	movcs	r7, r3
    6a4a:	2f40      	cmp	r7, #64	; 0x40
    6a4c:	46b8      	mov	r8, r7
    6a4e:	bf28      	it	cs
    6a50:	f04f 0840 	movcs.w	r8, #64	; 0x40

	size = datalen;
	if ( size > EP0_SIZE )
		size = EP0_SIZE;

	endpoint0_transmit(data, size);
    6a54:	4620      	mov	r0, r4
    6a56:	4641      	mov	r1, r8
    6a58:	f7ff fc98 	bl	638c <endpoint0_transmit>
	data += size;
	datalen -= size;

	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
    6a5c:	ebb7 0708 	subs.w	r7, r7, r8
	size = datalen;
	if ( size > EP0_SIZE )
		size = EP0_SIZE;

	endpoint0_transmit(data, size);
	data += size;
    6a60:	4444      	add	r4, r8
	datalen -= size;

	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
    6a62:	d104      	bne.n	6a6e <usb_isr+0x4de>
    6a64:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    6a68:	d114      	bne.n	6a94 <usb_isr+0x504>
    6a6a:	46b8      	mov	r8, r7
    6a6c:	e004      	b.n	6a78 <usb_isr+0x4e8>
    6a6e:	2f40      	cmp	r7, #64	; 0x40
    6a70:	46b8      	mov	r8, r7
    6a72:	bf28      	it	cs
    6a74:	f04f 0840 	movcs.w	r8, #64	; 0x40
		return;

	size = datalen;
	if ( size > EP0_SIZE )
		size = EP0_SIZE;
	endpoint0_transmit(data, size);
    6a78:	4620      	mov	r0, r4
    6a7a:	4641      	mov	r1, r8
    6a7c:	f7ff fc86 	bl	638c <endpoint0_transmit>
	data += size;
	datalen -= size;

	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
    6a80:	ebb7 0708 	subs.w	r7, r7, r8

	size = datalen;
	if ( size > EP0_SIZE )
		size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    6a84:	4444      	add	r4, r8
	datalen -= size;

	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
    6a86:	d102      	bne.n	6a8e <usb_isr+0x4fe>
    6a88:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    6a8c:	d102      	bne.n	6a94 <usb_isr+0x504>
		return;

	// Save rest of transfer for later? XXX
	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    6a8e:	4b42      	ldr	r3, [pc, #264]	; (6b98 <usb_isr+0x608>)
	// See if transmit has finished
	if ( datalen == 0 && size < EP0_SIZE )
		return;

	// Save rest of transfer for later? XXX
	ep0_tx_ptr = data;
    6a90:	6034      	str	r4, [r6, #0]
	ep0_tx_len = datalen;
    6a92:	801f      	strh	r7, [r3, #0]
		print(NL);
		#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    6a94:	2201      	movs	r2, #1
    6a96:	4b41      	ldr	r3, [pc, #260]	; (6b9c <usb_isr+0x60c>)
    6a98:	e05b      	b.n	6b52 <usb_isr+0x5c2>
		printHex32(setup.word2);
		print(NL);
		#endif

		// CDC Interface
		if ( setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/ )
    6a9a:	4e41      	ldr	r6, [pc, #260]	; (6ba0 <usb_isr+0x610>)
    6a9c:	8833      	ldrh	r3, [r6, #0]
    6a9e:	f242 0221 	movw	r2, #8225	; 0x2021
    6aa2:	4293      	cmp	r3, r2
    6aa4:	d10e      	bne.n	6ac4 <usb_isr+0x534>
    6aa6:	2300      	movs	r3, #0
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for ( i = 0; i < 7; i++ )
			{
				//serial_phex(*buf);
				*dst++ = *buf++;
    6aa8:	4a3e      	ldr	r2, [pc, #248]	; (6ba4 <usb_isr+0x614>)
    6aaa:	5cc8      	ldrb	r0, [r1, r3]
    6aac:	5498      	strb	r0, [r3, r2]
		if ( setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/ )
		{
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for ( i = 0; i < 7; i++ )
    6aae:	3301      	adds	r3, #1
    6ab0:	2b07      	cmp	r3, #7
    6ab2:	d1f9      	bne.n	6aa8 <usb_isr+0x518>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if ( usb_cdc_line_coding[0] == 134 )
    6ab4:	7813      	ldrb	r3, [r2, #0]
    6ab6:	2b86      	cmp	r3, #134	; 0x86
    6ab8:	d102      	bne.n	6ac0 <usb_isr+0x530>
				usb_reboot_timer = 15;
    6aba:	4b3b      	ldr	r3, [pc, #236]	; (6ba8 <usb_isr+0x618>)
    6abc:	220f      	movs	r2, #15
    6abe:	701a      	strb	r2, [r3, #0]
			endpoint0_transmit( NULL, 0 );
    6ac0:	2000      	movs	r0, #0
    6ac2:	e010      	b.n	6ae6 <usb_isr+0x556>
		}

		// Keyboard SET_REPORT
		if ( setup.wRequestAndType == 0x921 && setup.wValue & 0x200 )
    6ac4:	f640 1221 	movw	r2, #2337	; 0x921
    6ac8:	4293      	cmp	r3, r2
    6aca:	d11a      	bne.n	6b02 <usb_isr+0x572>
    6acc:	8873      	ldrh	r3, [r6, #2]
    6ace:	059b      	lsls	r3, r3, #22
    6ad0:	d517      	bpl.n	6b02 <usb_isr+0x572>
		{
			// Interface
			switch ( setup.wIndex & 0xFF )
    6ad2:	7930      	ldrb	r0, [r6, #4]
    6ad4:	b120      	cbz	r0, 6ae0 <usb_isr+0x550>
    6ad6:	2801      	cmp	r0, #1
    6ad8:	d109      	bne.n	6aee <usb_isr+0x55e>
				endpoint0_transmit( NULL, 0 );
				break;
			// NKRO Keyboard Interface
			case NKRO_KEYBOARD_INTERFACE:
				// Only use 2nd byte, first byte is the report id
				USBKeys_LEDs = buf[1];
    6ada:	784a      	ldrb	r2, [r1, #1]
    6adc:	4b33      	ldr	r3, [pc, #204]	; (6bac <usb_isr+0x61c>)
    6ade:	e7ee      	b.n	6abe <usb_isr+0x52e>
			// Interface
			switch ( setup.wIndex & 0xFF )
			{
			// Keyboard Interface
			case KEYBOARD_INTERFACE:
				USBKeys_LEDs = buf[0];
    6ae0:	4b32      	ldr	r3, [pc, #200]	; (6bac <usb_isr+0x61c>)
    6ae2:	780a      	ldrb	r2, [r1, #0]
    6ae4:	701a      	strb	r2, [r3, #0]
				endpoint0_transmit( NULL, 0 );
    6ae6:	4601      	mov	r1, r0
    6ae8:	f7ff fc50 	bl	638c <endpoint0_transmit>
    6aec:	e009      	b.n	6b02 <usb_isr+0x572>
				// Only use 2nd byte, first byte is the report id
				USBKeys_LEDs = buf[1];
				endpoint0_transmit( NULL, 0 );
				break;
			default:
				warn_msg("Unknown interface - ");
    6aee:	4825      	ldr	r0, [pc, #148]	; (6b84 <usb_isr+0x5f4>)
    6af0:	f001 f85a 	bl	7ba8 <_print>
				printHex( setup.wIndex );
    6af4:	88b0      	ldrh	r0, [r6, #4]
    6af6:	2101      	movs	r1, #1
    6af8:	f001 f8f8 	bl	7cec <printHex_op>
				print( NL );
    6afc:	4822      	ldr	r0, [pc, #136]	; (6b88 <usb_isr+0x5f8>)
    6afe:	f001 f853 	bl	7ba8 <_print>
			print( NL );
			#endif
		}

		// give the buffer back
		b->desc = BDT_DESC( EP0_SIZE, DATA1 );
    6b02:	4b16      	ldr	r3, [pc, #88]	; (6b5c <usb_isr+0x5cc>)
    6b04:	f847 3034 	str.w	r3, [r7, r4, lsl #3]
    6b08:	e024      	b.n	6b54 <usb_isr+0x5c4>
		printHex(stat);
		print(NL);
		#endif

		// send remaining data, if any...
		data = ep0_tx_ptr;
    6b0a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 6bb4 <usb_isr+0x624>
    6b0e:	f8d8 7000 	ldr.w	r7, [r8]
		if ( data )
    6b12:	b1af      	cbz	r7, 6b40 <usb_isr+0x5b0>
		{
			size = ep0_tx_len;
    6b14:	f8df 9080 	ldr.w	r9, [pc, #128]	; 6b98 <usb_isr+0x608>
    6b18:	f8b9 4000 	ldrh.w	r4, [r9]
    6b1c:	2c40      	cmp	r4, #64	; 0x40
    6b1e:	4626      	mov	r6, r4
    6b20:	bf28      	it	cs
    6b22:	2640      	movcs	r6, #64	; 0x40
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
    6b24:	4638      	mov	r0, r7
    6b26:	4631      	mov	r1, r6
    6b28:	f7ff fc30 	bl	638c <endpoint0_transmit>
			data += size;
			ep0_tx_len -= size;
    6b2c:	1ba0      	subs	r0, r4, r6
    6b2e:	b280      	uxth	r0, r0
    6b30:	f8a9 0000 	strh.w	r0, [r9]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    6b34:	b908      	cbnz	r0, 6b3a <usb_isr+0x5aa>
    6b36:	2e40      	cmp	r6, #64	; 0x40
    6b38:	d100      	bne.n	6b3c <usb_isr+0x5ac>
		if ( data )
		{
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    6b3a:	19b8      	adds	r0, r7, r6
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    6b3c:	f8c8 0000 	str.w	r0, [r8]
		}

		if ( setup.bRequest == 5 && setup.bmRequestType == 0 )
    6b40:	4b17      	ldr	r3, [pc, #92]	; (6ba0 <usb_isr+0x610>)
    6b42:	881a      	ldrh	r2, [r3, #0]
    6b44:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    6b48:	d104      	bne.n	6b54 <usb_isr+0x5c4>
		{
			setup.bRequest = 0;
    6b4a:	2200      	movs	r2, #0
    6b4c:	705a      	strb	r2, [r3, #1]
			#ifdef UART_DEBUG
			print("set address: ");
			printHex(setup.wValue);
			print(NL);
			#endif
			USB0_ADDR = setup.wValue;
    6b4e:	789a      	ldrb	r2, [r3, #2]
    6b50:	4b17      	ldr	r3, [pc, #92]	; (6bb0 <usb_isr+0x620>)
    6b52:	701a      	strb	r2, [r3, #0]
		printHex(pid);
		print(NL);
		#endif
		break;
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    6b54:	4b11      	ldr	r3, [pc, #68]	; (6b9c <usb_isr+0x60c>)
    6b56:	2201      	movs	r2, #1
    6b58:	701a      	strb	r2, [r3, #0]
    6b5a:	e0a9      	b.n	6cb0 <usb_isr+0x720>
    6b5c:	004000c8 	.word	0x004000c8
    6b60:	1fff94b6 	.word	0x1fff94b6
    6b64:	1fff94ae 	.word	0x1fff94ae
    6b68:	400720c0 	.word	0x400720c0
    6b6c:	0000bae8 	.word	0x0000bae8
    6b70:	0000ea9d 	.word	0x0000ea9d
    6b74:	0000bb5b 	.word	0x0000bb5b
    6b78:	0000bb51 	.word	0x0000bb51
    6b7c:	1fff9184 	.word	0x1fff9184
    6b80:	1fff94a8 	.word	0x1fff94a8
    6b84:	0000bb90 	.word	0x0000bb90
    6b88:	0000bc21 	.word	0x0000bc21
    6b8c:	0000b9b0 	.word	0x0000b9b0
    6b90:	1fff8d59 	.word	0x1fff8d59
    6b94:	1fff9384 	.word	0x1fff9384
    6b98:	1fff93ba 	.word	0x1fff93ba
    6b9c:	40072094 	.word	0x40072094
    6ba0:	1fff94a0 	.word	0x1fff94a0
    6ba4:	1fff917c 	.word	0x1fff917c
    6ba8:	1fff941d 	.word	0x1fff941d
    6bac:	1fff9377 	.word	0x1fff9377
    6bb0:	40072098 	.word	0x40072098
    6bb4:	1fff938c 	.word	0x1fff938c
		{
			usb_control( stat );
		}
		else
		{
			bdt_t *b = stat2bufferdescriptor(stat);
    6bb8:	eb07 06c4 	add.w	r6, r7, r4, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;     // endpoint is index to zero-based arrays
    6bbc:	3901      	subs	r1, #1
			usb_control( stat );
		}
		else
		{
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    6bbe:	6872      	ldr	r2, [r6, #4]
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;     // endpoint is index to zero-based arrays

			if ( stat & 0x08 )
    6bc0:	f003 0308 	and.w	r3, r3, #8
			usb_control( stat );
		}
		else
		{
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    6bc4:	f1a2 0008 	sub.w	r0, r2, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;     // endpoint is index to zero-based arrays
    6bc8:	fa5f f881 	uxtb.w	r8, r1

			if ( stat & 0x08 )
    6bcc:	f003 0eff 	and.w	lr, r3, #255	; 0xff
    6bd0:	2b00      	cmp	r3, #0
    6bd2:	d03a      	beq.n	6c4a <usb_isr+0x6ba>
			{ // transmit
				usb_free( packet );
    6bd4:	f000 fae4 	bl	71a0 <usb_free>
				packet = tx_first[ endpoint ];
    6bd8:	4b5e      	ldr	r3, [pc, #376]	; (6d54 <usb_isr+0x7c4>)
    6bda:	4a5f      	ldr	r2, [pc, #380]	; (6d58 <usb_isr+0x7c8>)
    6bdc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
				if ( packet )
    6be0:	b1f8      	cbz	r0, 6c22 <usb_isr+0x692>
				{
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    6be2:	6841      	ldr	r1, [r0, #4]
    6be4:	f843 1028 	str.w	r1, [r3, r8, lsl #2]
					b->addr = packet->buf;
    6be8:	f100 0308 	add.w	r3, r0, #8
    6bec:	6073      	str	r3, [r6, #4]
					switch ( tx_state[ endpoint ] )
    6bee:	f812 3008 	ldrb.w	r3, [r2, r8]
    6bf2:	2b03      	cmp	r3, #3
    6bf4:	d80c      	bhi.n	6c10 <usb_isr+0x680>
    6bf6:	e8df f003 	tbb	[pc, r3]
    6bfa:	0402      	.short	0x0402
    6bfc:	0806      	.short	0x0806
					{
					case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[ endpoint ] = TX_STATE_ODD_FREE;
    6bfe:	2303      	movs	r3, #3
    6c00:	e004      	b.n	6c0c <usb_isr+0x67c>
						break;
					case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[ endpoint ] = TX_STATE_EVEN_FREE;
    6c02:	2302      	movs	r3, #2
    6c04:	e002      	b.n	6c0c <usb_isr+0x67c>
						break;
					case TX_STATE_EVEN_FREE:
						tx_state[ endpoint ] = TX_STATE_NONE_FREE_ODD_FIRST;
    6c06:	2305      	movs	r3, #5
    6c08:	e000      	b.n	6c0c <usb_isr+0x67c>
						break;
					case TX_STATE_ODD_FREE:
						tx_state[ endpoint ] = TX_STATE_NONE_FREE_EVEN_FIRST;
    6c0a:	2304      	movs	r3, #4
    6c0c:	f802 3008 	strb.w	r3, [r2, r8]
						break;
					default:
						break;
					}
					b->desc = BDT_DESC( packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    6c10:	f016 0f08 	tst.w	r6, #8
    6c14:	8802      	ldrh	r2, [r0, #0]
    6c16:	bf14      	ite	ne
    6c18:	23c8      	movne	r3, #200	; 0xc8
    6c1a:	2388      	moveq	r3, #136	; 0x88
    6c1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    6c20:	e044      	b.n	6cac <usb_isr+0x71c>
				} else {
					//serial_print("tx no packet\n");
					switch ( tx_state[ endpoint ] )
    6c22:	f812 3008 	ldrb.w	r3, [r2, r8]
    6c26:	2b03      	cmp	r3, #3
    6c28:	d807      	bhi.n	6c3a <usb_isr+0x6aa>
    6c2a:	e8df f003 	tbb	[pc, r3]
    6c2e:	4141      	.short	0x4141
    6c30:	0402      	.short	0x0402
					{
					case TX_STATE_BOTH_FREE_EVEN_FIRST:
					case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					case TX_STATE_EVEN_FREE:
						tx_state[ endpoint ] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    6c32:	2300      	movs	r3, #0
    6c34:	e006      	b.n	6c44 <usb_isr+0x6b4>
						break;
					case TX_STATE_ODD_FREE:
						tx_state[ endpoint ] = TX_STATE_BOTH_FREE_ODD_FIRST;
    6c36:	2301      	movs	r3, #1
    6c38:	e004      	b.n	6c44 <usb_isr+0x6b4>
						break;
					default:
						tx_state[ endpoint ] = ((uint32_t)b & 8)
    6c3a:	f016 0f08 	tst.w	r6, #8
    6c3e:	bf14      	ite	ne
    6c40:	2303      	movne	r3, #3
    6c42:	2302      	moveq	r3, #2
    6c44:	f802 3008 	strb.w	r3, [r2, r8]
							? TX_STATE_ODD_FREE
							: TX_STATE_EVEN_FREE;
						break;
    6c48:	e032      	b.n	6cb0 <usb_isr+0x720>
					}
				}
			}
			else
			{ // receive
				packet->len = b->desc >> 16;
    6c4a:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
    6c4e:	0c19      	lsrs	r1, r3, #16
    6c50:	f822 1c08 	strh.w	r1, [r2, #-8]
				if ( packet->len > 0 )
    6c54:	b321      	cbz	r1, 6ca0 <usb_isr+0x710>
				{
					packet->index = 0;
					packet->next = NULL;
					if ( rx_first[ endpoint ] == NULL )
    6c56:	4b41      	ldr	r3, [pc, #260]	; (6d5c <usb_isr+0x7cc>)
			else
			{ // receive
				packet->len = b->desc >> 16;
				if ( packet->len > 0 )
				{
					packet->index = 0;
    6c58:	f822 ec06 	strh.w	lr, [r2, #-6]
					packet->next = NULL;
    6c5c:	f842 ec04 	str.w	lr, [r2, #-4]
					if ( rx_first[ endpoint ] == NULL )
    6c60:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    6c64:	f8df e130 	ldr.w	lr, [pc, #304]	; 6d98 <usb_isr+0x808>
    6c68:	b912      	cbnz	r2, 6c70 <usb_isr+0x6e0>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[ endpoint ] = packet;
    6c6a:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
    6c6e:	e002      	b.n	6c76 <usb_isr+0x6e6>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[ endpoint ]->next = packet;
    6c70:	f85e 3028 	ldr.w	r3, [lr, r8, lsl #2]
    6c74:	6058      	str	r0, [r3, #4]
					}
					rx_last[ endpoint ] = packet;
					usb_rx_byte_count_data[ endpoint ] += packet->len;
    6c76:	4a3a      	ldr	r2, [pc, #232]	; (6d60 <usb_isr+0x7d0>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[ endpoint ]->next = packet;
					}
					rx_last[ endpoint ] = packet;
    6c78:	f84e 0028 	str.w	r0, [lr, r8, lsl #2]
					usb_rx_byte_count_data[ endpoint ] += packet->len;
    6c7c:	f832 3018 	ldrh.w	r3, [r2, r8, lsl #1]
    6c80:	440b      	add	r3, r1
    6c82:	f822 3018 	strh.w	r3, [r2, r8, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated packets
					// so a flood of incoming data on 1 endpoint doesn't starve
					// the others if the user isn't reading it regularly
					packet = usb_malloc();
    6c86:	f000 fa6d 	bl	7164 <usb_malloc>
					if ( packet )
    6c8a:	b110      	cbz	r0, 6c92 <usb_isr+0x702>
					{
						b->addr = packet->buf;
    6c8c:	3008      	adds	r0, #8
    6c8e:	6070      	str	r0, [r6, #4]
    6c90:	e006      	b.n	6ca0 <usb_isr+0x710>
					{
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						//serial_print(((uint32_t)b & 8) ? ",odd\n" : ",even\n");
						b->desc = 0;
						usb_rx_memory_needed++;
    6c92:	4a34      	ldr	r2, [pc, #208]	; (6d64 <usb_isr+0x7d4>)
					else
					{
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						//serial_print(((uint32_t)b & 8) ? ",odd\n" : ",even\n");
						b->desc = 0;
    6c94:	f847 0034 	str.w	r0, [r7, r4, lsl #3]
						usb_rx_memory_needed++;
    6c98:	7813      	ldrb	r3, [r2, #0]
    6c9a:	3301      	adds	r3, #1
    6c9c:	7013      	strb	r3, [r2, #0]
    6c9e:	e007      	b.n	6cb0 <usb_isr+0x720>
					}
				}
				else
				{
					b->desc = BDT_DESC( 64, ((uint32_t)b & 8) ? DATA1 : DATA0 );
    6ca0:	4a31      	ldr	r2, [pc, #196]	; (6d68 <usb_isr+0x7d8>)
    6ca2:	4b32      	ldr	r3, [pc, #200]	; (6d6c <usb_isr+0x7dc>)
    6ca4:	f016 0f08 	tst.w	r6, #8
    6ca8:	bf08      	it	eq
    6caa:	4613      	moveq	r3, r2
    6cac:	f847 3034 	str.w	r3, [r7, r4, lsl #3]




		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    6cb0:	2308      	movs	r3, #8
    6cb2:	702b      	strb	r3, [r5, #0]
		goto restart;
    6cb4:	e46e      	b.n	6594 <usb_isr+0x4>
	}


	if ( status & USB_ISTAT_USBRST /* 01 */ )
    6cb6:	07e5      	lsls	r5, r4, #31
    6cb8:	d51d      	bpl.n	6cf6 <usb_isr+0x766>
	{
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    6cba:	482d      	ldr	r0, [pc, #180]	; (6d70 <usb_isr+0x7e0>)
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index( 0, RX, EVEN ) ].desc = BDT_DESC( EP0_SIZE, 0 );
    6cbc:	4a2a      	ldr	r2, [pc, #168]	; (6d68 <usb_isr+0x7d8>)
		table[index( 0, RX, EVEN ) ].addr = ep0_rx0_buf;
    6cbe:	4c2d      	ldr	r4, [pc, #180]	; (6d74 <usb_isr+0x7e4>)
	if ( status & USB_ISTAT_USBRST /* 01 */ )
	{
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    6cc0:	2302      	movs	r3, #2
    6cc2:	7003      	strb	r3, [r0, #0]
		ep0_tx_bdt_bank = 0;
    6cc4:	4b2c      	ldr	r3, [pc, #176]	; (6d78 <usb_isr+0x7e8>)
    6cc6:	7019      	strb	r1, [r3, #0]

		// set up buffers to receive Setup and OUT packets
		table[index( 0, RX, EVEN ) ].desc = BDT_DESC( EP0_SIZE, 0 );
    6cc8:	4b2c      	ldr	r3, [pc, #176]	; (6d7c <usb_isr+0x7ec>)
    6cca:	601a      	str	r2, [r3, #0]
		table[index( 0, RX, EVEN ) ].addr = ep0_rx0_buf;
		table[index( 0, RX, ODD ) ].desc = BDT_DESC( EP0_SIZE, 0 );
    6ccc:	609a      	str	r2, [r3, #8]
		table[index( 0, RX, ODD ) ].addr = ep0_rx1_buf;
    6cce:	4a2c      	ldr	r2, [pc, #176]	; (6d80 <usb_isr+0x7f0>)
    6cd0:	60da      	str	r2, [r3, #12]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index( 0, RX, EVEN ) ].desc = BDT_DESC( EP0_SIZE, 0 );
		table[index( 0, RX, EVEN ) ].addr = ep0_rx0_buf;
    6cd2:	605c      	str	r4, [r3, #4]
		table[index( 0, RX, ODD ) ].desc = BDT_DESC( EP0_SIZE, 0 );
		table[index( 0, RX, ODD ) ].addr = ep0_rx1_buf;
		table[index( 0, TX, EVEN ) ].desc = 0;
    6cd4:	6119      	str	r1, [r3, #16]
		table[index( 0, TX, ODD ) ].desc = 0;
    6cd6:	6199      	str	r1, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    6cd8:	4b2a      	ldr	r3, [pc, #168]	; (6d84 <usb_isr+0x7f4>)
    6cda:	220d      	movs	r2, #13
    6cdc:	701a      	strb	r2, [r3, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    6cde:	4a2a      	ldr	r2, [pc, #168]	; (6d88 <usb_isr+0x7f8>)
    6ce0:	23ff      	movs	r3, #255	; 0xff
    6ce2:	7013      	strb	r3, [r2, #0]
		USB0_ISTAT = 0xFF;
    6ce4:	7033      	strb	r3, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    6ce6:	7411      	strb	r1, [r2, #16]

		// enable other interrupts
		USB0_ERREN = 0xFF;
    6ce8:	7113      	strb	r3, [r2, #4]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    6cea:	4b28      	ldr	r3, [pc, #160]	; (6d8c <usb_isr+0x7fc>)
    6cec:	22bf      	movs	r2, #191	; 0xbf
    6cee:	701a      	strb	r2, [r3, #0]
			USB_INTEN_USBRSTEN |
			USB_INTEN_RESUMEEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    6cf0:	2301      	movs	r3, #1
    6cf2:	7003      	strb	r3, [r0, #0]
		return;
    6cf4:	e02b      	b.n	6d4e <usb_isr+0x7be>
	}


	if ( (status & USB_ISTAT_STALL /* 80 */ ) )
    6cf6:	0620      	lsls	r0, r4, #24
	{
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    6cf8:	bf41      	itttt	mi
    6cfa:	4b22      	ldrmi	r3, [pc, #136]	; (6d84 <usb_isr+0x7f4>)
    6cfc:	220d      	movmi	r2, #13
    6cfe:	701a      	strbmi	r2, [r3, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    6d00:	2380      	movmi	r3, #128	; 0x80
    6d02:	bf48      	it	mi
    6d04:	7033      	strbmi	r3, [r6, #0]
	}
	if ( (status & USB_ISTAT_ERROR /* 02 */ ) )
    6d06:	07a1      	lsls	r1, r4, #30
	{
		uint8_t err = USB0_ERRSTAT;
    6d08:	bf41      	itttt	mi
    6d0a:	4a1f      	ldrmi	r2, [pc, #124]	; (6d88 <usb_isr+0x7f8>)
    6d0c:	7813      	ldrbmi	r3, [r2, #0]
    6d0e:	b2db      	uxtbmi	r3, r3
		USB0_ERRSTAT = err;
    6d10:	7013      	strbmi	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    6d12:	bf44      	itt	mi
    6d14:	2302      	movmi	r3, #2
    6d16:	7033      	strbmi	r3, [r6, #0]
	}

	// USB Host signalling device to enter 'sleep' state
	// The USB Module triggers this interrupt when it detects the bus has been idle for 3 ms
	if ( (status & USB_ISTAT_SLEEP /* 10 */ ) )
    6d18:	06e2      	lsls	r2, r4, #27
    6d1a:	d509      	bpl.n	6d30 <usb_isr+0x7a0>
	{
		//info_print("Host has requested USB sleep/suspend state");
		Output_update_usb_current( 100 ); // Set to 100 mA
    6d1c:	2064      	movs	r0, #100	; 0x64
    6d1e:	f7ff fb05 	bl	632c <Output_update_usb_current>
		usb_dev_sleep = 1;
    6d22:	4b1b      	ldr	r3, [pc, #108]	; (6d90 <usb_isr+0x800>)
    6d24:	2201      	movs	r2, #1
    6d26:	701a      	strb	r2, [r3, #0]
		USB0_ISTAT |= USB_ISTAT_SLEEP;
    6d28:	7833      	ldrb	r3, [r6, #0]
    6d2a:	f043 0310 	orr.w	r3, r3, #16
    6d2e:	7033      	strb	r3, [r6, #0]
	}

	// On USB Resume, unset the usb_dev_sleep so we don't keep sending resume signals
	if ( (status & USB_ISTAT_RESUME /* 20 */ ) )
    6d30:	06a3      	lsls	r3, r4, #26
    6d32:	d50c      	bpl.n	6d4e <usb_isr+0x7be>
	{
		//info_print("Host has woken-up/resumed from sleep/suspend state");
		Output_update_usb_current( *usb_bMaxPower * 2 );
    6d34:	4b17      	ldr	r3, [pc, #92]	; (6d94 <usb_isr+0x804>)
    6d36:	681b      	ldr	r3, [r3, #0]
    6d38:	7818      	ldrb	r0, [r3, #0]
    6d3a:	0040      	lsls	r0, r0, #1
    6d3c:	f7ff faf6 	bl	632c <Output_update_usb_current>
		usb_dev_sleep = 0;
    6d40:	4b13      	ldr	r3, [pc, #76]	; (6d90 <usb_isr+0x800>)
    6d42:	2200      	movs	r2, #0
    6d44:	701a      	strb	r2, [r3, #0]
		USB0_ISTAT |= USB_ISTAT_RESUME;
    6d46:	7833      	ldrb	r3, [r6, #0]
    6d48:	f043 0320 	orr.w	r3, r3, #32
    6d4c:	7033      	strb	r3, [r6, #0]
	}
}
    6d4e:	b003      	add	sp, #12
    6d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d54:	1fff9460 	.word	0x1fff9460
    6d58:	1fff93b0 	.word	0x1fff93b0
    6d5c:	1fff93fc 	.word	0x1fff93fc
    6d60:	1fffa482 	.word	0x1fffa482
    6d64:	1fff94ad 	.word	0x1fff94ad
    6d68:	00400088 	.word	0x00400088
    6d6c:	004000c8 	.word	0x004000c8
    6d70:	40072094 	.word	0x40072094
    6d74:	1fff93bc 	.word	0x1fff93bc
    6d78:	1fff941c 	.word	0x1fff941c
    6d7c:	1fff8000 	.word	0x1fff8000
    6d80:	1fff9420 	.word	0x1fff9420
    6d84:	400720c0 	.word	0x400720c0
    6d88:	40072088 	.word	0x40072088
    6d8c:	40072084 	.word	0x40072084
    6d90:	1fff94ac 	.word	0x1fff94ac
    6d94:	1fff8ea0 	.word	0x1fff8ea0
    6d98:	1fff9390 	.word	0x1fff9390

00006d9c <usb_init>:



uint8_t usb_init()
{
    6d9c:	2200      	movs	r2, #0
	#endif

	// Clear out endpoints table
	for ( int i = 0; i <= NUM_ENDPOINTS * 4; i++ )
	{
		table[i].desc = 0;
    6d9e:	4b22      	ldr	r3, [pc, #136]	; (6e28 <usb_init+0x8c>)
    6da0:	2100      	movs	r1, #0
    6da2:	50d1      	str	r1, [r2, r3]
    6da4:	1898      	adds	r0, r3, r2
    6da6:	3208      	adds	r2, #8
	#ifdef UART_DEBUG
	print("USB INIT"NL);
	#endif

	// Clear out endpoints table
	for ( int i = 0; i <= NUM_ENDPOINTS * 4; i++ )
    6da8:	f5b2 7f84 	cmp.w	r2, #264	; 0x108
	{
		table[i].desc = 0;
		table[i].addr = 0;
    6dac:	6041      	str	r1, [r0, #4]
	#ifdef UART_DEBUG
	print("USB INIT"NL);
	#endif

	// Clear out endpoints table
	for ( int i = 0; i <= NUM_ENDPOINTS * 4; i++ )
    6dae:	d1f6      	bne.n	6d9e <usb_init+0x2>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    6db0:	491e      	ldr	r1, [pc, #120]	; (6e2c <usb_init+0x90>)
    6db2:	680a      	ldr	r2, [r1, #0]
    6db4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    6db8:	600a      	str	r2, [r1, #0]

	// reset USB module
	USB0_USBTRC0 = USB_USBTRC_USBRESET;
    6dba:	4a1d      	ldr	r2, [pc, #116]	; (6e30 <usb_init+0x94>)
    6dbc:	2180      	movs	r1, #128	; 0x80
    6dbe:	7011      	strb	r1, [r2, #0]
	while ( (USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0 ); // wait for reset to end
    6dc0:	7810      	ldrb	r0, [r2, #0]
    6dc2:	491b      	ldr	r1, [pc, #108]	; (6e30 <usb_init+0x94>)
    6dc4:	0600      	lsls	r0, r0, #24
    6dc6:	d4fb      	bmi.n	6dc0 <usb_init+0x24>

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    6dc8:	4a1a      	ldr	r2, [pc, #104]	; (6e34 <usb_init+0x98>)
    6dca:	f3c3 2007 	ubfx	r0, r3, #8, #8
    6dce:	7010      	strb	r0, [r2, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    6dd0:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    6dd4:	0e1b      	lsrs	r3, r3, #24
	USB0_USBTRC0 = USB_USBTRC_USBRESET;
	while ( (USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0 ); // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    6dd6:	7510      	strb	r0, [r2, #20]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    6dd8:	7613      	strb	r3, [r2, #24]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    6dda:	23ff      	movs	r3, #255	; 0xff
    6ddc:	f802 3c1c 	strb.w	r3, [r2, #-28]
	USB0_ERRSTAT = 0xFF;
    6de0:	f802 3c14 	strb.w	r3, [r2, #-20]
	USB0_OTGISTAT = 0xFF;
    6de4:	f802 3c8c 	strb.w	r3, [r2, #-140]

	USB0_USBTRC0 |= 0x40; // undocumented bit
    6de8:	780b      	ldrb	r3, [r1, #0]
    6dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6dee:	700b      	strb	r3, [r1, #0]

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    6df0:	4b11      	ldr	r3, [pc, #68]	; (6e38 <usb_init+0x9c>)
    6df2:	2001      	movs	r0, #1
    6df4:	7018      	strb	r0, [r3, #0]
	USB0_USBCTRL = 0;
    6df6:	2300      	movs	r3, #0
    6df8:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    6dfc:	f802 0c18 	strb.w	r0, [r2, #-24]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY( IRQ_USBOTG, 112 );
    6e00:	4a0e      	ldr	r2, [pc, #56]	; (6e3c <usb_init+0xa0>)
    6e02:	2170      	movs	r1, #112	; 0x70
	NVIC_ENABLE_IRQ( IRQ_USBOTG );
    6e04:	f46f 7c50 	mvn.w	ip, #832	; 0x340

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY( IRQ_USBOTG, 112 );
    6e08:	7011      	strb	r1, [r2, #0]
	NVIC_ENABLE_IRQ( IRQ_USBOTG );
    6e0a:	4462      	add	r2, ip
    6e0c:	f44f 7100 	mov.w	r1, #512	; 0x200
    6e10:	6011      	str	r1, [r2, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    6e12:	f102 42c0 	add.w	r2, r2, #1610612736	; 0x60000000
    6e16:	f502 22c8 	add.w	r2, r2, #409600	; 0x64000
    6e1a:	2110      	movs	r1, #16
    6e1c:	7011      	strb	r1, [r2, #0]

	// Do not check for power negotiation delay until Get Configuration Descriptor
	power_neg_delay = 0;
    6e1e:	4a08      	ldr	r2, [pc, #32]	; (6e40 <usb_init+0xa4>)
    6e20:	7013      	strb	r3, [r2, #0]

	// During initialization host isn't sleeping
	usb_dev_sleep = 0;
    6e22:	4a08      	ldr	r2, [pc, #32]	; (6e44 <usb_init+0xa8>)
    6e24:	7013      	strb	r3, [r2, #0]

	return 1;
}
    6e26:	4770      	bx	lr
    6e28:	1fff8000 	.word	0x1fff8000
    6e2c:	40048034 	.word	0x40048034
    6e30:	4007210c 	.word	0x4007210c
    6e34:	4007209c 	.word	0x4007209c
    6e38:	40072094 	.word	0x40072094
    6e3c:	e000e449 	.word	0xe000e449
    6e40:	1fff93b8 	.word	0x1fff93b8
    6e44:	1fff94ac 	.word	0x1fff94ac

00006e48 <usb_device_check>:
}

// Used to check any USB state changes that may not have a proper interrupt
// Called once per scan loop, should take minimal processing time or it may affect other modules
void usb_device_check()
{
    6e48:	b508      	push	{r3, lr}
	// Check to see if we're still waiting for the next USB request after Get Configuration Descriptor
	// If still waiting, restart the USB initialization with a lower power requirement
	if ( power_neg_delay )
    6e4a:	4a0e      	ldr	r2, [pc, #56]	; (6e84 <usb_device_check+0x3c>)
    6e4c:	7813      	ldrb	r3, [r2, #0]
    6e4e:	b1bb      	cbz	r3, 6e80 <usb_device_check+0x38>
	{
		// Check if 100 ms has elapsed
		if ( systick_millis_count - power_neg_time > 100 )
    6e50:	4b0d      	ldr	r3, [pc, #52]	; (6e88 <usb_device_check+0x40>)
    6e52:	490e      	ldr	r1, [pc, #56]	; (6e8c <usb_device_check+0x44>)
    6e54:	681b      	ldr	r3, [r3, #0]
    6e56:	6809      	ldr	r1, [r1, #0]
    6e58:	1a5b      	subs	r3, r3, r1
    6e5a:	2b64      	cmp	r3, #100	; 0x64
    6e5c:	d910      	bls.n	6e80 <usb_device_check+0x38>
			// Update bMaxPower
			// The value set is in increments of 2 mA
			// So 50 * 2 mA = 100 mA
			// XXX Currently only transitions to 100 mA
			//     It may be possible to transition down again to 20 mA
			*usb_bMaxPower = 50;
    6e5e:	4b0c      	ldr	r3, [pc, #48]	; (6e90 <usb_device_check+0x48>)
    6e60:	681b      	ldr	r3, [r3, #0]
    6e62:	2132      	movs	r1, #50	; 0x32
    6e64:	7019      	strb	r1, [r3, #0]

			// Re-initialize USB
			power_neg_delay = 0;
    6e66:	2300      	movs	r3, #0
    6e68:	7013      	strb	r3, [r2, #0]
			usb_configuration = 0; // Clear USB configuration if we have one
    6e6a:	4a0a      	ldr	r2, [pc, #40]	; (6e94 <usb_device_check+0x4c>)
    6e6c:	7013      	strb	r3, [r2, #0]
			USB0_CONTROL = 0; // Disable D+ Pullup to simulate disconnect
    6e6e:	4a0a      	ldr	r2, [pc, #40]	; (6e98 <usb_device_check+0x50>)
			delay(10); // Delay is necessary to simulate disconnect
    6e70:	200a      	movs	r0, #10
			*usb_bMaxPower = 50;

			// Re-initialize USB
			power_neg_delay = 0;
			usb_configuration = 0; // Clear USB configuration if we have one
			USB0_CONTROL = 0; // Disable D+ Pullup to simulate disconnect
    6e72:	7013      	strb	r3, [r2, #0]
			delay(10); // Delay is necessary to simulate disconnect
    6e74:	f7fb fbb0 	bl	25d8 <delay>
			usb_init();
		}
	}
}
    6e78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			// Re-initialize USB
			power_neg_delay = 0;
			usb_configuration = 0; // Clear USB configuration if we have one
			USB0_CONTROL = 0; // Disable D+ Pullup to simulate disconnect
			delay(10); // Delay is necessary to simulate disconnect
			usb_init();
    6e7c:	f7ff bf8e 	b.w	6d9c <usb_init>
    6e80:	bd08      	pop	{r3, pc}
    6e82:	bf00      	nop
    6e84:	1fff93b8 	.word	0x1fff93b8
    6e88:	1fff9184 	.word	0x1fff9184
    6e8c:	1fff94a8 	.word	0x1fff94a8
    6e90:	1fff8ea0 	.word	0x1fff8ea0
    6e94:	1fff94b6 	.word	0x1fff94b6
    6e98:	40072108 	.word	0x40072108

00006e9c <usb_keyboard_send>:

// ----- Functions -----

// send the contents of keyboard_keys and keyboard_modifier_keys
void usb_keyboard_send()
{
    6e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6ea0:	f246 4501 	movw	r5, #25601	; 0x6401
	usb_packet_t *tx_packet;

	// Wait till ready
	while ( 1 )
	{
		if ( !usb_configuration )
    6ea4:	4b9a      	ldr	r3, [pc, #616]	; (7110 <usb_keyboard_send+0x274>)
    6ea6:	781b      	ldrb	r3, [r3, #0]
    6ea8:	b923      	cbnz	r3, 6eb4 <usb_keyboard_send+0x18>
		{
			erro_print("USB not configured...");
    6eaa:	489a      	ldr	r0, [pc, #616]	; (7114 <usb_keyboard_send+0x278>)

		break;
	}

	return;
}
    6eac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// Wait till ready
	while ( 1 )
	{
		if ( !usb_configuration )
		{
			erro_print("USB not configured...");
    6eb0:	f000 be7a 	b.w	7ba8 <_print>
			return;
		}

		if ( USBKeys_Protocol == 0 ) // Boot Mode
    6eb4:	4b98      	ldr	r3, [pc, #608]	; (7118 <usb_keyboard_send+0x27c>)
    6eb6:	781a      	ldrb	r2, [r3, #0]
    6eb8:	461e      	mov	r6, r3
    6eba:	b942      	cbnz	r2, 6ece <usb_keyboard_send+0x32>
		{
			if ( usb_tx_packet_count( KEYBOARD_ENDPOINT ) < TX_PACKET_LIMIT )
    6ebc:	2001      	movs	r0, #1
    6ebe:	f7ff faa1 	bl	6404 <usb_tx_packet_count>
    6ec2:	2803      	cmp	r0, #3
    6ec4:	d90f      	bls.n	6ee6 <usb_keyboard_send+0x4a>
				if ( tx_packet )
					break;
			}
		}

		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    6ec6:	3d01      	subs	r5, #1
    6ec8:	4b94      	ldr	r3, [pc, #592]	; (711c <usb_keyboard_send+0x280>)
    6eca:	d112      	bne.n	6ef2 <usb_keyboard_send+0x56>
    6ecc:	e013      	b.n	6ef6 <usb_keyboard_send+0x5a>
				tx_packet = usb_malloc();
				if ( tx_packet )
					break;
			}
		}
		else if ( USBKeys_Protocol == 1 ) // NKRO Mode
    6ece:	781b      	ldrb	r3, [r3, #0]
    6ed0:	2b01      	cmp	r3, #1
    6ed2:	d101      	bne.n	6ed8 <usb_keyboard_send+0x3c>
		{
			if ( usb_tx_packet_count( NKRO_KEYBOARD_ENDPOINT ) < TX_PACKET_LIMIT )
    6ed4:	2002      	movs	r0, #2
    6ed6:	e7f2      	b.n	6ebe <usb_keyboard_send+0x22>
				tx_packet = usb_malloc();
				if ( tx_packet )
					break;
			}
		}
		else if ( USBKeys_Changed &
    6ed8:	4b91      	ldr	r3, [pc, #580]	; (7120 <usb_keyboard_send+0x284>)
    6eda:	781b      	ldrb	r3, [r3, #0]
    6edc:	f013 0f60 	tst.w	r3, #96	; 0x60
    6ee0:	d0f1      	beq.n	6ec6 <usb_keyboard_send+0x2a>
			( USBKeyChangeState_System | USBKeyChangeState_Consumer )
		)
		{
			if ( usb_tx_packet_count( SYS_CTRL_ENDPOINT ) < TX_PACKET_LIMIT )
    6ee2:	2008      	movs	r0, #8
    6ee4:	e7eb      	b.n	6ebe <usb_keyboard_send+0x22>
			{
				tx_packet = usb_malloc();
    6ee6:	f000 f93d 	bl	7164 <usb_malloc>
				if ( tx_packet )
    6eea:	4604      	mov	r4, r0
    6eec:	2800      	cmp	r0, #0
    6eee:	d0ea      	beq.n	6ec6 <usb_keyboard_send+0x2a>
    6ef0:	e00e      	b.n	6f10 <usb_keyboard_send+0x74>
					break;
			}
		}

		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    6ef2:	781a      	ldrb	r2, [r3, #0]
    6ef4:	b14a      	cbz	r2, 6f0a <usb_keyboard_send+0x6e>
		{
			transmit_previous_timeout = 1;
    6ef6:	2201      	movs	r2, #1
			warn_print("USB Transmit Timeout...");
    6ef8:	488a      	ldr	r0, [pc, #552]	; (7124 <usb_keyboard_send+0x288>)
			}
		}

		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
		{
			transmit_previous_timeout = 1;
    6efa:	701a      	strb	r2, [r3, #0]
			warn_print("USB Transmit Timeout...");
    6efc:	f000 fe54 	bl	7ba8 <_print>
			USBKeys_Changed = USBKeyChangeState_None; // Indicate packet lost
    6f00:	4b87      	ldr	r3, [pc, #540]	; (7120 <usb_keyboard_send+0x284>)
    6f02:	2200      	movs	r2, #0
    6f04:	701a      	strb	r2, [r3, #0]
			return;
    6f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		}
		yield();
    6f0a:	f7fb fb41 	bl	2590 <yield>
	}
    6f0e:	e7c9      	b.n	6ea4 <usb_keyboard_send+0x8>

	// Pointer to USB tx packet buffer
	uint8_t *tx_buf = tx_packet->buf;

	// Check system control keys
	if ( USBKeys_Changed & USBKeyChangeState_System )
    6f10:	4d83      	ldr	r5, [pc, #524]	; (7120 <usb_keyboard_send+0x284>)
    6f12:	782b      	ldrb	r3, [r5, #0]
    6f14:	069a      	lsls	r2, r3, #26
    6f16:	d51a      	bpl.n	6f4e <usb_keyboard_send+0xb2>
	{
		if ( Output_DebugMode )
    6f18:	4b83      	ldr	r3, [pc, #524]	; (7128 <usb_keyboard_send+0x28c>)
    6f1a:	4e84      	ldr	r6, [pc, #528]	; (712c <usb_keyboard_send+0x290>)
    6f1c:	781b      	ldrb	r3, [r3, #0]
    6f1e:	b14b      	cbz	r3, 6f34 <usb_keyboard_send+0x98>
		{
			print("SysCtrl[");
    6f20:	4883      	ldr	r0, [pc, #524]	; (7130 <usb_keyboard_send+0x294>)
    6f22:	f000 fe41 	bl	7ba8 <_print>
			printHex_op( USBKeys_SysCtrl, 2 );
    6f26:	7830      	ldrb	r0, [r6, #0]
    6f28:	2102      	movs	r1, #2
    6f2a:	f000 fedf 	bl	7cec <printHex_op>
			print( "] " NL );
    6f2e:	4881      	ldr	r0, [pc, #516]	; (7134 <usb_keyboard_send+0x298>)
    6f30:	f000 fe3a 	bl	7ba8 <_print>
		}

		*tx_buf++ = 0x02; // ID
    6f34:	2302      	movs	r3, #2
		*tx_buf   = USBKeys_SysCtrl;
    6f36:	7832      	ldrb	r2, [r6, #0]
			print("SysCtrl[");
			printHex_op( USBKeys_SysCtrl, 2 );
			print( "] " NL );
		}

		*tx_buf++ = 0x02; // ID
    6f38:	7223      	strb	r3, [r4, #8]
		*tx_buf   = USBKeys_SysCtrl;
		tx_packet->len = 2;
    6f3a:	8023      	strh	r3, [r4, #0]
			printHex_op( USBKeys_SysCtrl, 2 );
			print( "] " NL );
		}

		*tx_buf++ = 0x02; // ID
		*tx_buf   = USBKeys_SysCtrl;
    6f3c:	7262      	strb	r2, [r4, #9]
		tx_packet->len = 2;

		// Send USB Packet
		usb_tx( SYS_CTRL_ENDPOINT, tx_packet );
    6f3e:	2008      	movs	r0, #8
    6f40:	4621      	mov	r1, r4
    6f42:	f7ff faad 	bl	64a0 <usb_tx>
		USBKeys_Changed &= ~USBKeyChangeState_System; // Mark sent
    6f46:	782b      	ldrb	r3, [r5, #0]
    6f48:	f023 0320 	bic.w	r3, r3, #32
    6f4c:	e0dc      	b.n	7108 <usb_keyboard_send+0x26c>
		return;
	}

	// Check consumer control keys
	if ( USBKeys_Changed & USBKeyChangeState_Consumer )
    6f4e:	065b      	lsls	r3, r3, #25
    6f50:	d51c      	bpl.n	6f8c <usb_keyboard_send+0xf0>
	{
		if ( Output_DebugMode )
    6f52:	4b75      	ldr	r3, [pc, #468]	; (7128 <usb_keyboard_send+0x28c>)
    6f54:	4e78      	ldr	r6, [pc, #480]	; (7138 <usb_keyboard_send+0x29c>)
    6f56:	781b      	ldrb	r3, [r3, #0]
    6f58:	b14b      	cbz	r3, 6f6e <usb_keyboard_send+0xd2>
		{
			print("ConsCtrl[");
    6f5a:	4878      	ldr	r0, [pc, #480]	; (713c <usb_keyboard_send+0x2a0>)
    6f5c:	f000 fe24 	bl	7ba8 <_print>
			printHex_op( USBKeys_ConsCtrl, 2 );
    6f60:	8830      	ldrh	r0, [r6, #0]
    6f62:	2102      	movs	r1, #2
    6f64:	f000 fec2 	bl	7cec <printHex_op>
			print( "] " NL );
    6f68:	4872      	ldr	r0, [pc, #456]	; (7134 <usb_keyboard_send+0x298>)
    6f6a:	f000 fe1d 	bl	7ba8 <_print>
		}

		*tx_buf++ = 0x03; // ID
		*tx_buf++ = (uint8_t)(USBKeys_ConsCtrl & 0x00FF);
    6f6e:	8833      	ldrh	r3, [r6, #0]
    6f70:	7263      	strb	r3, [r4, #9]
			print("ConsCtrl[");
			printHex_op( USBKeys_ConsCtrl, 2 );
			print( "] " NL );
		}

		*tx_buf++ = 0x03; // ID
    6f72:	2203      	movs	r2, #3
		*tx_buf++ = (uint8_t)(USBKeys_ConsCtrl & 0x00FF);
		*tx_buf   = (uint8_t)(USBKeys_ConsCtrl >> 8);
    6f74:	0a1b      	lsrs	r3, r3, #8
    6f76:	72a3      	strb	r3, [r4, #10]
			print("ConsCtrl[");
			printHex_op( USBKeys_ConsCtrl, 2 );
			print( "] " NL );
		}

		*tx_buf++ = 0x03; // ID
    6f78:	7222      	strb	r2, [r4, #8]
		*tx_buf++ = (uint8_t)(USBKeys_ConsCtrl & 0x00FF);
		*tx_buf   = (uint8_t)(USBKeys_ConsCtrl >> 8);
		tx_packet->len = 3;
    6f7a:	8022      	strh	r2, [r4, #0]

		// Send USB Packet
		usb_tx( SYS_CTRL_ENDPOINT, tx_packet );
    6f7c:	2008      	movs	r0, #8
    6f7e:	4621      	mov	r1, r4
    6f80:	f7ff fa8e 	bl	64a0 <usb_tx>
		USBKeys_Changed &= ~USBKeyChangeState_Consumer; // Mark sent
    6f84:	782b      	ldrb	r3, [r5, #0]
    6f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    6f8a:	e0bd      	b.n	7108 <usb_keyboard_send+0x26c>
		return;
	}

	switch ( USBKeys_Protocol )
    6f8c:	7833      	ldrb	r3, [r6, #0]
    6f8e:	f003 06ff 	and.w	r6, r3, #255	; 0xff
    6f92:	b11b      	cbz	r3, 6f9c <usb_keyboard_send+0x100>
    6f94:	2e01      	cmp	r6, #1
    6f96:	d045      	beq.n	7024 <usb_keyboard_send+0x188>
    6f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	{
	// Send boot keyboard interrupt packet(s)
	case 0:
		// USB Boot Mode debug output
		if ( Output_DebugMode )
    6f9c:	4b62      	ldr	r3, [pc, #392]	; (7128 <usb_keyboard_send+0x28c>)
    6f9e:	4f68      	ldr	r7, [pc, #416]	; (7140 <usb_keyboard_send+0x2a4>)
    6fa0:	781b      	ldrb	r3, [r3, #0]
    6fa2:	b363      	cbz	r3, 6ffe <usb_keyboard_send+0x162>
		{
			dbug_msg("Boot USB: ");
    6fa4:	4867      	ldr	r0, [pc, #412]	; (7144 <usb_keyboard_send+0x2a8>)
    6fa6:	f000 fdff 	bl	7ba8 <_print>
			printHex_op( USBKeys_Modifiers, 2 );
    6faa:	2102      	movs	r1, #2
    6fac:	7838      	ldrb	r0, [r7, #0]
    6fae:	f000 fe9d 	bl	7cec <printHex_op>
			print(" ");
    6fb2:	4865      	ldr	r0, [pc, #404]	; (7148 <usb_keyboard_send+0x2ac>)
    6fb4:	f000 fdf8 	bl	7ba8 <_print>
			printHex( 0 );
    6fb8:	4630      	mov	r0, r6
    6fba:	2101      	movs	r1, #1
			print(" ");
			printHex_op( USBKeys_Keys[0], 2 );
    6fbc:	4e63      	ldr	r6, [pc, #396]	; (714c <usb_keyboard_send+0x2b0>)
		if ( Output_DebugMode )
		{
			dbug_msg("Boot USB: ");
			printHex_op( USBKeys_Modifiers, 2 );
			print(" ");
			printHex( 0 );
    6fbe:	f000 fe95 	bl	7cec <printHex_op>
			print(" ");
    6fc2:	4861      	ldr	r0, [pc, #388]	; (7148 <usb_keyboard_send+0x2ac>)
    6fc4:	f000 fdf0 	bl	7ba8 <_print>
			printHex_op( USBKeys_Keys[0], 2 );
    6fc8:	7830      	ldrb	r0, [r6, #0]
    6fca:	2102      	movs	r1, #2
    6fcc:	f000 fe8e 	bl	7cec <printHex_op>
			printHex_op( USBKeys_Keys[1], 2 );
    6fd0:	7870      	ldrb	r0, [r6, #1]
    6fd2:	2102      	movs	r1, #2
    6fd4:	f000 fe8a 	bl	7cec <printHex_op>
			printHex_op( USBKeys_Keys[2], 2 );
    6fd8:	78b0      	ldrb	r0, [r6, #2]
    6fda:	2102      	movs	r1, #2
    6fdc:	f000 fe86 	bl	7cec <printHex_op>
			printHex_op( USBKeys_Keys[3], 2 );
    6fe0:	78f0      	ldrb	r0, [r6, #3]
    6fe2:	2102      	movs	r1, #2
    6fe4:	f000 fe82 	bl	7cec <printHex_op>
			printHex_op( USBKeys_Keys[4], 2 );
    6fe8:	7930      	ldrb	r0, [r6, #4]
    6fea:	2102      	movs	r1, #2
    6fec:	f000 fe7e 	bl	7cec <printHex_op>
			printHex_op( USBKeys_Keys[5], 2 );
    6ff0:	7970      	ldrb	r0, [r6, #5]
    6ff2:	2102      	movs	r1, #2
    6ff4:	f000 fe7a 	bl	7cec <printHex_op>
			print( NL );
    6ff8:	4855      	ldr	r0, [pc, #340]	; (7150 <usb_keyboard_send+0x2b4>)
    6ffa:	f000 fdd5 	bl	7ba8 <_print>
		}

		// Boot Mode
		*tx_buf++ = USBKeys_Modifiers;
    6ffe:	783b      	ldrb	r3, [r7, #0]
    7000:	7223      	strb	r3, [r4, #8]
		*tx_buf++ = 0;
    7002:	2600      	movs	r6, #0
		memcpy( tx_buf, USBKeys_Keys, USB_BOOT_MAX_KEYS );
    7004:	4951      	ldr	r1, [pc, #324]	; (714c <usb_keyboard_send+0x2b0>)
			print( NL );
		}

		// Boot Mode
		*tx_buf++ = USBKeys_Modifiers;
		*tx_buf++ = 0;
    7006:	7266      	strb	r6, [r4, #9]
		memcpy( tx_buf, USBKeys_Keys, USB_BOOT_MAX_KEYS );
    7008:	2206      	movs	r2, #6
    700a:	f104 000a 	add.w	r0, r4, #10
    700e:	f7fb fab3 	bl	2578 <memcpy>
		tx_packet->len = 8;
    7012:	2308      	movs	r3, #8
    7014:	8023      	strh	r3, [r4, #0]

		// Send USB Packet
		usb_tx( KEYBOARD_ENDPOINT, tx_packet );
    7016:	2001      	movs	r0, #1
    7018:	4621      	mov	r1, r4
    701a:	f7ff fa41 	bl	64a0 <usb_tx>
		USBKeys_Changed = USBKeyChangeState_None;
    701e:	702e      	strb	r6, [r5, #0]
		break;
    7020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	// Send NKRO keyboard interrupts packet(s)
	case 1:
		if ( Output_DebugMode )
    7024:	4b40      	ldr	r3, [pc, #256]	; (7128 <usb_keyboard_send+0x28c>)
    7026:	781a      	ldrb	r2, [r3, #0]
    7028:	461e      	mov	r6, r3
    702a:	b112      	cbz	r2, 7032 <usb_keyboard_send+0x196>
		{
			dbug_msg("NKRO USB: ");
    702c:	4849      	ldr	r0, [pc, #292]	; (7154 <usb_keyboard_send+0x2b8>)
    702e:	f000 fdbb 	bl	7ba8 <_print>
		}

		// Standard HID Keyboard
		if ( USBKeys_Changed )
    7032:	782b      	ldrb	r3, [r5, #0]
    7034:	2b00      	cmp	r3, #0
    7036:	d068      	beq.n	710a <usb_keyboard_send+0x26e>
		{
			// USB NKRO Debug output
			if ( Output_DebugMode )
    7038:	7833      	ldrb	r3, [r6, #0]
    703a:	f8df 8104 	ldr.w	r8, [pc, #260]	; 7140 <usb_keyboard_send+0x2a4>
    703e:	b39b      	cbz	r3, 70a8 <usb_keyboard_send+0x20c>
			{
				printHex_op( USBKeys_Modifiers, 2 );
    7040:	f898 0000 	ldrb.w	r0, [r8]
    7044:	2102      	movs	r1, #2
    7046:	f000 fe51 	bl	7cec <printHex_op>
				print(" ");
    704a:	483f      	ldr	r0, [pc, #252]	; (7148 <usb_keyboard_send+0x2ac>)
    704c:	f000 fdac 	bl	7ba8 <_print>
    7050:	2700      	movs	r7, #0
				for ( uint8_t c = 0; c < 6; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
    7052:	4e3e      	ldr	r6, [pc, #248]	; (714c <usb_keyboard_send+0x2b0>)
    7054:	2102      	movs	r1, #2
    7056:	5df0      	ldrb	r0, [r6, r7]
    7058:	3701      	adds	r7, #1
    705a:	f000 fe47 	bl	7cec <printHex_op>
			// USB NKRO Debug output
			if ( Output_DebugMode )
			{
				printHex_op( USBKeys_Modifiers, 2 );
				print(" ");
				for ( uint8_t c = 0; c < 6; c++ )
    705e:	2f06      	cmp	r7, #6
    7060:	d1f7      	bne.n	7052 <usb_keyboard_send+0x1b6>
					printHex_op( USBKeys_Keys[ c ], 2 );
				print(" ");
    7062:	4839      	ldr	r0, [pc, #228]	; (7148 <usb_keyboard_send+0x2ac>)
    7064:	f000 fda0 	bl	7ba8 <_print>
    7068:	1d77      	adds	r7, r6, #5
    706a:	f106 0913 	add.w	r9, r6, #19
				for ( uint8_t c = 6; c < 20; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
    706e:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    7072:	2102      	movs	r1, #2
    7074:	f000 fe3a 	bl	7cec <printHex_op>
				printHex_op( USBKeys_Modifiers, 2 );
				print(" ");
				for ( uint8_t c = 0; c < 6; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
				print(" ");
				for ( uint8_t c = 6; c < 20; c++ )
    7078:	454f      	cmp	r7, r9
    707a:	d1f8      	bne.n	706e <usb_keyboard_send+0x1d2>
					printHex_op( USBKeys_Keys[ c ], 2 );
				print(" ");
    707c:	4832      	ldr	r0, [pc, #200]	; (7148 <usb_keyboard_send+0x2ac>)
    707e:	f000 fd93 	bl	7ba8 <_print>
				printHex_op( USBKeys_Keys[20], 2 );
    7082:	7d30      	ldrb	r0, [r6, #20]
    7084:	4e34      	ldr	r6, [pc, #208]	; (7158 <usb_keyboard_send+0x2bc>)
    7086:	2102      	movs	r1, #2
    7088:	f000 fe30 	bl	7cec <printHex_op>
				print(" ");
    708c:	482e      	ldr	r0, [pc, #184]	; (7148 <usb_keyboard_send+0x2ac>)
    708e:	f000 fd8b 	bl	7ba8 <_print>
    7092:	1db7      	adds	r7, r6, #6
				for ( uint8_t c = 21; c < 27; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
    7094:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    7098:	2102      	movs	r1, #2
    709a:	f000 fe27 	bl	7cec <printHex_op>
				for ( uint8_t c = 6; c < 20; c++ )
					printHex_op( USBKeys_Keys[ c ], 2 );
				print(" ");
				printHex_op( USBKeys_Keys[20], 2 );
				print(" ");
				for ( uint8_t c = 21; c < 27; c++ )
    709e:	42be      	cmp	r6, r7
    70a0:	d1f8      	bne.n	7094 <usb_keyboard_send+0x1f8>
					printHex_op( USBKeys_Keys[ c ], 2 );
				print( NL );
    70a2:	482b      	ldr	r0, [pc, #172]	; (7150 <usb_keyboard_send+0x2b4>)
    70a4:	f000 fd80 	bl	7ba8 <_print>
			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
			*tx_buf++ = USBKeys_Modifiers;
			tx_packet->len += 2;
    70a8:	4620      	mov	r0, r4

			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
			*tx_buf++ = USBKeys_Modifiers;
    70aa:	f898 3000 	ldrb.w	r3, [r8]
    70ae:	7263      	strb	r3, [r4, #9]
			}

			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
    70b0:	2701      	movs	r7, #1
			*tx_buf++ = USBKeys_Modifiers;
			tx_packet->len += 2;
    70b2:	2602      	movs	r6, #2
			}

			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
    70b4:	7227      	strb	r7, [r4, #8]
			*tx_buf++ = USBKeys_Modifiers;
			tx_packet->len += 2;

			// 4-49 (first 6 bytes)
			memcpy( tx_buf, USBKeys_Keys, 6 );
    70b6:	4925      	ldr	r1, [pc, #148]	; (714c <usb_keyboard_send+0x2b0>)
			tx_packet->len = 0;

			// Modifiers
			*tx_buf++ = 0x01; // ID
			*tx_buf++ = USBKeys_Modifiers;
			tx_packet->len += 2;
    70b8:	f820 6b0a 	strh.w	r6, [r0], #10

			// 4-49 (first 6 bytes)
			memcpy( tx_buf, USBKeys_Keys, 6 );
    70bc:	2206      	movs	r2, #6
    70be:	f7fb fa5b 	bl	2578 <memcpy>
			tx_buf += 6;
			tx_packet->len += 6;
    70c2:	8823      	ldrh	r3, [r4, #0]

			// 51-155 (Middle 14 bytes)
			memcpy( tx_buf, USBKeys_Keys + 6, 14 );
    70c4:	4925      	ldr	r1, [pc, #148]	; (715c <usb_keyboard_send+0x2c0>)
			tx_packet->len += 2;

			// 4-49 (first 6 bytes)
			memcpy( tx_buf, USBKeys_Keys, 6 );
			tx_buf += 6;
			tx_packet->len += 6;
    70c6:	4620      	mov	r0, r4
    70c8:	3306      	adds	r3, #6
    70ca:	f820 3b10 	strh.w	r3, [r0], #16

			// 51-155 (Middle 14 bytes)
			memcpy( tx_buf, USBKeys_Keys + 6, 14 );
    70ce:	220e      	movs	r2, #14
    70d0:	f7fb fa52 	bl	2578 <memcpy>
			tx_buf += 14;
			tx_packet->len += 14;
    70d4:	8823      	ldrh	r3, [r4, #0]

			// 157-164 (Next byte)
			memcpy( tx_buf, USBKeys_Keys + 20, 1 );
    70d6:	4920      	ldr	r1, [pc, #128]	; (7158 <usb_keyboard_send+0x2bc>)
			tx_packet->len += 6;

			// 51-155 (Middle 14 bytes)
			memcpy( tx_buf, USBKeys_Keys + 6, 14 );
			tx_buf += 14;
			tx_packet->len += 14;
    70d8:	4620      	mov	r0, r4
    70da:	330e      	adds	r3, #14
    70dc:	f820 3b1e 	strh.w	r3, [r0], #30

			// 157-164 (Next byte)
			memcpy( tx_buf, USBKeys_Keys + 20, 1 );
    70e0:	463a      	mov	r2, r7
    70e2:	f7fb fa49 	bl	2578 <memcpy>
			tx_buf += 1;
			tx_packet->len += 1;
    70e6:	8823      	ldrh	r3, [r4, #0]

			// 176-221 (last 6 bytes)
			memcpy( tx_buf, USBKeys_Keys + 21, 6 );
    70e8:	491d      	ldr	r1, [pc, #116]	; (7160 <usb_keyboard_send+0x2c4>)
			tx_packet->len += 14;

			// 157-164 (Next byte)
			memcpy( tx_buf, USBKeys_Keys + 20, 1 );
			tx_buf += 1;
			tx_packet->len += 1;
    70ea:	4620      	mov	r0, r4
    70ec:	443b      	add	r3, r7
    70ee:	f820 3b1f 	strh.w	r3, [r0], #31

			// 176-221 (last 6 bytes)
			memcpy( tx_buf, USBKeys_Keys + 21, 6 );
    70f2:	2206      	movs	r2, #6
    70f4:	f7fb fa40 	bl	2578 <memcpy>
			tx_packet->len += 6;
    70f8:	8823      	ldrh	r3, [r4, #0]
    70fa:	3306      	adds	r3, #6
    70fc:	8023      	strh	r3, [r4, #0]

			// Send USB Packet
			usb_tx( NKRO_KEYBOARD_ENDPOINT, tx_packet );
    70fe:	4630      	mov	r0, r6
    7100:	4621      	mov	r1, r4
    7102:	f7ff f9cd 	bl	64a0 <usb_tx>
			USBKeys_Changed = USBKeyChangeState_None; // Mark sent
    7106:	2300      	movs	r3, #0
    7108:	702b      	strb	r3, [r5, #0]
    710a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    710e:	bf00      	nop
    7110:	1fff94b6 	.word	0x1fff94b6
    7114:	0000bbba 	.word	0x0000bbba
    7118:	1fff8d58 	.word	0x1fff8d58
    711c:	1fff94b8 	.word	0x1fff94b8
    7120:	1fff9378 	.word	0x1fff9378
    7124:	0000bbe7 	.word	0x0000bbe7
    7128:	1fff9389 	.word	0x1fff9389
    712c:	1fffa448 	.word	0x1fffa448
    7130:	0000bc16 	.word	0x0000bc16
    7134:	0000bc1f 	.word	0x0000bc1f
    7138:	1fffa480 	.word	0x1fffa480
    713c:	0000bc24 	.word	0x0000bc24
    7140:	1fff9376 	.word	0x1fff9376
    7144:	0000bc2e 	.word	0x0000bc2e
    7148:	0000852a 	.word	0x0000852a
    714c:	1fffa449 	.word	0x1fffa449
    7150:	0000bc21 	.word	0x0000bc21
    7154:	0000bc4c 	.word	0x0000bc4c
    7158:	1fffa45d 	.word	0x1fffa45d
    715c:	1fffa44f 	.word	0x1fffa44f
    7160:	1fffa45e 	.word	0x1fffa45e

00007164 <usb_malloc>:
// http://www.archivum.info/gnu.gcc.help/2006-08/00148/Re-GCC-Inline-Assembly.html
// http://gcc.gnu.org/ml/gcc/2012-06/msg00015.html
// __builtin_clz()

usb_packet_t *usb_malloc()
{
    7164:	b510      	push	{r4, lr}
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    7166:	b672      	cpsid	i
	avail = usb_buffer_available;
    7168:	480b      	ldr	r0, [pc, #44]	; (7198 <usb_malloc+0x34>)
    716a:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz( avail ); // clz = count leading zeros
    716c:	fab2 f182 	clz	r1, r2
	if ( n >= NUM_USB_BUFFERS )
    7170:	291d      	cmp	r1, #29
    7172:	dd02      	ble.n	717a <usb_malloc+0x16>
	{
		__enable_irq();
    7174:	b662      	cpsie	i
		return NULL;
    7176:	2000      	movs	r0, #0
    7178:	bd10      	pop	{r4, pc}
	}

	usb_buffer_available = avail & ~(0x80000000 >> n);
    717a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    717e:	40cb      	lsrs	r3, r1
    7180:	ea22 0203 	bic.w	r2, r2, r3
    7184:	6002      	str	r2, [r0, #0]
	__enable_irq();
    7186:	b662      	cpsie	i
	p = usb_buffer_memory + ( n * sizeof(usb_packet_t) );
    7188:	4c04      	ldr	r4, [pc, #16]	; (719c <usb_malloc+0x38>)
    718a:	2348      	movs	r3, #72	; 0x48
    718c:	434b      	muls	r3, r1
    718e:	18e0      	adds	r0, r4, r3
	*(uint32_t *)p = 0;
    7190:	2200      	movs	r2, #0
    7192:	50e2      	str	r2, [r4, r3]
	*(uint32_t *)(p + 4) = 0;
    7194:	6042      	str	r2, [r0, #4]
	return (usb_packet_t *)p;
}
    7196:	bd10      	pop	{r4, pc}
    7198:	1fff9178 	.word	0x1fff9178
    719c:	1fff8120 	.word	0x1fff8120

000071a0 <usb_free>:

void usb_free( usb_packet_t *p )
{
	unsigned int n, mask;

	n = ( (uint8_t *)p - usb_buffer_memory ) / sizeof(usb_packet_t);
    71a0:	4b0c      	ldr	r3, [pc, #48]	; (71d4 <usb_free+0x34>)
    71a2:	2248      	movs	r2, #72	; 0x48
    71a4:	1ac3      	subs	r3, r0, r3
    71a6:	fbb3 f3f2 	udiv	r3, r3, r2
	if ( n >= NUM_USB_BUFFERS )
    71aa:	2b1d      	cmp	r3, #29
    71ac:	d810      	bhi.n	71d0 <usb_free+0x30>
		return;

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if ( usb_rx_memory_needed && usb_configuration )
    71ae:	4a0a      	ldr	r2, [pc, #40]	; (71d8 <usb_free+0x38>)
    71b0:	7812      	ldrb	r2, [r2, #0]
    71b2:	b122      	cbz	r2, 71be <usb_free+0x1e>
    71b4:	4a09      	ldr	r2, [pc, #36]	; (71dc <usb_free+0x3c>)
    71b6:	7812      	ldrb	r2, [r2, #0]
    71b8:	b10a      	cbz	r2, 71be <usb_free+0x1e>
	{
		usb_rx_memory( p );
    71ba:	f7ff b935 	b.w	6428 <usb_rx_memory>
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    71be:	b672      	cpsid	i
	usb_buffer_available |= mask;
    71c0:	4907      	ldr	r1, [pc, #28]	; (71e0 <usb_free+0x40>)
	{
		usb_rx_memory( p );
		return;
	}

	mask = (0x80000000 >> n);
    71c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    71c6:	40da      	lsrs	r2, r3
	__disable_irq();
	usb_buffer_available |= mask;
    71c8:	680b      	ldr	r3, [r1, #0]
    71ca:	4313      	orrs	r3, r2
    71cc:	600b      	str	r3, [r1, #0]
	__enable_irq();
    71ce:	b662      	cpsie	i
    71d0:	4770      	bx	lr
    71d2:	bf00      	nop
    71d4:	1fff8120 	.word	0x1fff8120
    71d8:	1fff94ad 	.word	0x1fff94ad
    71dc:	1fff94b6 	.word	0x1fff94b6
    71e0:	1fff9178 	.word	0x1fff9178

000071e4 <usb_mouse_send>:
// Process pending mouse commands
// XXX Missing mouse movement and wheels
//     Proper support will require KLL generation of the USB descriptors
//     Similar support will be required for joystick control
void usb_mouse_send()
{
    71e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    71e6:	f643 4401 	movw	r4, #15361	; 0x3c01
	usb_packet_t *tx_packet;

	// Wait till ready
	while ( 1 )
	{
		if ( !usb_configuration )
    71ea:	4b1f      	ldr	r3, [pc, #124]	; (7268 <usb_mouse_send+0x84>)
    71ec:	781b      	ldrb	r3, [r3, #0]
    71ee:	b923      	cbnz	r3, 71fa <usb_mouse_send+0x16>
		{
			erro_print("USB not configured...");
    71f0:	481e      	ldr	r0, [pc, #120]	; (726c <usb_mouse_send+0x88>)
        // Clear status and state
        USBMouse_Buttons = 0;
        USBMouse_Relative_x = 0;
        USBMouse_Relative_y = 0;
        USBMouse_Changed = 0;
}
    71f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// Wait till ready
	while ( 1 )
	{
		if ( !usb_configuration )
		{
			erro_print("USB not configured...");
    71f6:	f000 bcd7 	b.w	7ba8 <_print>
			return;
		}

                // Attempt to acquire a USB packet for the mouse endpoint
                if ( usb_tx_packet_count( MOUSE_ENDPOINT ) < TX_PACKET_LIMIT )
    71fa:	2006      	movs	r0, #6
    71fc:	f7ff f902 	bl	6404 <usb_tx_packet_count>
    7200:	2802      	cmp	r0, #2
    7202:	4d1b      	ldr	r5, [pc, #108]	; (7270 <usb_mouse_send+0x8c>)
    7204:	d902      	bls.n	720c <usb_mouse_send+0x28>
                        tx_packet = usb_malloc();
                        if ( tx_packet )
                                break;
                }

		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    7206:	3c01      	subs	r4, #1
    7208:	d11a      	bne.n	7240 <usb_mouse_send+0x5c>
    720a:	e01b      	b.n	7244 <usb_mouse_send+0x60>
		}

                // Attempt to acquire a USB packet for the mouse endpoint
                if ( usb_tx_packet_count( MOUSE_ENDPOINT ) < TX_PACKET_LIMIT )
                {
                        tx_packet = usb_malloc();
    720c:	f7ff ffaa 	bl	7164 <usb_malloc>
                        if ( tx_packet )
    7210:	4601      	mov	r1, r0
    7212:	2800      	cmp	r0, #0
    7214:	d0f7      	beq.n	7206 <usb_mouse_send+0x22>
        transmit_previous_timeout = 0;

        // Prepare USB Mouse Packet
        // TODO Dynamically generate this code based on KLL requirements
        uint16_t *packet_data = (uint16_t*)(&tx_packet->buf[0]);
        packet_data[0] = USBMouse_Buttons;
    7216:	4f17      	ldr	r7, [pc, #92]	; (7274 <usb_mouse_send+0x90>)
        packet_data[1] = USBMouse_Relative_x;
    7218:	4e17      	ldr	r6, [pc, #92]	; (7278 <usb_mouse_send+0x94>)
        transmit_previous_timeout = 0;

        // Prepare USB Mouse Packet
        // TODO Dynamically generate this code based on KLL requirements
        uint16_t *packet_data = (uint16_t*)(&tx_packet->buf[0]);
        packet_data[0] = USBMouse_Buttons;
    721a:	883b      	ldrh	r3, [r7, #0]
    721c:	8103      	strh	r3, [r0, #8]
			return;
		}
		yield();
        }

        transmit_previous_timeout = 0;
    721e:	2400      	movs	r4, #0
    7220:	702c      	strb	r4, [r5, #0]
        // Prepare USB Mouse Packet
        // TODO Dynamically generate this code based on KLL requirements
        uint16_t *packet_data = (uint16_t*)(&tx_packet->buf[0]);
        packet_data[0] = USBMouse_Buttons;
        packet_data[1] = USBMouse_Relative_x;
        packet_data[2] = USBMouse_Relative_y;
    7222:	4d16      	ldr	r5, [pc, #88]	; (727c <usb_mouse_send+0x98>)

        // Prepare USB Mouse Packet
        // TODO Dynamically generate this code based on KLL requirements
        uint16_t *packet_data = (uint16_t*)(&tx_packet->buf[0]);
        packet_data[0] = USBMouse_Buttons;
        packet_data[1] = USBMouse_Relative_x;
    7224:	8833      	ldrh	r3, [r6, #0]
    7226:	8143      	strh	r3, [r0, #10]
        packet_data[2] = USBMouse_Relative_y;
    7228:	882b      	ldrh	r3, [r5, #0]
    722a:	8183      	strh	r3, [r0, #12]
        tx_packet->len = 6;
    722c:	2006      	movs	r0, #6
    722e:	8008      	strh	r0, [r1, #0]
        usb_tx( MOUSE_ENDPOINT, tx_packet );
    7230:	f7ff f936 	bl	64a0 <usb_tx>

        // Clear status and state
        USBMouse_Buttons = 0;
        USBMouse_Relative_x = 0;
        USBMouse_Relative_y = 0;
        USBMouse_Changed = 0;
    7234:	4b12      	ldr	r3, [pc, #72]	; (7280 <usb_mouse_send+0x9c>)
        packet_data[2] = USBMouse_Relative_y;
        tx_packet->len = 6;
        usb_tx( MOUSE_ENDPOINT, tx_packet );

        // Clear status and state
        USBMouse_Buttons = 0;
    7236:	803c      	strh	r4, [r7, #0]
        USBMouse_Relative_x = 0;
        USBMouse_Relative_y = 0;
        USBMouse_Changed = 0;
    7238:	701c      	strb	r4, [r3, #0]
        tx_packet->len = 6;
        usb_tx( MOUSE_ENDPOINT, tx_packet );

        // Clear status and state
        USBMouse_Buttons = 0;
        USBMouse_Relative_x = 0;
    723a:	8034      	strh	r4, [r6, #0]
        USBMouse_Relative_y = 0;
    723c:	802c      	strh	r4, [r5, #0]
    723e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                        tx_packet = usb_malloc();
                        if ( tx_packet )
                                break;
                }

		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    7240:	782b      	ldrb	r3, [r5, #0]
    7242:	b173      	cbz	r3, 7262 <usb_mouse_send+0x7e>
		{
			transmit_previous_timeout = 1;
    7244:	2301      	movs	r3, #1
			warn_print("USB Transmit Timeout...");
    7246:	480f      	ldr	r0, [pc, #60]	; (7284 <usb_mouse_send+0xa0>)
                                break;
                }

		if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
		{
			transmit_previous_timeout = 1;
    7248:	702b      	strb	r3, [r5, #0]
			warn_print("USB Transmit Timeout...");
    724a:	f000 fcad 	bl	7ba8 <_print>

                        // Clear status and state
                        USBMouse_Buttons = 0;
    724e:	4a09      	ldr	r2, [pc, #36]	; (7274 <usb_mouse_send+0x90>)
    7250:	2300      	movs	r3, #0
    7252:	8013      	strh	r3, [r2, #0]
                        USBMouse_Relative_x = 0;
    7254:	4a08      	ldr	r2, [pc, #32]	; (7278 <usb_mouse_send+0x94>)
    7256:	8013      	strh	r3, [r2, #0]
                        USBMouse_Relative_y = 0;
    7258:	4a08      	ldr	r2, [pc, #32]	; (727c <usb_mouse_send+0x98>)
    725a:	8013      	strh	r3, [r2, #0]
                        USBMouse_Changed = 0;
    725c:	4a08      	ldr	r2, [pc, #32]	; (7280 <usb_mouse_send+0x9c>)
    725e:	7013      	strb	r3, [r2, #0]
			return;
    7260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		yield();
    7262:	f7fb f995 	bl	2590 <yield>
        }
    7266:	e7c0      	b.n	71ea <usb_mouse_send+0x6>
    7268:	1fff94b6 	.word	0x1fff94b6
    726c:	0000bbba 	.word	0x0000bbba
    7270:	1fff94b9 	.word	0x1fff94b9
    7274:	1fff937a 	.word	0x1fff937a
    7278:	1fff9380 	.word	0x1fff9380
    727c:	1fff9382 	.word	0x1fff9382
    7280:	1fff937c 	.word	0x1fff937c
    7284:	0000bbe7 	.word	0x0000bbe7

00007288 <usb_serial_getchar>:

// ----- Functions -----

// get the next character, or -1 if nothing received
int usb_serial_getchar()
{
    7288:	b510      	push	{r4, lr}
	unsigned int i;
	int c;

	if ( !rx_packet )
    728a:	4c10      	ldr	r4, [pc, #64]	; (72cc <usb_serial_getchar+0x44>)
    728c:	6823      	ldr	r3, [r4, #0]
    728e:	b16b      	cbz	r3, 72ac <usb_serial_getchar+0x24>
			return -1;
		rx_packet = usb_rx( CDC_RX_ENDPOINT );
		if ( !rx_packet )
			return -1;
	}
	i = rx_packet->index;
    7290:	6820      	ldr	r0, [r4, #0]
    7292:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
    7294:	1c5a      	adds	r2, r3, #1
    7296:	4403      	add	r3, r0
    7298:	7a1c      	ldrb	r4, [r3, #8]
	if ( i >= rx_packet->len )
    729a:	8803      	ldrh	r3, [r0, #0]
    729c:	429a      	cmp	r2, r3
    729e:	d312      	bcc.n	72c6 <usb_serial_getchar+0x3e>
	{
		usb_free( rx_packet );
    72a0:	f7ff ff7e 	bl	71a0 <usb_free>
		rx_packet = NULL;
    72a4:	4b09      	ldr	r3, [pc, #36]	; (72cc <usb_serial_getchar+0x44>)
    72a6:	2200      	movs	r2, #0
    72a8:	601a      	str	r2, [r3, #0]
    72aa:	e00d      	b.n	72c8 <usb_serial_getchar+0x40>
	unsigned int i;
	int c;

	if ( !rx_packet )
	{
		if ( !usb_configuration )
    72ac:	4b08      	ldr	r3, [pc, #32]	; (72d0 <usb_serial_getchar+0x48>)
    72ae:	781b      	ldrb	r3, [r3, #0]
    72b0:	b913      	cbnz	r3, 72b8 <usb_serial_getchar+0x30>
			return -1;
    72b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    72b6:	bd10      	pop	{r4, pc}
		rx_packet = usb_rx( CDC_RX_ENDPOINT );
    72b8:	2004      	movs	r0, #4
    72ba:	f7ff f887 	bl	63cc <usb_rx>
    72be:	6020      	str	r0, [r4, #0]
		if ( !rx_packet )
    72c0:	2800      	cmp	r0, #0
    72c2:	d1e5      	bne.n	7290 <usb_serial_getchar+0x8>
    72c4:	e7f5      	b.n	72b2 <usb_serial_getchar+0x2a>
		usb_free( rx_packet );
		rx_packet = NULL;
	}
	else
	{
		rx_packet->index = i;
    72c6:	8042      	strh	r2, [r0, #2]
	}
	return c;
    72c8:	4620      	mov	r0, r4
}
    72ca:	bd10      	pop	{r4, pc}
    72cc:	1fff94c4 	.word	0x1fff94c4
    72d0:	1fff94b6 	.word	0x1fff94b6

000072d4 <usb_serial_available>:
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
	endpoint--;
	if ( endpoint >= NUM_ENDPOINTS )
		return 0;
	return usb_rx_byte_count_data[ endpoint ];
    72d4:	4b04      	ldr	r3, [pc, #16]	; (72e8 <usb_serial_available+0x14>)
}

// number of bytes available in the receive buffer
int usb_serial_available()
{
	int count = usb_rx_byte_count( CDC_RX_ENDPOINT );
    72d6:	88d8      	ldrh	r0, [r3, #6]
	if ( rx_packet )
    72d8:	4b04      	ldr	r3, [pc, #16]	; (72ec <usb_serial_available+0x18>)
    72da:	681a      	ldr	r2, [r3, #0]
    72dc:	b11a      	cbz	r2, 72e6 <usb_serial_available+0x12>
		count += rx_packet->len - rx_packet->index;
    72de:	8813      	ldrh	r3, [r2, #0]
    72e0:	8852      	ldrh	r2, [r2, #2]
    72e2:	1a9b      	subs	r3, r3, r2
    72e4:	4418      	add	r0, r3
	return count;
}
    72e6:	4770      	bx	lr
    72e8:	1fffa482 	.word	0x1fffa482
    72ec:	1fff94c4 	.word	0x1fff94c4

000072f0 <usb_serial_write>:
{
	return usb_serial_write( &c, 1 );
}

int usb_serial_write( const void *buffer, uint32_t size )
{
    72f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    72f4:	4d2d      	ldr	r5, [pc, #180]	; (73ac <usb_serial_write+0xbc>)
    72f6:	2301      	movs	r3, #1
{
	return usb_serial_write( &c, 1 );
}

int usb_serial_write( const void *buffer, uint32_t size )
{
    72f8:	4680      	mov	r8, r0
    72fa:	460c      	mov	r4, r1
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    72fc:	702b      	strb	r3, [r5, #0]
	while ( size > 0 )
    72fe:	2c00      	cmp	r4, #0
    7300:	d04f      	beq.n	73a2 <usb_serial_write+0xb2>
	{
		if ( !tx_packet )
    7302:	4e2b      	ldr	r6, [pc, #172]	; (73b0 <usb_serial_write+0xc0>)
    7304:	6833      	ldr	r3, [r6, #0]
    7306:	46b1      	mov	r9, r6
    7308:	bb23      	cbnz	r3, 7354 <usb_serial_write+0x64>
    730a:	f648 4701 	movw	r7, #35841	; 0x8c01
		{
			wait_count = 0;
			while ( 1 )
			{
				if ( !usb_configuration )
    730e:	4b29      	ldr	r3, [pc, #164]	; (73b4 <usb_serial_write+0xc4>)
    7310:	781b      	ldrb	r3, [r3, #0]
    7312:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    7316:	b90b      	cbnz	r3, 731c <usb_serial_write+0x2c>
				{
					tx_noautoflush = 0;
    7318:	702a      	strb	r2, [r5, #0]
    731a:	e014      	b.n	7346 <usb_serial_write+0x56>
					return -1;
				}
				if ( usb_tx_packet_count( CDC_TX_ENDPOINT ) < TX_PACKET_LIMIT )
    731c:	2005      	movs	r0, #5
    731e:	f7ff f871 	bl	6404 <usb_tx_packet_count>
    7322:	2807      	cmp	r0, #7
    7324:	d808      	bhi.n	7338 <usb_serial_write+0x48>
				{
					tx_noautoflush = 1;
    7326:	2301      	movs	r3, #1
    7328:	702b      	strb	r3, [r5, #0]
					tx_packet = usb_malloc();
    732a:	f7ff ff1b 	bl	7164 <usb_malloc>
    732e:	f8c9 0000 	str.w	r0, [r9]
					if ( tx_packet )
    7332:	b978      	cbnz	r0, 7354 <usb_serial_write+0x64>
						break;
					tx_noautoflush = 0;
    7334:	4b1d      	ldr	r3, [pc, #116]	; (73ac <usb_serial_write+0xbc>)
    7336:	7018      	strb	r0, [r3, #0]
				}
				if ( ++wait_count > TX_TIMEOUT || transmit_previous_timeout )
    7338:	3f01      	subs	r7, #1
    733a:	4b1f      	ldr	r3, [pc, #124]	; (73b8 <usb_serial_write+0xc8>)
    733c:	d001      	beq.n	7342 <usb_serial_write+0x52>
    733e:	781a      	ldrb	r2, [r3, #0]
    7340:	b12a      	cbz	r2, 734e <usb_serial_write+0x5e>
				{
					transmit_previous_timeout = 1;
    7342:	2201      	movs	r2, #1
    7344:	701a      	strb	r2, [r3, #0]
					return -1;
    7346:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    734a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				}
				yield();
    734e:	f7fb f91f 	bl	2590 <yield>
			}
    7352:	e7dc      	b.n	730e <usb_serial_write+0x1e>
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    7354:	6831      	ldr	r1, [r6, #0]
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    7356:	4b18      	ldr	r3, [pc, #96]	; (73b8 <usb_serial_write+0xc8>)
    7358:	2200      	movs	r2, #0
    735a:	701a      	strb	r2, [r3, #0]
		len = CDC_TX_SIZE - tx_packet->index;
    735c:	884b      	ldrh	r3, [r1, #2]
    735e:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
    7362:	42a2      	cmp	r2, r4
    7364:	bf28      	it	cs
    7366:	4622      	movcs	r2, r4
		if ( len > size )
			len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    7368:	1898      	adds	r0, r3, r2
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if ( len > size )
			len = size;
		dest = tx_packet->buf + tx_packet->index;
    736a:	440b      	add	r3, r1
		tx_packet->index += len;
    736c:	8048      	strh	r0, [r1, #2]
		size -= len;
    736e:	1aa4      	subs	r4, r4, r2
    7370:	3307      	adds	r3, #7
    7372:	eb08 0702 	add.w	r7, r8, r2
		while ( len-- > 0 )
    7376:	45b8      	cmp	r8, r7
    7378:	d004      	beq.n	7384 <usb_serial_write+0x94>
			*dest++ = *src++;
    737a:	f818 2b01 	ldrb.w	r2, [r8], #1
    737e:	f803 2f01 	strb.w	r2, [r3, #1]!
    7382:	e7f8      	b.n	7376 <usb_serial_write+0x86>
		if ( tx_packet->index >= CDC_TX_SIZE )
    7384:	884b      	ldrh	r3, [r1, #2]
    7386:	2b3f      	cmp	r3, #63	; 0x3f
    7388:	d906      	bls.n	7398 <usb_serial_write+0xa8>
		{
			tx_packet->len = CDC_TX_SIZE;
    738a:	2340      	movs	r3, #64	; 0x40
    738c:	800b      	strh	r3, [r1, #0]
			usb_tx( CDC_TX_ENDPOINT, tx_packet );
    738e:	2005      	movs	r0, #5
    7390:	f7ff f886 	bl	64a0 <usb_tx>
			tx_packet = NULL;
    7394:	2300      	movs	r3, #0
    7396:	6033      	str	r3, [r6, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    7398:	4b08      	ldr	r3, [pc, #32]	; (73bc <usb_serial_write+0xcc>)
    739a:	2205      	movs	r2, #5
    739c:	701a      	strb	r2, [r3, #0]
    739e:	46b8      	mov	r8, r7
    73a0:	e7ad      	b.n	72fe <usb_serial_write+0xe>
	}
	tx_noautoflush = 0;
    73a2:	702c      	strb	r4, [r5, #0]
	return 0;
    73a4:	4620      	mov	r0, r4
}
    73a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    73aa:	bf00      	nop
    73ac:	1fff94bb 	.word	0x1fff94bb
    73b0:	1fff94bc 	.word	0x1fff94bc
    73b4:	1fff94b6 	.word	0x1fff94b6
    73b8:	1fff94c0 	.word	0x1fff94c0
    73bc:	1fff94ba 	.word	0x1fff94ba

000073c0 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback()
{
    73c0:	b538      	push	{r3, r4, r5, lr}
	if ( tx_noautoflush )
    73c2:	4b0e      	ldr	r3, [pc, #56]	; (73fc <usb_serial_flush_callback+0x3c>)
    73c4:	781b      	ldrb	r3, [r3, #0]
    73c6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    73ca:	b9ab      	cbnz	r3, 73f8 <usb_serial_flush_callback+0x38>
		return;
	if ( tx_packet )
    73cc:	4c0c      	ldr	r4, [pc, #48]	; (7400 <usb_serial_flush_callback+0x40>)
    73ce:	6821      	ldr	r1, [r4, #0]
    73d0:	b131      	cbz	r1, 73e0 <usb_serial_flush_callback+0x20>
	{
		tx_packet->len = tx_packet->index;
    73d2:	884b      	ldrh	r3, [r1, #2]
    73d4:	800b      	strh	r3, [r1, #0]
		usb_tx( CDC_TX_ENDPOINT, tx_packet );
    73d6:	2005      	movs	r0, #5
    73d8:	f7ff f862 	bl	64a0 <usb_tx>
		tx_packet = NULL;
    73dc:	6025      	str	r5, [r4, #0]
    73de:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
    73e0:	f7ff fec0 	bl	7164 <usb_malloc>
		if ( tx )
    73e4:	4601      	mov	r1, r0
    73e6:	b120      	cbz	r0, 73f2 <usb_serial_flush_callback+0x32>
		{
			usb_tx( CDC_TX_ENDPOINT, tx );
    73e8:	2005      	movs	r0, #5
		else
		{
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    73ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if ( tx )
		{
			usb_tx( CDC_TX_ENDPOINT, tx );
    73ee:	f7ff b857 	b.w	64a0 <usb_tx>
		}
		else
		{
			usb_cdc_transmit_flush_timer = 1;
    73f2:	4b04      	ldr	r3, [pc, #16]	; (7404 <usb_serial_flush_callback+0x44>)
    73f4:	2201      	movs	r2, #1
    73f6:	701a      	strb	r2, [r3, #0]
    73f8:	bd38      	pop	{r3, r4, r5, pc}
    73fa:	bf00      	nop
    73fc:	1fff94bb 	.word	0x1fff94bb
    7400:	1fff94bc 	.word	0x1fff94bc
    7404:	1fff94ba 	.word	0x1fff94ba

00007408 <cliFunc_clear>:

// ----- CLI Command Functions -----

void cliFunc_clear( char* args)
{
	print("\033[2J\033[H\r"); // Erases the whole screen
    7408:	4801      	ldr	r0, [pc, #4]	; (7410 <cliFunc_clear+0x8>)
    740a:	f000 bbcd 	b.w	7ba8 <_print>
    740e:	bf00      	nop
    7410:	0000bd33 	.word	0x0000bd33

00007414 <cliFunc_reload>:
	CLILEDState ^= 1 << 1; // Toggle between 0 and 1
	errorLED( CLILEDState ); // Enable/Disable error LED
}

void cliFunc_reload( char* args )
{
    7414:	b508      	push	{r3, lr}
	if ( flashModeEnabled_define == 0 )
	{
		print( NL );
    7416:	4805      	ldr	r0, [pc, #20]	; (742c <cliFunc_reload+0x18>)
    7418:	f000 fbc6 	bl	7ba8 <_print>
		warn_print("flashModeEnabled not set, cancelling firmware reload...");
    741c:	4804      	ldr	r0, [pc, #16]	; (7430 <cliFunc_reload+0x1c>)
    741e:	f000 fbc3 	bl	7ba8 <_print>
		info_msg("Set flashModeEnabled to 1 in your kll configuration.");
    7422:	4804      	ldr	r0, [pc, #16]	; (7434 <cliFunc_reload+0x20>)
		return;
	}

	// Request to output module to be set into firmware reload mode
	Output_firmwareReload();
}
    7424:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if ( flashModeEnabled_define == 0 )
	{
		print( NL );
		warn_print("flashModeEnabled not set, cancelling firmware reload...");
		info_msg("Set flashModeEnabled to 1 in your kll configuration.");
    7428:	f000 bbbe 	b.w	7ba8 <_print>
    742c:	0000bc21 	.word	0x0000bc21
    7430:	0000ab1e 	.word	0x0000ab1e
    7434:	0000ab6d 	.word	0x0000ab6d

00007438 <cliFunc_reset>:
	Output_firmwareReload();
}

void cliFunc_reset( char* args )
{
	print("\033c"); // Resets the terminal
    7438:	4801      	ldr	r0, [pc, #4]	; (7440 <cliFunc_reset+0x8>)
    743a:	f000 bbb5 	b.w	7ba8 <_print>
    743e:	bf00      	nop
    7440:	0000bd3c 	.word	0x0000bd3c

00007444 <cliFunc_help>:
		CLIHexDebugMode = 1;
	}
}

void cliFunc_help( char* args )
{
    7444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// Scan array of dictionaries and print every description
	//  (no alphabetical here, too much processing/memory to sort...)
	for ( uint8_t dict = 0; dict < CLIDictionariesUsed; dict++ )
    7448:	2700      	movs	r7, #0
    744a:	4b20      	ldr	r3, [pc, #128]	; (74cc <cliFunc_help+0x88>)
    744c:	781b      	ldrb	r3, [r3, #0]
    744e:	b2fd      	uxtb	r5, r7
    7450:	42ab      	cmp	r3, r5
    7452:	d938      	bls.n	74c6 <cliFunc_help+0x82>
	{
		// Print the name of each dictionary as a title
		print( NL "\033[1;32m" );
    7454:	481e      	ldr	r0, [pc, #120]	; (74d0 <cliFunc_help+0x8c>)
    7456:	f000 fba7 	bl	7ba8 <_print>
		_print( CLIDictNames[dict] ); // This print is requride by AVR (flash)
    745a:	4b1e      	ldr	r3, [pc, #120]	; (74d4 <cliFunc_help+0x90>)
    745c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    7460:	f000 fba2 	bl	7ba8 <_print>
		print( "\033[0m" NL );
    7464:	481c      	ldr	r0, [pc, #112]	; (74d8 <cliFunc_help+0x94>)
    7466:	f000 fb9f 	bl	7ba8 <_print>

		// Parse each cmd/description until a null command entry is found
		for ( uint8_t cmd = 0; CLIDict[dict][cmd].name != 0; cmd++ )
    746a:	f04f 0900 	mov.w	r9, #0
    746e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 74f0 <cliFunc_help+0xac>
    7472:	fa5f f389 	uxtb.w	r3, r9
    7476:	260c      	movs	r6, #12
    7478:	435e      	muls	r6, r3
    747a:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
    747e:	5999      	ldr	r1, [r3, r6]
    7480:	b1f9      	cbz	r1, 74c2 <cliFunc_help+0x7e>
		{
			dPrintStrs(" \033[35m", CLIDict[dict][cmd].name, "\033[0m");
    7482:	4816      	ldr	r0, [pc, #88]	; (74dc <cliFunc_help+0x98>)
    7484:	4a16      	ldr	r2, [pc, #88]	; (74e0 <cliFunc_help+0x9c>)
    7486:	4b17      	ldr	r3, [pc, #92]	; (74e4 <cliFunc_help+0xa0>)
    7488:	f000 fb74 	bl	7b74 <printstrs>

			// Determine number of spaces to tab by the length of the command and TabAlign
			uint8_t padLength = CLIEntryTabAlign - lenStr( (char*)CLIDict[dict][cmd].name );
    748c:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
    7490:	5998      	ldr	r0, [r3, r6]
    7492:	f000 fb8b 	bl	7bac <lenStr>
    7496:	f1c0 000d 	rsb	r0, r0, #13
    749a:	b2c4      	uxtb	r4, r0
			while ( padLength-- > 0 )
    749c:	b12c      	cbz	r4, 74aa <cliFunc_help+0x66>
				print(" ");
    749e:	4812      	ldr	r0, [pc, #72]	; (74e8 <cliFunc_help+0xa4>)
    74a0:	3c01      	subs	r4, #1
    74a2:	f000 fb81 	bl	7ba8 <_print>
    74a6:	b2e4      	uxtb	r4, r4
    74a8:	e7f8      	b.n	749c <cliFunc_help+0x58>

			_print( CLIDict[dict][cmd].description ); // This print is required by AVR (flash)
    74aa:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
    74ae:	441e      	add	r6, r3
    74b0:	f109 0901 	add.w	r9, r9, #1
    74b4:	6870      	ldr	r0, [r6, #4]
    74b6:	f000 fb77 	bl	7ba8 <_print>
			print( NL );
    74ba:	480c      	ldr	r0, [pc, #48]	; (74ec <cliFunc_help+0xa8>)
    74bc:	f000 fb74 	bl	7ba8 <_print>
    74c0:	e7d5      	b.n	746e <cliFunc_help+0x2a>
    74c2:	3701      	adds	r7, #1
    74c4:	e7c1      	b.n	744a <cliFunc_help+0x6>
		}
	}
}
    74c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    74ca:	bf00      	nop
    74cc:	1fff94cf 	.word	0x1fff94cf
    74d0:	0000bd3f 	.word	0x0000bd3f
    74d4:	1fff994c 	.word	0x1fff994c
    74d8:	0000bd49 	.word	0x0000bd49
    74dc:	0000bd50 	.word	0x0000bd50
    74e0:	0000ac7c 	.word	0x0000ac7c
    74e4:	0000bc6a 	.word	0x0000bc6a
    74e8:	0000852a 	.word	0x0000852a
    74ec:	0000bc21 	.word	0x0000bc21
    74f0:	1fff9920 	.word	0x1fff9920

000074f4 <cliFunc_led>:

void cliFunc_led( char* args )
{
	CLILEDState ^= 1 << 1; // Toggle between 0 and 1
    74f4:	4b03      	ldr	r3, [pc, #12]	; (7504 <cliFunc_led+0x10>)
    74f6:	7818      	ldrb	r0, [r3, #0]
    74f8:	f080 0002 	eor.w	r0, r0, #2
    74fc:	7018      	strb	r0, [r3, #0]
	errorLED( CLILEDState ); // Enable/Disable error LED
    74fe:	f000 bb2b 	b.w	7b58 <errorLED>
    7502:	bf00      	nop
    7504:	1fff94ce 	.word	0x1fff94ce

00007508 <cliFunc_restart>:
}

void cliFunc_restart( char* args )
{
	// Trigger an overall software reset
	Output_softReset();
    7508:	f7fe befc 	b.w	6304 <Output_softReset>

0000750c <cliFunc_version>:
}

void cliFunc_version( char* args )
{
    750c:	b508      	push	{r3, lr}
	print( NL );
    750e:	4821      	ldr	r0, [pc, #132]	; (7594 <cliFunc_version+0x88>)
    7510:	f000 fb4a 	bl	7ba8 <_print>
	print( " \033[1mRevision:\033[0m      " CLI_Revision       NL );
    7514:	4820      	ldr	r0, [pc, #128]	; (7598 <cliFunc_version+0x8c>)
    7516:	f000 fb47 	bl	7ba8 <_print>
	print( " \033[1mBranch:\033[0m        " CLI_Branch         NL );
    751a:	4820      	ldr	r0, [pc, #128]	; (759c <cliFunc_version+0x90>)
    751c:	f000 fb44 	bl	7ba8 <_print>
	print( " \033[1mTree Status:\033[0m   " CLI_ModifiedStatus CLI_ModifiedFiles NL );
    7520:	481f      	ldr	r0, [pc, #124]	; (75a0 <cliFunc_version+0x94>)
    7522:	f000 fb41 	bl	7ba8 <_print>
	print( " \033[1mRepo Origin:\033[0m   " CLI_RepoOrigin     NL );
    7526:	481f      	ldr	r0, [pc, #124]	; (75a4 <cliFunc_version+0x98>)
    7528:	f000 fb3e 	bl	7ba8 <_print>
	print( " \033[1mCommit Date:\033[0m   " CLI_CommitDate     NL );
    752c:	481e      	ldr	r0, [pc, #120]	; (75a8 <cliFunc_version+0x9c>)
    752e:	f000 fb3b 	bl	7ba8 <_print>
	print( " \033[1mCommit Author:\033[0m " CLI_CommitAuthor   NL );
    7532:	481e      	ldr	r0, [pc, #120]	; (75ac <cliFunc_version+0xa0>)
    7534:	f000 fb38 	bl	7ba8 <_print>
	print( " \033[1mBuild Date:\033[0m    " CLI_BuildDate      NL );
    7538:	481d      	ldr	r0, [pc, #116]	; (75b0 <cliFunc_version+0xa4>)
    753a:	f000 fb35 	bl	7ba8 <_print>
	print( " \033[1mBuild OS:\033[0m      " CLI_BuildOS        NL );
    753e:	481d      	ldr	r0, [pc, #116]	; (75b4 <cliFunc_version+0xa8>)
    7540:	f000 fb32 	bl	7ba8 <_print>
	print( " \033[1mArchitecture:\033[0m  " CLI_Arch           NL );
    7544:	481c      	ldr	r0, [pc, #112]	; (75b8 <cliFunc_version+0xac>)
    7546:	f000 fb2f 	bl	7ba8 <_print>
	print( " \033[1mChip:\033[0m          " CLI_Chip           NL );
    754a:	481c      	ldr	r0, [pc, #112]	; (75bc <cliFunc_version+0xb0>)
    754c:	f000 fb2c 	bl	7ba8 <_print>
	print( " \033[1mCPU:\033[0m           " CLI_CPU            NL );
    7550:	481b      	ldr	r0, [pc, #108]	; (75c0 <cliFunc_version+0xb4>)
    7552:	f000 fb29 	bl	7ba8 <_print>
	print( " \033[1mDevice:\033[0m        " CLI_Device         NL );
    7556:	481b      	ldr	r0, [pc, #108]	; (75c4 <cliFunc_version+0xb8>)
    7558:	f000 fb26 	bl	7ba8 <_print>
	print( " \033[1mModules:\033[0m       " CLI_Modules        NL );
    755c:	481a      	ldr	r0, [pc, #104]	; (75c8 <cliFunc_version+0xbc>)
    755e:	f000 fb23 	bl	7ba8 <_print>
#if defined(_mk20dx128_) || defined(_mk20dx128vlf5_) || defined(_mk20dx256_) || defined(_mk20dx256vlh7_)
	print( " \033[1mUnique Id:\033[0m     " );
    7562:	481a      	ldr	r0, [pc, #104]	; (75cc <cliFunc_version+0xc0>)
    7564:	f000 fb20 	bl	7ba8 <_print>
	printHex32_op( SIM_UIDH, 4 );
    7568:	4b19      	ldr	r3, [pc, #100]	; (75d0 <cliFunc_version+0xc4>)
    756a:	2104      	movs	r1, #4
    756c:	6818      	ldr	r0, [r3, #0]
    756e:	f000 fbf5 	bl	7d5c <printHex32_op>
	printHex32_op( SIM_UIDMH, 4 );
    7572:	4b18      	ldr	r3, [pc, #96]	; (75d4 <cliFunc_version+0xc8>)
    7574:	2104      	movs	r1, #4
    7576:	6818      	ldr	r0, [r3, #0]
    7578:	f000 fbf0 	bl	7d5c <printHex32_op>
	printHex32_op( SIM_UIDML, 4 );
    757c:	4b16      	ldr	r3, [pc, #88]	; (75d8 <cliFunc_version+0xcc>)
    757e:	2104      	movs	r1, #4
    7580:	6818      	ldr	r0, [r3, #0]
    7582:	f000 fbeb 	bl	7d5c <printHex32_op>
	printHex32_op( SIM_UIDL, 4 );
    7586:	4b15      	ldr	r3, [pc, #84]	; (75dc <cliFunc_version+0xd0>)
    7588:	2104      	movs	r1, #4
    758a:	6818      	ldr	r0, [r3, #0]
#elif defined(_at90usb162_) || defined(_atmega32u4_) || defined(_at90usb646_) || defined(_at90usb1286_)
#else
#error "No unique id defined."
#endif
}
    758c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#if defined(_mk20dx128_) || defined(_mk20dx128vlf5_) || defined(_mk20dx256_) || defined(_mk20dx256vlh7_)
	print( " \033[1mUnique Id:\033[0m     " );
	printHex32_op( SIM_UIDH, 4 );
	printHex32_op( SIM_UIDMH, 4 );
	printHex32_op( SIM_UIDML, 4 );
	printHex32_op( SIM_UIDL, 4 );
    7590:	f000 bbe4 	b.w	7d5c <printHex32_op>
    7594:	0000bc21 	.word	0x0000bc21
    7598:	0000bd57 	.word	0x0000bd57
    759c:	0000bd9a 	.word	0x0000bd9a
    75a0:	0000bdbb 	.word	0x0000bdbb
    75a4:	0000e8a8 	.word	0x0000e8a8
    75a8:	0000e8ed 	.word	0x0000e8ed
    75ac:	0000e921 	.word	0x0000e921
    75b0:	0000e957 	.word	0x0000e957
    75b4:	0000e98b 	.word	0x0000e98b
    75b8:	0000e9b3 	.word	0x0000e9b3
    75bc:	0000e9d1 	.word	0x0000e9d1
    75c0:	0000e9f9 	.word	0x0000e9f9
    75c4:	0000ea1d 	.word	0x0000ea1d
    75c8:	0000ea40 	.word	0x0000ea40
    75cc:	0000eaa1 	.word	0x0000eaa1
    75d0:	40048054 	.word	0x40048054
    75d4:	40048058 	.word	0x40048058
    75d8:	4004805c 	.word	0x4004805c
    75dc:	40048060 	.word	0x40048060

000075e0 <cliFunc_cliDebug>:
{
	print("\033[2J\033[H\r"); // Erases the whole screen
}

void cliFunc_cliDebug( char* args )
{
    75e0:	b510      	push	{r4, lr}
	// Toggle Hex Debug Mode
	if ( CLIHexDebugMode )
    75e2:	4c09      	ldr	r4, [pc, #36]	; (7608 <cliFunc_cliDebug+0x28>)
	{
		print( NL );
    75e4:	4809      	ldr	r0, [pc, #36]	; (760c <cliFunc_cliDebug+0x2c>)
}

void cliFunc_cliDebug( char* args )
{
	// Toggle Hex Debug Mode
	if ( CLIHexDebugMode )
    75e6:	7823      	ldrb	r3, [r4, #0]
    75e8:	b133      	cbz	r3, 75f8 <cliFunc_cliDebug+0x18>
	{
		print( NL );
    75ea:	f000 fadd 	bl	7ba8 <_print>
		info_print("Hex debug mode disabled...");
    75ee:	4808      	ldr	r0, [pc, #32]	; (7610 <cliFunc_cliDebug+0x30>)
    75f0:	f000 fada 	bl	7ba8 <_print>
		CLIHexDebugMode = 0;
    75f4:	2300      	movs	r3, #0
    75f6:	e005      	b.n	7604 <cliFunc_cliDebug+0x24>
	}
	else
	{
		print( NL );
    75f8:	f000 fad6 	bl	7ba8 <_print>
		info_print("Hex debug mode enabled...");
    75fc:	4805      	ldr	r0, [pc, #20]	; (7614 <cliFunc_cliDebug+0x34>)
    75fe:	f000 fad3 	bl	7ba8 <_print>
		CLIHexDebugMode = 1;
    7602:	2301      	movs	r3, #1
    7604:	7023      	strb	r3, [r4, #0]
    7606:	bd10      	pop	{r4, pc}
    7608:	1fff94cc 	.word	0x1fff94cc
    760c:	0000bc21 	.word	0x0000bc21
    7610:	0000eaba 	.word	0x0000eaba
    7614:	0000eae9 	.word	0x0000eae9

00007618 <CLI_argumentIsolation>:
// Takes a string, returns two pointers
//  One to the first non-space character
//  The second to the next argument (first NULL if there isn't an argument). delimited by a space
//  Places a NULL at the first space after the first argument
void CLI_argumentIsolation( char* string, char** first, char** second )
{
    7618:	b530      	push	{r4, r5, lr}
	// Mark out the first argument
	// This is done by finding the first space after a list of non-spaces and setting it NULL
	char* cmdPtr = string - 1;
    761a:	3801      	subs	r0, #1
	while ( *++cmdPtr == ' ' ); // Skips leading spaces, and points to first character of cmd
    761c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    7620:	2b20      	cmp	r3, #32
    7622:	d0fb      	beq.n	761c <CLI_argumentIsolation+0x4>

	// Locates first space delimiter
	char* argPtr = cmdPtr + 1;
    7624:	1c45      	adds	r5, r0, #1
    7626:	462b      	mov	r3, r5
    7628:	3501      	adds	r5, #1
	while ( *argPtr != ' ' && *argPtr != '\0' )
    762a:	781c      	ldrb	r4, [r3, #0]
    762c:	f014 04df 	ands.w	r4, r4, #223	; 0xdf
    7630:	d1f9      	bne.n	7626 <CLI_argumentIsolation+0xe>
		argPtr++;

	// Point to the first character of args or a NULL (no args) and set the space delimiter as a NULL
	(++argPtr)[-1] = '\0';
    7632:	f803 4b01 	strb.w	r4, [r3], #1

	// Set return variables
	*first = cmdPtr;
    7636:	6008      	str	r0, [r1, #0]
	*second = argPtr;
    7638:	6013      	str	r3, [r2, #0]
    763a:	bd30      	pop	{r4, r5, pc}

0000763c <CLI_commandLookup>:
}

// Scans the CLILineBuffer for any valid commands
void CLI_commandLookup()
{
    763c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
    7640:	4b22      	ldr	r3, [pc, #136]	; (76cc <CLI_commandLookup+0x90>)
    7642:	781b      	ldrb	r3, [r3, #0]
	*second = argPtr;
}

// Scans the CLILineBuffer for any valid commands
void CLI_commandLookup()
{
    7644:	b089      	sub	sp, #36	; 0x24
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
    7646:	2b00      	cmp	r3, #0
    7648:	d03c      	beq.n	76c4 <CLI_commandLookup+0x88>
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    764a:	4d21      	ldr	r5, [pc, #132]	; (76d0 <CLI_commandLookup+0x94>)
    764c:	2400      	movs	r4, #0

	// Retrieve pointers to command and beginning of arguments
	// Places a NULL at the first space after the command
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );
    764e:	4628      	mov	r0, r5
    7650:	a906      	add	r1, sp, #24
    7652:	aa07      	add	r2, sp, #28
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    7654:	54ec      	strb	r4, [r5, r3]

	// Retrieve pointers to command and beginning of arguments
	// Places a NULL at the first space after the command
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );
    7656:	f7ff ffdf 	bl	7618 <CLI_argumentIsolation>
    765a:	46a8      	mov	r8, r5

	// Scan array of dictionaries for a valid command match
	for ( uint8_t dict = 0; dict < CLIDictionariesUsed; dict++ )
    765c:	4b1d      	ldr	r3, [pc, #116]	; (76d4 <CLI_commandLookup+0x98>)
    765e:	781b      	ldrb	r3, [r3, #0]
    7660:	b2e6      	uxtb	r6, r4
    7662:	42b3      	cmp	r3, r6
    7664:	d919      	bls.n	769a <CLI_commandLookup+0x5e>
    7666:	2700      	movs	r7, #0
	{
		// Parse each cmd until a null command entry is found, or an argument match
		for ( uint8_t cmd = 0; CLIDict[dict][cmd].name != 0; cmd++ )
    7668:	f8df 9090 	ldr.w	r9, [pc, #144]	; 76fc <CLI_commandLookup+0xc0>
    766c:	230c      	movs	r3, #12
    766e:	b2fd      	uxtb	r5, r7
    7670:	435d      	muls	r5, r3
    7672:	f859 3026 	ldr.w	r3, [r9, r6, lsl #2]
    7676:	5959      	ldr	r1, [r3, r5]
    7678:	b169      	cbz	r1, 7696 <CLI_commandLookup+0x5a>
		{
			// Compare the first argument and each command entry
			if ( eqStr( cmdPtr, (char*)CLIDict[dict][cmd].name ) == -1 )
    767a:	9806      	ldr	r0, [sp, #24]
    767c:	f000 fb79 	bl	7d72 <eqStr>
    7680:	3001      	adds	r0, #1
    7682:	f107 0701 	add.w	r7, r7, #1
    7686:	d1ef      	bne.n	7668 <CLI_commandLookup+0x2c>
			{
				// Run the specified command function pointer
				//   argPtr is already pointing at the first character of the arguments
				(*(void (*)(char*))CLIDict[dict][cmd].function)( argPtr );
    7688:	f859 3026 	ldr.w	r3, [r9, r6, lsl #2]
    768c:	9807      	ldr	r0, [sp, #28]
    768e:	441d      	add	r5, r3
    7690:	68ab      	ldr	r3, [r5, #8]
    7692:	4798      	blx	r3

				return;
    7694:	e016      	b.n	76c4 <CLI_commandLookup+0x88>
    7696:	3401      	adds	r4, #1
    7698:	e7e0      	b.n	765c <CLI_commandLookup+0x20>
			}
		}
	}

	// No match for the command...
	print( NL );
    769a:	4c0f      	ldr	r4, [pc, #60]	; (76d8 <CLI_commandLookup+0x9c>)
    769c:	4620      	mov	r0, r4
    769e:	f000 fa83 	bl	7ba8 <_print>
	erro_dPrint("\"", CLILineBuffer, "\" is not a valid command...type \033[35mhelp\033[0m");
    76a2:	4b0e      	ldr	r3, [pc, #56]	; (76dc <CLI_commandLookup+0xa0>)
    76a4:	9300      	str	r3, [sp, #0]
    76a6:	4b0e      	ldr	r3, [pc, #56]	; (76e0 <CLI_commandLookup+0xa4>)
    76a8:	9301      	str	r3, [sp, #4]
    76aa:	4b0e      	ldr	r3, [pc, #56]	; (76e4 <CLI_commandLookup+0xa8>)
    76ac:	9303      	str	r3, [sp, #12]
    76ae:	4b0e      	ldr	r3, [pc, #56]	; (76e8 <CLI_commandLookup+0xac>)
    76b0:	9305      	str	r3, [sp, #20]
    76b2:	f8cd 8008 	str.w	r8, [sp, #8]
    76b6:	9404      	str	r4, [sp, #16]
    76b8:	480c      	ldr	r0, [pc, #48]	; (76ec <CLI_commandLookup+0xb0>)
    76ba:	490d      	ldr	r1, [pc, #52]	; (76f0 <CLI_commandLookup+0xb4>)
    76bc:	4a0d      	ldr	r2, [pc, #52]	; (76f4 <CLI_commandLookup+0xb8>)
    76be:	4b0e      	ldr	r3, [pc, #56]	; (76f8 <CLI_commandLookup+0xbc>)
    76c0:	f000 fa58 	bl	7b74 <printstrs>
}
    76c4:	b009      	add	sp, #36	; 0x24
    76c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    76ca:	bf00      	nop
    76cc:	1fff9974 	.word	0x1fff9974
    76d0:	1fff98b8 	.word	0x1fff98b8
    76d4:	1fff94cf 	.word	0x1fff94cf
    76d8:	0000bc21 	.word	0x0000bc21
    76dc:	000093cc 	.word	0x000093cc
    76e0:	0000eb27 	.word	0x0000eb27
    76e4:	0000eb29 	.word	0x0000eb29
    76e8:	0000bc6a 	.word	0x0000bc6a
    76ec:	0000eb17 	.word	0x0000eb17
    76f0:	0000eb1a 	.word	0x0000eb1a
    76f4:	0000ac7f 	.word	0x0000ac7f
    76f8:	0000eb21 	.word	0x0000eb21
    76fc:	1fff9920 	.word	0x1fff9920

00007700 <CLI_registerDictionary>:

// Registers a command dictionary with the CLI
void CLI_registerDictionary( const CLIDictItem *cmdDict, const char* dictName )
{
    7700:	b510      	push	{r4, lr}
	// Make sure this max limit of dictionaries hasn't been reached
	if ( CLIDictionariesUsed >= CLIMaxDictionaries )
    7702:	4a09      	ldr	r2, [pc, #36]	; (7728 <CLI_registerDictionary+0x28>)
    7704:	7813      	ldrb	r3, [r2, #0]
    7706:	2b09      	cmp	r3, #9
    7708:	d904      	bls.n	7714 <CLI_registerDictionary+0x14>
	{
		erro_print("Max number of dictionaries defined already...");
    770a:	4808      	ldr	r0, [pc, #32]	; (772c <CLI_registerDictionary+0x2c>)
	}

	// Add dictionary
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
}
    770c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void CLI_registerDictionary( const CLIDictItem *cmdDict, const char* dictName )
{
	// Make sure this max limit of dictionaries hasn't been reached
	if ( CLIDictionariesUsed >= CLIMaxDictionaries )
	{
		erro_print("Max number of dictionaries defined already...");
    7710:	f000 ba4a 	b.w	7ba8 <_print>
		return;
	}

	// Add dictionary
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
    7714:	4c06      	ldr	r4, [pc, #24]	; (7730 <CLI_registerDictionary+0x30>)
    7716:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
    771a:	1c59      	adds	r1, r3, #1
    771c:	7011      	strb	r1, [r2, #0]
    771e:	4a05      	ldr	r2, [pc, #20]	; (7734 <CLI_registerDictionary+0x34>)
    7720:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    7724:	bd10      	pop	{r4, pc}
    7726:	bf00      	nop
    7728:	1fff94cf 	.word	0x1fff94cf
    772c:	0000eb57 	.word	0x0000eb57
    7730:	1fff994c 	.word	0x1fff994c
    7734:	1fff9920 	.word	0x1fff9920

00007738 <CLI_init>:

// Initialize the CLI
inline void CLI_init()
{
	// Reset the Line Buffer
	CLILineBufferCurrent = 0;
    7738:	4b0e      	ldr	r3, [pc, #56]	; (7774 <CLI_init+0x3c>)

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    773a:	480f      	ldr	r0, [pc, #60]	; (7778 <CLI_init+0x40>)
	print("\033[1;34m:\033[0m "); // Blue bold prompt
}

// Initialize the CLI
inline void CLI_init()
{
    773c:	b510      	push	{r4, lr}
	// Reset the Line Buffer
	CLILineBufferCurrent = 0;
    773e:	2400      	movs	r4, #0
    7740:	701c      	strb	r4, [r3, #0]

	// History starts empty
	CLIHistoryHead = 0;
    7742:	4b0e      	ldr	r3, [pc, #56]	; (777c <CLI_init+0x44>)
    7744:	701c      	strb	r4, [r3, #0]
	CLIHistoryCurrent = 0;
    7746:	4b0e      	ldr	r3, [pc, #56]	; (7780 <CLI_init+0x48>)
    7748:	701c      	strb	r4, [r3, #0]
	CLIHistoryTail = 0;
    774a:	4b0e      	ldr	r3, [pc, #56]	; (7784 <CLI_init+0x4c>)
    774c:	701c      	strb	r4, [r3, #0]

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    774e:	f000 fa2b 	bl	7ba8 <_print>
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    7752:	480d      	ldr	r0, [pc, #52]	; (7788 <CLI_init+0x50>)
    7754:	f000 fa28 	bl	7ba8 <_print>

	// Set prompt
	prompt();

	// Register first dictionary
	CLIDictionariesUsed = 0;
    7758:	4b0c      	ldr	r3, [pc, #48]	; (778c <CLI_init+0x54>)
	CLI_registerDictionary( basicCLIDict, basicCLIDictName );
    775a:	480d      	ldr	r0, [pc, #52]	; (7790 <CLI_init+0x58>)
    775c:	490d      	ldr	r1, [pc, #52]	; (7794 <CLI_init+0x5c>)

	// Set prompt
	prompt();

	// Register first dictionary
	CLIDictionariesUsed = 0;
    775e:	701c      	strb	r4, [r3, #0]
	CLI_registerDictionary( basicCLIDict, basicCLIDictName );
    7760:	f7ff ffce 	bl	7700 <CLI_registerDictionary>

	// Initialize main LED
	init_errorLED();
    7764:	f000 f9ea 	bl	7b3c <init_errorLED>
	CLILEDState = 0;
    7768:	4b0b      	ldr	r3, [pc, #44]	; (7798 <CLI_init+0x60>)
    776a:	701c      	strb	r4, [r3, #0]

	// Hex debug mode is off by default
	CLIHexDebugMode = 0;
    776c:	4b0b      	ldr	r3, [pc, #44]	; (779c <CLI_init+0x64>)
    776e:	701c      	strb	r4, [r3, #0]
    7770:	bd10      	pop	{r4, pc}
    7772:	bf00      	nop
    7774:	1fff9974 	.word	0x1fff9974
    7778:	0000eb9c 	.word	0x0000eb9c
    777c:	1fff991d 	.word	0x1fff991d
    7780:	1fff94cd 	.word	0x1fff94cd
    7784:	1fff9948 	.word	0x1fff9948
    7788:	0000eba2 	.word	0x0000eba2
    778c:	1fff94cf 	.word	0x1fff94cf
    7790:	0000ec80 	.word	0x0000ec80
    7794:	0000ed82 	.word	0x0000ed82
    7798:	1fff94ce 	.word	0x1fff94ce
    779c:	1fff94cc 	.word	0x1fff94cc

000077a0 <CLI_tabCompletion>:
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
}

inline void CLI_tabCompletion()
{
    77a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
    77a4:	4d28      	ldr	r5, [pc, #160]	; (7848 <CLI_tabCompletion+0xa8>)
    77a6:	782b      	ldrb	r3, [r5, #0]
	CLIDictNames[CLIDictionariesUsed] = (char*)dictName;
	CLIDict[CLIDictionariesUsed++] = (CLIDictItem*)cmdDict;
}

inline void CLI_tabCompletion()
{
    77a8:	b085      	sub	sp, #20
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
    77aa:	2b00      	cmp	r3, #0
    77ac:	d048      	beq.n	7840 <CLI_tabCompletion+0xa0>
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    77ae:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 785c <CLI_tabCompletion+0xbc>
    77b2:	2400      	movs	r4, #0

	// Retrieve pointers to command and beginning of arguments
	// Places a NULL at the first space after the command
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );
    77b4:	4640      	mov	r0, r8
    77b6:	a902      	add	r1, sp, #8
    77b8:	aa03      	add	r2, sp, #12
	// Ignore command if buffer is 0 length
	if ( CLILineBufferCurrent == 0 )
		return;

	// Set the last+1 character of the buffer to NULL for string processing
	CLILineBuffer[CLILineBufferCurrent] = '\0';
    77ba:	f808 4003 	strb.w	r4, [r8, r3]

	// Retrieve pointers to command and beginning of arguments
	// Places a NULL at the first space after the command
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );
    77be:	f7ff ff2b 	bl	7618 <CLI_argumentIsolation>

	// Tab match pointer
	char* tabMatch = 0;
	uint8_t matches = 0;
    77c2:	4627      	mov	r7, r4
	char* cmdPtr;
	char* argPtr;
	CLI_argumentIsolation( CLILineBuffer, &cmdPtr, &argPtr );

	// Tab match pointer
	char* tabMatch = 0;
    77c4:	4626      	mov	r6, r4
    77c6:	46c3      	mov	fp, r8
	uint8_t matches = 0;

	// Scan array of dictionaries for a valid command match
	for ( uint8_t dict = 0; dict < CLIDictionariesUsed; dict++ )
    77c8:	4b20      	ldr	r3, [pc, #128]	; (784c <CLI_tabCompletion+0xac>)
    77ca:	781b      	ldrb	r3, [r3, #0]
    77cc:	fa5f fa84 	uxtb.w	sl, r4
    77d0:	4553      	cmp	r3, sl
    77d2:	d91e      	bls.n	7812 <CLI_tabCompletion+0x72>
    77d4:	f04f 0900 	mov.w	r9, #0
	{
		// Parse each cmd until a null command entry is found, or an argument match
		for ( uint8_t cmd = 0; CLIDict[dict][cmd].name != 0; cmd++ )
    77d8:	fa5f f389 	uxtb.w	r3, r9
    77dc:	f04f 080c 	mov.w	r8, #12
    77e0:	fb08 f803 	mul.w	r8, r8, r3
    77e4:	4b1a      	ldr	r3, [pc, #104]	; (7850 <CLI_tabCompletion+0xb0>)
    77e6:	f853 202a 	ldr.w	r2, [r3, sl, lsl #2]
    77ea:	f852 1008 	ldr.w	r1, [r2, r8]
    77ee:	b171      	cbz	r1, 780e <CLI_tabCompletion+0x6e>
		{
			// Compare the first argument piece to each command entry to see if it is "like"
			// NOTE: To save on processing, we only care about the commands and ignore the arguments
			//       If there are arguments, and a valid tab match is found, buffer is cleared (args lost)
			//       Also ignores full matches
			if ( eqStr( cmdPtr, (char*)CLIDict[dict][cmd].name ) == 0 )
    77f0:	9802      	ldr	r0, [sp, #8]
    77f2:	9301      	str	r3, [sp, #4]
    77f4:	f000 fabd 	bl	7d72 <eqStr>
    77f8:	9b01      	ldr	r3, [sp, #4]
    77fa:	b928      	cbnz	r0, 7808 <CLI_tabCompletion+0x68>
			{
				// TODO Make list of commands if multiple matches
				matches++;
				tabMatch = (char*)CLIDict[dict][cmd].name;
    77fc:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
			//       If there are arguments, and a valid tab match is found, buffer is cleared (args lost)
			//       Also ignores full matches
			if ( eqStr( cmdPtr, (char*)CLIDict[dict][cmd].name ) == 0 )
			{
				// TODO Make list of commands if multiple matches
				matches++;
    7800:	3701      	adds	r7, #1
				tabMatch = (char*)CLIDict[dict][cmd].name;
    7802:	f853 6008 	ldr.w	r6, [r3, r8]
			//       If there are arguments, and a valid tab match is found, buffer is cleared (args lost)
			//       Also ignores full matches
			if ( eqStr( cmdPtr, (char*)CLIDict[dict][cmd].name ) == 0 )
			{
				// TODO Make list of commands if multiple matches
				matches++;
    7806:	b2ff      	uxtb	r7, r7
    7808:	f109 0901 	add.w	r9, r9, #1
    780c:	e7e4      	b.n	77d8 <CLI_tabCompletion+0x38>
    780e:	3401      	adds	r4, #1
    7810:	e7da      	b.n	77c8 <CLI_tabCompletion+0x28>
			}
		}
	}

	// Only tab complete if there was 1 match
	if ( matches == 1 )
    7812:	2f01      	cmp	r7, #1
    7814:	d114      	bne.n	7840 <CLI_tabCompletion+0xa0>
	{
		// Reset the buffer
		CLILineBufferCurrent = 0;
    7816:	2300      	movs	r3, #0

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    7818:	480e      	ldr	r0, [pc, #56]	; (7854 <CLI_tabCompletion+0xb4>)

	// Only tab complete if there was 1 match
	if ( matches == 1 )
	{
		// Reset the buffer
		CLILineBufferCurrent = 0;
    781a:	702b      	strb	r3, [r5, #0]

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    781c:	f000 f9c4 	bl	7ba8 <_print>
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    7820:	480d      	ldr	r0, [pc, #52]	; (7858 <CLI_tabCompletion+0xb8>)
    7822:	f000 f9c1 	bl	7ba8 <_print>

		// Reprint the prompt (automatically clears the line)
		prompt();

		// Display the command
		dPrint( tabMatch );
    7826:	4630      	mov	r0, r6
    7828:	f7fe fd64 	bl	62f4 <Output_putstr>

		// There are no index counts, so just copy the whole string to the input buffer
		while ( *tabMatch != '\0' )
    782c:	7833      	ldrb	r3, [r6, #0]
    782e:	b13b      	cbz	r3, 7840 <CLI_tabCompletion+0xa0>
		{
			CLILineBuffer[CLILineBufferCurrent++] = *tabMatch++;
    7830:	782b      	ldrb	r3, [r5, #0]
    7832:	1c5a      	adds	r2, r3, #1
    7834:	702a      	strb	r2, [r5, #0]
    7836:	f816 2b01 	ldrb.w	r2, [r6], #1
    783a:	f80b 2003 	strb.w	r2, [fp, r3]
    783e:	e7f5      	b.n	782c <CLI_tabCompletion+0x8c>
		}
	}
}
    7840:	b005      	add	sp, #20
    7842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7846:	bf00      	nop
    7848:	1fff9974 	.word	0x1fff9974
    784c:	1fff94cf 	.word	0x1fff94cf
    7850:	1fff9920 	.word	0x1fff9920
    7854:	0000eb9c 	.word	0x0000eb9c
    7858:	0000eba2 	.word	0x0000eba2
    785c:	1fff98b8 	.word	0x1fff98b8

00007860 <CLI_wrap>:

inline int CLI_wrap( int kX, int const kLowerBound, int const kUpperBound )
{
	int range_size = kUpperBound - kLowerBound + 1;

	if ( kX < kLowerBound )
    7860:	4288      	cmp	r0, r1
	}
}

inline int CLI_wrap( int kX, int const kLowerBound, int const kUpperBound )
{
	int range_size = kUpperBound - kLowerBound + 1;
    7862:	eba2 0201 	sub.w	r2, r2, r1

	if ( kX < kLowerBound )
		kX += range_size * ((kLowerBound - kX) / range_size + 1);
    7866:	bfb8      	it	lt
    7868:	1a0b      	sublt	r3, r1, r0
	}
}

inline int CLI_wrap( int kX, int const kLowerBound, int const kUpperBound )
{
	int range_size = kUpperBound - kLowerBound + 1;
    786a:	f102 0201 	add.w	r2, r2, #1

	if ( kX < kLowerBound )
		kX += range_size * ((kLowerBound - kX) / range_size + 1);
    786e:	bfbe      	ittt	lt
    7870:	fb93 f3f2 	sdivlt	r3, r3, r2
    7874:	fb03 2302 	mlalt	r3, r3, r2, r2
    7878:	18c0      	addlt	r0, r0, r3

	return kLowerBound + (kX - kLowerBound) % range_size;
    787a:	1a43      	subs	r3, r0, r1
    787c:	fb93 f0f2 	sdiv	r0, r3, r2
    7880:	fb02 3010 	mls	r0, r2, r0, r3
}
    7884:	4408      	add	r0, r1
    7886:	4770      	bx	lr

00007888 <CLI_saveHistory>:

inline void CLI_saveHistory( char *buff )
{
	if ( buff == NULL )
    7888:	b108      	cbz	r0, 788e <CLI_saveHistory+0x6>
    788a:	3801      	subs	r0, #1
    788c:	e006      	b.n	789c <CLI_saveHistory+0x14>
	{
		//clear the item
		CLIHistoryBuffer[ CLIHistoryTail ][ 0 ] = '\0';
    788e:	4b0e      	ldr	r3, [pc, #56]	; (78c8 <CLI_saveHistory+0x40>)
    7890:	781a      	ldrb	r2, [r3, #0]
    7892:	2364      	movs	r3, #100	; 0x64
    7894:	4353      	muls	r3, r2
    7896:	4a0d      	ldr	r2, [pc, #52]	; (78cc <CLI_saveHistory+0x44>)
    7898:	54d0      	strb	r0, [r2, r3]
		return;
    789a:	4770      	bx	lr
	}

        // Don't write empty lines to the history
        const char *cursor = buff;
        while (*cursor == ' ') { cursor++; } // advance past the leading whitespace
    789c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    78a0:	2b20      	cmp	r3, #32
    78a2:	d0fb      	beq.n	789c <CLI_saveHistory+0x14>
        if (*cursor == '\0') { return ; }
    78a4:	b17b      	cbz	r3, 78c6 <CLI_saveHistory+0x3e>

	// Copy the line to the history
	int i;
	for (i = 0; i < CLILineBufferCurrent; i++)
    78a6:	4b0a      	ldr	r3, [pc, #40]	; (78d0 <CLI_saveHistory+0x48>)
    78a8:	4a08      	ldr	r2, [pc, #32]	; (78cc <CLI_saveHistory+0x44>)
    78aa:	7819      	ldrb	r1, [r3, #0]
	{
		CLIHistoryBuffer[ CLIHistoryTail ][ i ] = CLILineBuffer[ i ];
    78ac:	4b06      	ldr	r3, [pc, #24]	; (78c8 <CLI_saveHistory+0x40>)
    78ae:	7818      	ldrb	r0, [r3, #0]
    78b0:	2364      	movs	r3, #100	; 0x64
    78b2:	fb00 2203 	mla	r2, r0, r3, r2
    78b6:	2300      	movs	r3, #0
        while (*cursor == ' ') { cursor++; } // advance past the leading whitespace
        if (*cursor == '\0') { return ; }

	// Copy the line to the history
	int i;
	for (i = 0; i < CLILineBufferCurrent; i++)
    78b8:	428b      	cmp	r3, r1
    78ba:	da04      	bge.n	78c6 <CLI_saveHistory+0x3e>
	{
		CLIHistoryBuffer[ CLIHistoryTail ][ i ] = CLILineBuffer[ i ];
    78bc:	4805      	ldr	r0, [pc, #20]	; (78d4 <CLI_saveHistory+0x4c>)
    78be:	5c18      	ldrb	r0, [r3, r0]
    78c0:	54d0      	strb	r0, [r2, r3]
        while (*cursor == ' ') { cursor++; } // advance past the leading whitespace
        if (*cursor == '\0') { return ; }

	// Copy the line to the history
	int i;
	for (i = 0; i < CLILineBufferCurrent; i++)
    78c2:	3301      	adds	r3, #1
    78c4:	e7f8      	b.n	78b8 <CLI_saveHistory+0x30>
    78c6:	4770      	bx	lr
    78c8:	1fff9948 	.word	0x1fff9948
    78cc:	1fff94d0 	.word	0x1fff94d0
    78d0:	1fff9974 	.word	0x1fff9974
    78d4:	1fff98b8 	.word	0x1fff98b8

000078d8 <CLI_retreiveHistory>:
		CLIHistoryBuffer[ CLIHistoryTail ][ i ] = CLILineBuffer[ i ];
	}
}

void CLI_retreiveHistory( int index )
{
    78d8:	b538      	push	{r3, r4, r5, lr}
	char *histMatch = CLIHistoryBuffer[ index ];
    78da:	4c0e      	ldr	r4, [pc, #56]	; (7914 <CLI_retreiveHistory+0x3c>)

	// Reset the buffer
	CLILineBufferCurrent = 0;
    78dc:	4d0e      	ldr	r5, [pc, #56]	; (7918 <CLI_retreiveHistory+0x40>)
	}
}

void CLI_retreiveHistory( int index )
{
	char *histMatch = CLIHistoryBuffer[ index ];
    78de:	2364      	movs	r3, #100	; 0x64
    78e0:	fb03 4400 	mla	r4, r3, r0, r4

	// Reset the buffer
	CLILineBufferCurrent = 0;
    78e4:	2300      	movs	r3, #0

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    78e6:	480d      	ldr	r0, [pc, #52]	; (791c <CLI_retreiveHistory+0x44>)
void CLI_retreiveHistory( int index )
{
	char *histMatch = CLIHistoryBuffer[ index ];

	// Reset the buffer
	CLILineBufferCurrent = 0;
    78e8:	702b      	strb	r3, [r5, #0]

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    78ea:	f000 f95d 	bl	7ba8 <_print>
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    78ee:	480c      	ldr	r0, [pc, #48]	; (7920 <CLI_retreiveHistory+0x48>)
    78f0:	f000 f95a 	bl	7ba8 <_print>

	// Reprint the prompt (automatically clears the line)
	prompt();

	// Display the command
	dPrint( histMatch );
    78f4:	4620      	mov	r0, r4
    78f6:	f7fe fcfd 	bl	62f4 <Output_putstr>

	// There are no index counts, so just copy the whole string to the input buffe
	CLILineBufferCurrent = 0;
	while ( *histMatch != '\0' )
    78fa:	4622      	mov	r2, r4
    78fc:	1b13      	subs	r3, r2, r4
    78fe:	f812 1b01 	ldrb.w	r1, [r2], #1
    7902:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    7906:	b111      	cbz	r1, 790e <CLI_retreiveHistory+0x36>
	{
		CLILineBuffer[ CLILineBufferCurrent++ ] = *histMatch++;
    7908:	4806      	ldr	r0, [pc, #24]	; (7924 <CLI_retreiveHistory+0x4c>)
    790a:	54c1      	strb	r1, [r0, r3]
    790c:	e7f6      	b.n	78fc <CLI_retreiveHistory+0x24>
    790e:	702b      	strb	r3, [r5, #0]
    7910:	bd38      	pop	{r3, r4, r5, pc}
    7912:	bf00      	nop
    7914:	1fff94d0 	.word	0x1fff94d0
    7918:	1fff9974 	.word	0x1fff9974
    791c:	0000eb9c 	.word	0x0000eb9c
    7920:	0000eba2 	.word	0x0000eba2
    7924:	1fff98b8 	.word	0x1fff98b8

00007928 <CLI_process>:
	CLIHexDebugMode = 0;
}

// Query the serial input buffer for any new characters
void CLI_process()
{
    7928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Current buffer position
	uint8_t prev_buf_pos = CLILineBufferCurrent;
    792a:	4d74      	ldr	r5, [pc, #464]	; (7afc <CLI_process+0x1d4>)
    792c:	782c      	ldrb	r4, [r5, #0]

	// Process each character while available
	while ( 1 )
	{
		// No more characters to process
		if ( Output_availablechar() == 0 )
    792e:	f7fe fcdd 	bl	62ec <Output_availablechar>
    7932:	b1a0      	cbz	r0, 795e <CLI_process+0x36>
			break;

		// Retrieve from output module
		char cur_char = (char)Output_getchar();
    7934:	f7fe fcdc 	bl	62f0 <Output_getchar>

		// Make sure buffer isn't full
		if ( CLILineBufferCurrent >= CLILineBufferMaxSize )
    7938:	782b      	ldrb	r3, [r5, #0]
    793a:	4e70      	ldr	r6, [pc, #448]	; (7afc <CLI_process+0x1d4>)
    793c:	2b63      	cmp	r3, #99	; 0x63
		// No more characters to process
		if ( Output_availablechar() == 0 )
			break;

		// Retrieve from output module
		char cur_char = (char)Output_getchar();
    793e:	b2c0      	uxtb	r0, r0

		// Make sure buffer isn't full
		if ( CLILineBufferCurrent >= CLILineBufferMaxSize )
    7940:	d908      	bls.n	7954 <CLI_process+0x2c>
		{
			print( NL );
    7942:	486f      	ldr	r0, [pc, #444]	; (7b00 <CLI_process+0x1d8>)
    7944:	f000 f930 	bl	7ba8 <_print>
			erro_print("Serial line buffer is full, dropping character and resetting...");
    7948:	486e      	ldr	r0, [pc, #440]	; (7b04 <CLI_process+0x1dc>)
    794a:	f000 f92d 	bl	7ba8 <_print>

			// Clear buffer
			CLILineBufferCurrent = 0;
    794e:	2300      	movs	r3, #0
    7950:	7033      	strb	r3, [r6, #0]
    7952:	e064      	b.n	7a1e <CLI_process+0xf6>

			return;
		}

		// Place into line buffer
		CLILineBuffer[CLILineBufferCurrent++] = cur_char;
    7954:	1c5a      	adds	r2, r3, #1
    7956:	7032      	strb	r2, [r6, #0]
    7958:	4a6b      	ldr	r2, [pc, #428]	; (7b08 <CLI_process+0x1e0>)
    795a:	54d0      	strb	r0, [r2, r3]
	}
    795c:	e7e7      	b.n	792e <CLI_process+0x6>

	// Display Hex Key Input if enabled
	if ( CLIHexDebugMode && CLILineBufferCurrent > prev_buf_pos )
    795e:	4b6b      	ldr	r3, [pc, #428]	; (7b0c <CLI_process+0x1e4>)
    7960:	781b      	ldrb	r3, [r3, #0]
    7962:	b30b      	cbz	r3, 79a8 <CLI_process+0x80>
    7964:	782b      	ldrb	r3, [r5, #0]
    7966:	42a3      	cmp	r3, r4
    7968:	d91e      	bls.n	79a8 <CLI_process+0x80>
	{
		print("\033[s\r\n"); // Save cursor position, and move to the next line
    796a:	4869      	ldr	r0, [pc, #420]	; (7b10 <CLI_process+0x1e8>)
    796c:	f000 f91c 	bl	7ba8 <_print>
		print("\033[2K");    // Erases the current line
    7970:	4868      	ldr	r0, [pc, #416]	; (7b14 <CLI_process+0x1ec>)
    7972:	f000 f919 	bl	7ba8 <_print>

		uint8_t pos = prev_buf_pos;
		while ( CLILineBufferCurrent > pos )
    7976:	4623      	mov	r3, r4
    7978:	782a      	ldrb	r2, [r5, #0]
    797a:	429a      	cmp	r2, r3
    797c:	d90b      	bls.n	7996 <CLI_process+0x6e>
		{
			printHex( CLILineBuffer[pos++] );
    797e:	4a62      	ldr	r2, [pc, #392]	; (7b08 <CLI_process+0x1e0>)
    7980:	1c5e      	adds	r6, r3, #1
    7982:	5cd0      	ldrb	r0, [r2, r3]
    7984:	2101      	movs	r1, #1
    7986:	f000 f9b1 	bl	7cec <printHex_op>
    798a:	b2f6      	uxtb	r6, r6
			print(" ");
    798c:	4862      	ldr	r0, [pc, #392]	; (7b18 <CLI_process+0x1f0>)
    798e:	f000 f90b 	bl	7ba8 <_print>
		print("\033[2K");    // Erases the current line

		uint8_t pos = prev_buf_pos;
		while ( CLILineBufferCurrent > pos )
		{
			printHex( CLILineBuffer[pos++] );
    7992:	4633      	mov	r3, r6
    7994:	e7f0      	b.n	7978 <CLI_process+0x50>
			print(" ");
		}

		print("\033[u"); // Restore cursor position
    7996:	4861      	ldr	r0, [pc, #388]	; (7b1c <CLI_process+0x1f4>)
    7998:	e04c      	b.n	7a34 <CLI_process+0x10c>

	// If buffer has changed, output to screen while there are still characters in the buffer not displayed
	while ( CLILineBufferCurrent > prev_buf_pos )
	{
		// Check for control characters
		switch ( CLILineBuffer[prev_buf_pos] )
    799a:	d856      	bhi.n	7a4a <CLI_process+0x122>
    799c:	2a08      	cmp	r2, #8
    799e:	d14c      	bne.n	7a3a <CLI_process+0x112>
		case 0x7F: // Backspace
			// TODO - Does not handle case for arrow editing (arrows disabled atm)
			CLILineBufferCurrent--; // Remove the backspace

			// If there are characters in the buffer
			if ( CLILineBufferCurrent > 0 )
    79a0:	2b01      	cmp	r3, #1
    79a2:	d144      	bne.n	7a2e <CLI_process+0x106>
			return;

		case 0x08:
		case 0x7F: // Backspace
			// TODO - Does not handle case for arrow editing (arrows disabled atm)
			CLILineBufferCurrent--; // Remove the backspace
    79a4:	2300      	movs	r3, #0
    79a6:	702b      	strb	r3, [r5, #0]

		print("\033[u"); // Restore cursor position
	}

	// If buffer has changed, output to screen while there are still characters in the buffer not displayed
	while ( CLILineBufferCurrent > prev_buf_pos )
    79a8:	782b      	ldrb	r3, [r5, #0]
    79aa:	4f54      	ldr	r7, [pc, #336]	; (7afc <CLI_process+0x1d4>)
    79ac:	42a3      	cmp	r3, r4
    79ae:	f240 80a4 	bls.w	7afa <CLI_process+0x1d2>
	{
		// Check for control characters
		switch ( CLILineBuffer[prev_buf_pos] )
    79b2:	4955      	ldr	r1, [pc, #340]	; (7b08 <CLI_process+0x1e0>)
    79b4:	5d0a      	ldrb	r2, [r1, r4]
    79b6:	2a0a      	cmp	r2, #10
    79b8:	460e      	mov	r6, r1
    79ba:	d1ee      	bne.n	799a <CLI_process+0x72>
		{
		// Enter
		case 0x0A: // LF
		case 0x0D: // CR
			CLILineBuffer[CLILineBufferCurrent - 1] = ' '; // Replace Enter with a space (resolves a bug in args)
    79bc:	441e      	add	r6, r3
    79be:	2220      	movs	r2, #32

			// Remove the space if there is no command
			if ( CLILineBufferCurrent == 1 )
    79c0:	2b01      	cmp	r3, #1
		switch ( CLILineBuffer[prev_buf_pos] )
		{
		// Enter
		case 0x0A: // LF
		case 0x0D: // CR
			CLILineBuffer[CLILineBufferCurrent - 1] = ' '; // Replace Enter with a space (resolves a bug in args)
    79c2:	f806 2c01 	strb.w	r2, [r6, #-1]

			// Remove the space if there is no command
			if ( CLILineBufferCurrent == 1 )
    79c6:	d025      	beq.n	7a14 <CLI_process+0xec>
				CLILineBufferCurrent--;
			}
			else
			{
				// Add the command to the history
				CLI_saveHistory( CLILineBuffer );
    79c8:	484f      	ldr	r0, [pc, #316]	; (7b08 <CLI_process+0x1e0>)
    79ca:	f7ff ff5d 	bl	7888 <CLI_saveHistory>

				// Process the current line buffer
				CLI_commandLookup();
    79ce:	f7ff fe35 	bl	763c <CLI_commandLookup>

				// Keep the array circular, discarding the older entries
				if ( CLIHistoryTail < CLIHistoryHead )
    79d2:	4a53      	ldr	r2, [pc, #332]	; (7b20 <CLI_process+0x1f8>)
    79d4:	4953      	ldr	r1, [pc, #332]	; (7b24 <CLI_process+0x1fc>)
    79d6:	7813      	ldrb	r3, [r2, #0]
    79d8:	7808      	ldrb	r0, [r1, #0]
    79da:	4283      	cmp	r3, r0
					CLIHistoryHead = ( CLIHistoryHead + 1 ) % CLIMaxHistorySize;
    79dc:	bf3c      	itt	cc
    79de:	3001      	addcc	r0, #1
    79e0:	260a      	movcc	r6, #10
				CLIHistoryTail++;
    79e2:	f103 0301 	add.w	r3, r3, #1
    79e6:	b2db      	uxtb	r3, r3
				// Process the current line buffer
				CLI_commandLookup();

				// Keep the array circular, discarding the older entries
				if ( CLIHistoryTail < CLIHistoryHead )
					CLIHistoryHead = ( CLIHistoryHead + 1 ) % CLIMaxHistorySize;
    79e8:	bf3e      	ittt	cc
    79ea:	fb90 f4f6 	sdivcc	r4, r0, r6
    79ee:	fb06 0014 	mlscc	r0, r6, r4, r0
    79f2:	7008      	strbcc	r0, [r1, #0]
				CLIHistoryTail++;
				if ( CLIHistoryTail == CLIMaxHistorySize )
    79f4:	2b0a      	cmp	r3, #10
				{
					CLIHistoryTail = 0;
    79f6:	bf03      	ittte	eq
    79f8:	2300      	moveq	r3, #0
    79fa:	7013      	strbeq	r3, [r2, #0]
					CLIHistoryHead = 1;
    79fc:	2301      	moveq	r3, #1
				CLI_commandLookup();

				// Keep the array circular, discarding the older entries
				if ( CLIHistoryTail < CLIHistoryHead )
					CLIHistoryHead = ( CLIHistoryHead + 1 ) % CLIMaxHistorySize;
				CLIHistoryTail++;
    79fe:	7013      	strbne	r3, [r2, #0]
				if ( CLIHistoryTail == CLIMaxHistorySize )
				{
					CLIHistoryTail = 0;
					CLIHistoryHead = 1;
    7a00:	bf08      	it	eq
    7a02:	700b      	strbeq	r3, [r1, #0]
				}

				CLIHistoryCurrent = CLIHistoryTail; // 'Up' starts at the last item
    7a04:	4b48      	ldr	r3, [pc, #288]	; (7b28 <CLI_process+0x200>)
    7a06:	7812      	ldrb	r2, [r2, #0]
    7a08:	701a      	strb	r2, [r3, #0]
inline void CLI_saveHistory( char *buff )
{
	if ( buff == NULL )
	{
		//clear the item
		CLIHistoryBuffer[ CLIHistoryTail ][ 0 ] = '\0';
    7a0a:	2364      	movs	r3, #100	; 0x64
    7a0c:	4353      	muls	r3, r2
    7a0e:	4a47      	ldr	r2, [pc, #284]	; (7b2c <CLI_process+0x204>)
    7a10:	2100      	movs	r1, #0
    7a12:	54d1      	strb	r1, [r2, r3]
				CLI_saveHistory( NULL ); // delete the old temp buffer

			}

			// Reset the buffer
			CLILineBufferCurrent = 0;
    7a14:	2300      	movs	r3, #0

			// Reset the prompt after processing has finished
			print( NL );
    7a16:	483a      	ldr	r0, [pc, #232]	; (7b00 <CLI_process+0x1d8>)
				CLI_saveHistory( NULL ); // delete the old temp buffer

			}

			// Reset the buffer
			CLILineBufferCurrent = 0;
    7a18:	702b      	strb	r3, [r5, #0]

			// Reset the prompt after processing has finished
			print( NL );
    7a1a:	f000 f8c5 	bl	7ba8 <_print>

// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
    7a1e:	4844      	ldr	r0, [pc, #272]	; (7b30 <CLI_process+0x208>)
    7a20:	f000 f8c2 	bl	7ba8 <_print>
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    7a24:	4843      	ldr	r0, [pc, #268]	; (7b34 <CLI_process+0x20c>)
			prev_buf_pos++;

			break;
		}
	}
}
    7a26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
// ----- Functions -----

inline void prompt()
{
	print("\033[2K\r"); // Erases the current line and resets cursor to beginning of line
	print("\033[1;34m:\033[0m "); // Blue bold prompt
    7a2a:	f000 b8bd 	b.w	7ba8 <_print>

			// If there are characters in the buffer
			if ( CLILineBufferCurrent > 0 )
			{
				// Remove character from current position in the line buffer
				CLILineBufferCurrent--;
    7a2e:	3b02      	subs	r3, #2

				// Remove character from tty
				print("\b \b");
    7a30:	4841      	ldr	r0, [pc, #260]	; (7b38 <CLI_process+0x210>)

			// If there are characters in the buffer
			if ( CLILineBufferCurrent > 0 )
			{
				// Remove character from current position in the line buffer
				CLILineBufferCurrent--;
    7a32:	702b      	strb	r3, [r5, #0]

				// Remove character from tty
				print("\b \b");
    7a34:	f000 f8b8 	bl	7ba8 <_print>
    7a38:	e7b6      	b.n	79a8 <CLI_process+0x80>

	// If buffer has changed, output to screen while there are still characters in the buffer not displayed
	while ( CLILineBufferCurrent > prev_buf_pos )
	{
		// Check for control characters
		switch ( CLILineBuffer[prev_buf_pos] )
    7a3a:	2a09      	cmp	r2, #9
    7a3c:	d155      	bne.n	7aea <CLI_process+0x1c2>
			//     Doesn't look like it will happen *that* often, so not handling it for now -HaaTa
			return;

		case 0x09: // Tab
			// Tab completion for the current command
			CLI_tabCompletion();
    7a3e:	f7ff feaf 	bl	77a0 <CLI_tabCompletion>

			CLILineBufferCurrent--; // Remove the Tab
    7a42:	783b      	ldrb	r3, [r7, #0]
    7a44:	3b01      	subs	r3, #1
    7a46:	703b      	strb	r3, [r7, #0]

			// XXX There is a potential bug here when resetting the buffer (losing valid keypresses)
			//     Doesn't look like it will happen *that* often, so not handling it for now -HaaTa
			return;
    7a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	// If buffer has changed, output to screen while there are still characters in the buffer not displayed
	while ( CLILineBufferCurrent > prev_buf_pos )
	{
		// Check for control characters
		switch ( CLILineBuffer[prev_buf_pos] )
    7a4a:	2a1b      	cmp	r2, #27
    7a4c:	d004      	beq.n	7a58 <CLI_process+0x130>
    7a4e:	2a7f      	cmp	r2, #127	; 0x7f
    7a50:	d0a6      	beq.n	79a0 <CLI_process+0x78>
    7a52:	2a0d      	cmp	r2, #13
    7a54:	d149      	bne.n	7aea <CLI_process+0x1c2>
    7a56:	e7b1      	b.n	79bc <CLI_process+0x94>

		case 0x1B: // Esc / Escape codes
			// Check for other escape sequence

			// \e[ is an escape code in vt100 compatible terminals
			if ( CLILineBufferCurrent >= prev_buf_pos + 3
    7a58:	1ca7      	adds	r7, r4, #2
    7a5a:	429f      	cmp	r7, r3
    7a5c:	da4d      	bge.n	7afa <CLI_process+0x1d2>
				&& CLILineBuffer[ prev_buf_pos ] == 0x1B
				&& CLILineBuffer[ prev_buf_pos + 1] == 0x5B )
    7a5e:	190b      	adds	r3, r1, r4
    7a60:	785b      	ldrb	r3, [r3, #1]
    7a62:	2b5b      	cmp	r3, #91	; 0x5b
    7a64:	d149      	bne.n	7afa <CLI_process+0x1d2>
			{
				// Arrow Keys: A (0x41) = Up, B (0x42) = Down, C (0x43) = Right, D (0x44) = Left

				if ( CLILineBuffer[ prev_buf_pos + 2 ] == 0x41 ) // Hist prev
    7a66:	5dcb      	ldrb	r3, [r1, r7]
    7a68:	2b41      	cmp	r3, #65	; 0x41
    7a6a:	d122      	bne.n	7ab2 <CLI_process+0x18a>
				{
					if ( CLIHistoryCurrent == CLIHistoryTail )
    7a6c:	4d2e      	ldr	r5, [pc, #184]	; (7b28 <CLI_process+0x200>)
    7a6e:	4b2c      	ldr	r3, [pc, #176]	; (7b20 <CLI_process+0x1f8>)
    7a70:	f995 2000 	ldrsb.w	r2, [r5]
    7a74:	781b      	ldrb	r3, [r3, #0]
    7a76:	429a      	cmp	r2, r3
    7a78:	d104      	bne.n	7a84 <CLI_process+0x15c>
					{
						// Is first time pressing arrow. Save the current buffer
						CLILineBuffer[ prev_buf_pos ] = '\0';
    7a7a:	2300      	movs	r3, #0
						CLI_saveHistory( CLILineBuffer );
    7a7c:	4608      	mov	r0, r1
				if ( CLILineBuffer[ prev_buf_pos + 2 ] == 0x41 ) // Hist prev
				{
					if ( CLIHistoryCurrent == CLIHistoryTail )
					{
						// Is first time pressing arrow. Save the current buffer
						CLILineBuffer[ prev_buf_pos ] = '\0';
    7a7e:	550b      	strb	r3, [r1, r4]
						CLI_saveHistory( CLILineBuffer );
    7a80:	f7ff ff02 	bl	7888 <CLI_saveHistory>
					}

					// Grab the previus item from the history if there is one
					if ( RING_PREV( CLIHistoryCurrent ) != RING_PREV( CLIHistoryHead ) )
    7a84:	f995 0000 	ldrsb.w	r0, [r5]
    7a88:	2100      	movs	r1, #0
    7a8a:	2209      	movs	r2, #9
    7a8c:	3801      	subs	r0, #1
    7a8e:	f7ff fee7 	bl	7860 <CLI_wrap>
    7a92:	4b24      	ldr	r3, [pc, #144]	; (7b24 <CLI_process+0x1fc>)
    7a94:	4604      	mov	r4, r0
    7a96:	7818      	ldrb	r0, [r3, #0]
    7a98:	2100      	movs	r1, #0
    7a9a:	3801      	subs	r0, #1
    7a9c:	2209      	movs	r2, #9
    7a9e:	f7ff fedf 	bl	7860 <CLI_wrap>
    7aa2:	4284      	cmp	r4, r0
						CLIHistoryCurrent = RING_PREV( CLIHistoryCurrent );
    7aa4:	bf1c      	itt	ne
    7aa6:	4b20      	ldrne	r3, [pc, #128]	; (7b28 <CLI_process+0x200>)
    7aa8:	701c      	strbne	r4, [r3, #0]
					CLI_retreiveHistory( CLIHistoryCurrent );
    7aaa:	f995 0000 	ldrsb.w	r0, [r5]
    7aae:	f7ff ff13 	bl	78d8 <CLI_retreiveHistory>
				}
				if ( CLILineBuffer[ prev_buf_pos + 2 ] == 0x42 ) // Hist next
    7ab2:	5df3      	ldrb	r3, [r6, r7]
    7ab4:	2b42      	cmp	r3, #66	; 0x42
    7ab6:	d120      	bne.n	7afa <CLI_process+0x1d2>
				{
					// Grab the next item from the history if it exists
					if ( RING_NEXT( CLIHistoryCurrent ) != RING_NEXT( CLIHistoryTail ) )
    7ab8:	4c1b      	ldr	r4, [pc, #108]	; (7b28 <CLI_process+0x200>)
    7aba:	f994 0000 	ldrsb.w	r0, [r4]
    7abe:	2100      	movs	r1, #0
    7ac0:	2209      	movs	r2, #9
    7ac2:	3001      	adds	r0, #1
    7ac4:	f7ff fecc 	bl	7860 <CLI_wrap>
    7ac8:	4b15      	ldr	r3, [pc, #84]	; (7b20 <CLI_process+0x1f8>)
    7aca:	4605      	mov	r5, r0
    7acc:	7818      	ldrb	r0, [r3, #0]
    7ace:	2100      	movs	r1, #0
    7ad0:	3001      	adds	r0, #1
    7ad2:	2209      	movs	r2, #9
    7ad4:	f7ff fec4 	bl	7860 <CLI_wrap>
    7ad8:	4285      	cmp	r5, r0
						CLIHistoryCurrent = RING_NEXT( CLIHistoryCurrent );
    7ada:	bf18      	it	ne
    7adc:	7025      	strbne	r5, [r4, #0]
					CLI_retreiveHistory( CLIHistoryCurrent );
    7ade:	f994 0000 	ldrsb.w	r0, [r4]
			prev_buf_pos++;

			break;
		}
	}
}
    7ae2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				if ( CLILineBuffer[ prev_buf_pos + 2 ] == 0x42 ) // Hist next
				{
					// Grab the next item from the history if it exists
					if ( RING_NEXT( CLIHistoryCurrent ) != RING_NEXT( CLIHistoryTail ) )
						CLIHistoryCurrent = RING_NEXT( CLIHistoryCurrent );
					CLI_retreiveHistory( CLIHistoryCurrent );
    7ae6:	f7ff bef7 	b.w	78d8 <CLI_retreiveHistory>

			break;

		default:
			// Place a null on the end (to use with string print)
			CLILineBuffer[CLILineBufferCurrent] = '\0';
    7aea:	2200      	movs	r2, #0

			// Output buffer to screen
			dPrint( &CLILineBuffer[prev_buf_pos] );
    7aec:	1930      	adds	r0, r6, r4

			// Buffer reset
			prev_buf_pos++;
    7aee:	3401      	adds	r4, #1

			break;

		default:
			// Place a null on the end (to use with string print)
			CLILineBuffer[CLILineBufferCurrent] = '\0';
    7af0:	54ca      	strb	r2, [r1, r3]

			// Output buffer to screen
			dPrint( &CLILineBuffer[prev_buf_pos] );

			// Buffer reset
			prev_buf_pos++;
    7af2:	b2e4      	uxtb	r4, r4
		default:
			// Place a null on the end (to use with string print)
			CLILineBuffer[CLILineBufferCurrent] = '\0';

			// Output buffer to screen
			dPrint( &CLILineBuffer[prev_buf_pos] );
    7af4:	f7fe fbfe 	bl	62f4 <Output_putstr>

			// Buffer reset
			prev_buf_pos++;

			break;
    7af8:	e756      	b.n	79a8 <CLI_process+0x80>
    7afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7afc:	1fff9974 	.word	0x1fff9974
    7b00:	0000bc21 	.word	0x0000bc21
    7b04:	0000ebb0 	.word	0x0000ebb0
    7b08:	1fff98b8 	.word	0x1fff98b8
    7b0c:	1fff94cc 	.word	0x1fff94cc
    7b10:	0000ec07 	.word	0x0000ec07
    7b14:	0000ec0d 	.word	0x0000ec0d
    7b18:	0000852a 	.word	0x0000852a
    7b1c:	0000ec12 	.word	0x0000ec12
    7b20:	1fff9948 	.word	0x1fff9948
    7b24:	1fff991d 	.word	0x1fff991d
    7b28:	1fff94cd 	.word	0x1fff94cd
    7b2c:	1fff94d0 	.word	0x1fff94d0
    7b30:	0000eb9c 	.word	0x0000eb9c
    7b34:	0000eba2 	.word	0x0000eba2
    7b38:	0000ec16 	.word	0x0000ec16

00007b3c <init_errorLED>:

// Kiibohd-dfu
#elif defined(_mk20dx256vlh7_)
	// Kiibohd-dfu
	// Enable pin
	GPIOA_PDDR |= (1<<5);
    7b3c:	4a04      	ldr	r2, [pc, #16]	; (7b50 <init_errorLED+0x14>)
    7b3e:	6813      	ldr	r3, [r2, #0]
    7b40:	f043 0320 	orr.w	r3, r3, #32
    7b44:	6013      	str	r3, [r2, #0]

	// Setup pin - A5 - See Lib/pin_map.mchck for more details on pins
	PORTA_PCR5 = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    7b46:	4b03      	ldr	r3, [pc, #12]	; (7b54 <init_errorLED+0x18>)
    7b48:	f44f 72a2 	mov.w	r2, #324	; 0x144
    7b4c:	601a      	str	r2, [r3, #0]
    7b4e:	4770      	bx	lr
    7b50:	400ff014 	.word	0x400ff014
    7b54:	40049014 	.word	0x40049014

00007b58 <errorLED>:

// Kiibohd-dfu
#elif defined(_mk20dx256vlh7_)
	// Kiibohd-dfu
	// Error LED On (A5)
	if ( on ) {
    7b58:	b108      	cbz	r0, 7b5e <errorLED+0x6>
		GPIOA_PSOR |= (1<<5);
    7b5a:	4a04      	ldr	r2, [pc, #16]	; (7b6c <errorLED+0x14>)
    7b5c:	e000      	b.n	7b60 <errorLED+0x8>
	}
	// Error LED Off
	else {
		GPIOA_PCOR |= (1<<5);
    7b5e:	4a04      	ldr	r2, [pc, #16]	; (7b70 <errorLED+0x18>)
    7b60:	6813      	ldr	r3, [r2, #0]
    7b62:	f043 0320 	orr.w	r3, r3, #32
    7b66:	6013      	str	r3, [r2, #0]
    7b68:	4770      	bx	lr
    7b6a:	bf00      	nop
    7b6c:	400ff004 	.word	0x400ff004
    7b70:	400ff008 	.word	0x400ff008

00007b74 <printstrs>:

// ----- Functions -----

// Multiple string Output
void printstrs( char* first, ... )
{
    7b74:	b40f      	push	{r0, r1, r2, r3}
    7b76:	b507      	push	{r0, r1, r2, lr}
    7b78:	ab04      	add	r3, sp, #16
    7b7a:	f853 0b04 	ldr.w	r0, [r3], #4
	// Initialize the variadic function parameter list
	va_list ap;

	// Get the first parameter
	va_start( ap, first );
    7b7e:	9301      	str	r3, [sp, #4]
	char *cur = first;

	// Loop through the variadic list until "\0\0\0" is found
	while ( !( cur[0] == '\0' && cur[1] == '\0' && cur[2] == '\0' ) )
    7b80:	7803      	ldrb	r3, [r0, #0]
    7b82:	b133      	cbz	r3, 7b92 <printstrs+0x1e>
	{
		// Print out the given string
		Output_putstr( cur );
    7b84:	f7fe fbb6 	bl	62f4 <Output_putstr>

		// Get the next argument ready
		cur = va_arg( ap, char* );
    7b88:	9b01      	ldr	r3, [sp, #4]
    7b8a:	1d1a      	adds	r2, r3, #4
    7b8c:	9201      	str	r2, [sp, #4]
    7b8e:	6818      	ldr	r0, [r3, #0]
    7b90:	e7f6      	b.n	7b80 <printstrs+0xc>
	// Get the first parameter
	va_start( ap, first );
	char *cur = first;

	// Loop through the variadic list until "\0\0\0" is found
	while ( !( cur[0] == '\0' && cur[1] == '\0' && cur[2] == '\0' ) )
    7b92:	7843      	ldrb	r3, [r0, #1]
    7b94:	2b00      	cmp	r3, #0
    7b96:	d1f5      	bne.n	7b84 <printstrs+0x10>
    7b98:	7883      	ldrb	r3, [r0, #2]
    7b9a:	2b00      	cmp	r3, #0
    7b9c:	d1f2      	bne.n	7b84 <printstrs+0x10>
		// Get the next argument ready
		cur = va_arg( ap, char* );
	}

	va_end( ap ); // Not required, but good practice
}
    7b9e:	b003      	add	sp, #12
    7ba0:	f85d eb04 	ldr.w	lr, [sp], #4
    7ba4:	b004      	add	sp, #16
    7ba6:	4770      	bx	lr

00007ba8 <_print>:
	while ( ( c = pgm_read_byte( s++ ) ) != '\0' )
	{
		Output_putchar( c );
	}
#elif defined(_mk20dx128_) || defined(_mk20dx128vlf5_) || defined(_mk20dx256_) || defined(_mk20dx256vlh7_) // ARM
	Output_putstr( (char*)s );
    7ba8:	f7fe bba4 	b.w	62f4 <Output_putstr>

00007bac <lenStr>:
	}
}


uint16_t lenStr( char* in )
{
    7bac:	4602      	mov	r2, r0
    7bae:	4613      	mov	r3, r2
    7bb0:	3201      	adds	r2, #1
	// Iterator
	char *pos;

	// Loop until null is found
	for ( pos = in; *pos; pos++ );
    7bb2:	7819      	ldrb	r1, [r3, #0]
    7bb4:	2900      	cmp	r1, #0
    7bb6:	d1fa      	bne.n	7bae <lenStr+0x2>

	// Return the difference between the pointers of in and pos (which is the string length)
	return (pos - in);
    7bb8:	1a18      	subs	r0, r3, r0
}
    7bba:	b280      	uxth	r0, r0
    7bbc:	4770      	bx	lr

00007bbe <revsStr>:
	revsStr(out);
}


void revsStr( char* in )
{
    7bbe:	b510      	push	{r4, lr}
    7bc0:	4604      	mov	r4, r0

	// Temp storage
	char c;

	// Loop through the string, and reverse the order of the characters
	for ( i = 0, j = lenStr( in ) - 1; i < j; i++, j-- )
    7bc2:	f7ff fff3 	bl	7bac <lenStr>
    7bc6:	2300      	movs	r3, #0
    7bc8:	3801      	subs	r0, #1
    7bca:	4283      	cmp	r3, r0
    7bcc:	da06      	bge.n	7bdc <revsStr+0x1e>
	{
		c = in[i];
    7bce:	5ce2      	ldrb	r2, [r4, r3]
		in[i] = in[j];
    7bd0:	5c21      	ldrb	r1, [r4, r0]
    7bd2:	54e1      	strb	r1, [r4, r3]
		in[j] = c;
    7bd4:	5422      	strb	r2, [r4, r0]

	// Temp storage
	char c;

	// Loop through the string, and reverse the order of the characters
	for ( i = 0, j = lenStr( in ) - 1; i < j; i++, j-- )
    7bd6:	3301      	adds	r3, #1
    7bd8:	3801      	subs	r0, #1
    7bda:	e7f6      	b.n	7bca <revsStr+0xc>
	{
		c = in[i];
		in[i] = in[j];
		in[j] = c;
	}
}
    7bdc:	bd10      	pop	{r4, pc}

00007bde <int8ToStr>:



// String Functions
void int8ToStr( uint8_t in, char* out )
{
    7bde:	b530      	push	{r4, r5, lr}
	// Position and sign containers
	uint8_t pos;
	pos = 0;
    7be0:	2200      	movs	r2, #0

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    7be2:	230a      	movs	r3, #10
    7be4:	fbb0 f4f3 	udiv	r4, r0, r3
    7be8:	fb03 0314 	mls	r3, r3, r4, r0
    7bec:	1c55      	adds	r5, r2, #1
    7bee:	3330      	adds	r3, #48	; 0x30
	}
	while ( (in /= 10) > 0 );
    7bf0:	f014 00ff 	ands.w	r0, r4, #255	; 0xff
	pos = 0;

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    7bf4:	548b      	strb	r3, [r1, r2]
    7bf6:	b2ea      	uxtb	r2, r5
	}
	while ( (in /= 10) > 0 );
    7bf8:	d1f3      	bne.n	7be2 <int8ToStr+0x4>

	// Append null
	out[pos] = '\0';
    7bfa:	5488      	strb	r0, [r1, r2]

	// Reverse the string to the correct order
	revsStr(out);
}
    7bfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    7c00:	4608      	mov	r0, r1
    7c02:	f7ff bfdc 	b.w	7bbe <revsStr>

00007c06 <printInt8>:



// Number Printing Functions
void printInt8( uint8_t in )
{
    7c06:	b507      	push	{r0, r1, r2, lr}
	// Max number of characters is 3 + 1 for null
	char tmpStr[4];

	// Convert number
	int8ToStr( in, tmpStr );
    7c08:	a901      	add	r1, sp, #4
    7c0a:	f7ff ffe8 	bl	7bde <int8ToStr>

	// Print number
	dPrintStr( tmpStr );
    7c0e:	a801      	add	r0, sp, #4
    7c10:	f7fe fb70 	bl	62f4 <Output_putstr>
}
    7c14:	b003      	add	sp, #12
    7c16:	f85d fb04 	ldr.w	pc, [sp], #4

00007c1a <int16ToStr>:
	revsStr(out);
}


void int16ToStr( uint16_t in, char* out )
{
    7c1a:	b530      	push	{r4, r5, lr}
	// Position and sign containers
	uint16_t pos;
	pos = 0;
    7c1c:	2200      	movs	r2, #0

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    7c1e:	230a      	movs	r3, #10
    7c20:	fbb0 f4f3 	udiv	r4, r0, r3
    7c24:	fb03 0314 	mls	r3, r3, r4, r0
    7c28:	1c55      	adds	r5, r2, #1
    7c2a:	3330      	adds	r3, #48	; 0x30
	}
	while ( (in /= 10) > 0 );
    7c2c:	b2a0      	uxth	r0, r4
	pos = 0;

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    7c2e:	548b      	strb	r3, [r1, r2]
    7c30:	b2aa      	uxth	r2, r5
	}
	while ( (in /= 10) > 0 );
    7c32:	2800      	cmp	r0, #0
    7c34:	d1f3      	bne.n	7c1e <int16ToStr+0x4>

	// Append null
	out[pos] = '\0';
    7c36:	5488      	strb	r0, [r1, r2]

	// Reverse the string to the correct order
	revsStr(out);
}
    7c38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    7c3c:	4608      	mov	r0, r1
    7c3e:	f7ff bfbe 	b.w	7bbe <revsStr>

00007c42 <printInt16>:
	// Print number
	dPrintStr( tmpStr );
}

void printInt16( uint16_t in )
{
    7c42:	b507      	push	{r0, r1, r2, lr}
	// Max number of characters is 5 + 1 for null
	char tmpStr[6];

	// Convert number
	int16ToStr( in, tmpStr );
    7c44:	4669      	mov	r1, sp
    7c46:	f7ff ffe8 	bl	7c1a <int16ToStr>

	// Print number
	dPrintStr( tmpStr );
    7c4a:	4668      	mov	r0, sp
    7c4c:	f7fe fb52 	bl	62f4 <Output_putstr>
}
    7c50:	b003      	add	sp, #12
    7c52:	f85d fb04 	ldr.w	pc, [sp], #4

00007c56 <int32ToStr>:
	revsStr(out);
}


void int32ToStr( uint32_t in, char* out )
{
    7c56:	b530      	push	{r4, r5, lr}
	// Position and sign containers
	uint32_t pos;
	pos = 0;
    7c58:	2200      	movs	r2, #0
    7c5a:	1e4d      	subs	r5, r1, #1

	// Evaluate through digits as decimal
	do
	{
		out[pos++] = in % 10 + '0';
    7c5c:	230a      	movs	r3, #10
    7c5e:	fbb0 f4f3 	udiv	r4, r0, r3
    7c62:	fb03 0314 	mls	r3, r3, r4, r0
    7c66:	3330      	adds	r3, #48	; 0x30
    7c68:	3201      	adds	r2, #1
    7c6a:	f805 3f01 	strb.w	r3, [r5, #1]!
	}
	while ( (in /= 10) > 0 );
    7c6e:	4620      	mov	r0, r4
    7c70:	2c00      	cmp	r4, #0
    7c72:	d1f3      	bne.n	7c5c <int32ToStr+0x6>

	// Append null
	out[pos] = '\0';
    7c74:	548c      	strb	r4, [r1, r2]

	// Reverse the string to the correct order
	revsStr(out);
    7c76:	4608      	mov	r0, r1
}
    7c78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    7c7c:	f7ff bf9f 	b.w	7bbe <revsStr>

00007c80 <printInt32>:
	// Print number
	dPrintStr( tmpStr );
}

void printInt32( uint32_t in )
{
    7c80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	// Max number of characters is 10 + 1 for null
	char tmpStr[11];

	// Convert number
	int32ToStr( in, tmpStr );
    7c82:	a901      	add	r1, sp, #4
    7c84:	f7ff ffe7 	bl	7c56 <int32ToStr>

	// Print number
	dPrintStr( tmpStr );
    7c88:	a801      	add	r0, sp, #4
    7c8a:	f7fe fb33 	bl	62f4 <Output_putstr>
}
    7c8e:	b005      	add	sp, #20
    7c90:	f85d fb04 	ldr.w	pc, [sp], #4

00007c94 <hexToStr_op>:
	revsStr(out);
}


void hexToStr_op( uint16_t in, char* out, uint8_t op )
{
    7c94:	b570      	push	{r4, r5, r6, lr}
	// Position container
	uint16_t pos = 0;
    7c96:	2400      	movs	r4, #0

	// Evaluate through digits as hex
	do
	{
		uint16_t cur = in % 16;
    7c98:	f000 030f 	and.w	r3, r0, #15
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    7c9c:	2b0a      	cmp	r3, #10
    7c9e:	bf34      	ite	cc
    7ca0:	2630      	movcc	r6, #48	; 0x30
    7ca2:	2637      	movcs	r6, #55	; 0x37
    7ca4:	1c65      	adds	r5, r4, #1
    7ca6:	4433      	add	r3, r6
	}
	while ( (in /= 16) > 0 );
    7ca8:	0900      	lsrs	r0, r0, #4

	// Evaluate through digits as hex
	do
	{
		uint16_t cur = in % 16;
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    7caa:	550b      	strb	r3, [r1, r4]
    7cac:	b2ac      	uxth	r4, r5
	}
	while ( (in /= 16) > 0 );
    7cae:	d1f3      	bne.n	7c98 <hexToStr_op+0x4>

	// Output formatting options
	switch ( op )
    7cb0:	2a02      	cmp	r2, #2

	// Evaluate through digits as hex
	do
	{
		uint16_t cur = in % 16;
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    7cb2:	4623      	mov	r3, r4
	}
	while ( (in /= 16) > 0 );

	// Output formatting options
	switch ( op )
    7cb4:	d00c      	beq.n	7cd0 <hexToStr_op+0x3c>
    7cb6:	2a04      	cmp	r2, #4
    7cb8:	d00a      	beq.n	7cd0 <hexToStr_op+0x3c>
    7cba:	2a01      	cmp	r2, #1
    7cbc:	d10f      	bne.n	7cde <hexToStr_op+0x4a>
	{
	case 1: // Add 0x
		out[pos++] = 'x';
    7cbe:	2278      	movs	r2, #120	; 0x78
    7cc0:	550a      	strb	r2, [r1, r4]
    7cc2:	3401      	adds	r4, #1
		out[pos++] = '0';
    7cc4:	b2a4      	uxth	r4, r4
    7cc6:	3302      	adds	r3, #2
    7cc8:	2230      	movs	r2, #48	; 0x30
    7cca:	b29b      	uxth	r3, r3
    7ccc:	550a      	strb	r2, [r1, r4]
		break;
    7cce:	e006      	b.n	7cde <hexToStr_op+0x4a>
	case 2: //  8-bit padding
	case 4: // 16-bit padding
		while ( pos < op )
    7cd0:	4293      	cmp	r3, r2
    7cd2:	d204      	bcs.n	7cde <hexToStr_op+0x4a>
			out[pos++] = '0';
    7cd4:	1c58      	adds	r0, r3, #1
    7cd6:	2430      	movs	r4, #48	; 0x30
    7cd8:	54cc      	strb	r4, [r1, r3]
    7cda:	b283      	uxth	r3, r0
    7cdc:	e7f8      	b.n	7cd0 <hexToStr_op+0x3c>
		break;
	}

	// Append null
	out[pos] = '\0';
    7cde:	2200      	movs	r2, #0
    7ce0:	54ca      	strb	r2, [r1, r3]

	// Reverse the string to the correct order
	revsStr(out);
    7ce2:	4608      	mov	r0, r1
}
    7ce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    7ce8:	f7ff bf69 	b.w	7bbe <revsStr>

00007cec <printHex_op>:
	// Print number
	dPrintStr( tmpStr );
}

void printHex_op( uint16_t in, uint8_t op )
{
    7cec:	b507      	push	{r0, r1, r2, lr}
    7cee:	460a      	mov	r2, r1
	// e.g. "0xFFFF\0"
	// op 2 and 4 require fewer characters (2+1 and 4+1 respectively)
	char tmpStr[7];

	// Convert number
	hexToStr_op( in, tmpStr, op );
    7cf0:	4669      	mov	r1, sp
    7cf2:	f7ff ffcf 	bl	7c94 <hexToStr_op>

	// Print number
	dPrintStr( tmpStr );
    7cf6:	4668      	mov	r0, sp
    7cf8:	f7fe fafc 	bl	62f4 <Output_putstr>
}
    7cfc:	b003      	add	sp, #12
    7cfe:	f85d fb04 	ldr.w	pc, [sp], #4

00007d02 <hex32ToStr_op>:
	revsStr(out);
}


void hex32ToStr_op( uint32_t in, char* out, uint8_t op )
{
    7d02:	b570      	push	{r4, r5, r6, lr}
	// Position container
	uint32_t pos = 0;
    7d04:	2300      	movs	r3, #0
    7d06:	1e4d      	subs	r5, r1, #1

	// Evaluate through digits as hex
	do
	{
		uint32_t cur = in % 16;
    7d08:	f000 040f 	and.w	r4, r0, #15
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    7d0c:	2c0a      	cmp	r4, #10
    7d0e:	bf34      	ite	cc
    7d10:	2630      	movcc	r6, #48	; 0x30
    7d12:	2637      	movcs	r6, #55	; 0x37
    7d14:	4434      	add	r4, r6
	}
	while ( (in /= 16) > 0 );
    7d16:	0900      	lsrs	r0, r0, #4

	// Evaluate through digits as hex
	do
	{
		uint32_t cur = in % 16;
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    7d18:	f103 0301 	add.w	r3, r3, #1
    7d1c:	f805 4f01 	strb.w	r4, [r5, #1]!
	}
	while ( (in /= 16) > 0 );
    7d20:	d1f2      	bne.n	7d08 <hex32ToStr_op+0x6>

	// Output formatting options
	switch ( op )
    7d22:	2a02      	cmp	r2, #2

	// Evaluate through digits as hex
	do
	{
		uint32_t cur = in % 16;
		out[pos++] = cur + (( cur < 10 ) ? '0' : 'A' - 10);
    7d24:	461c      	mov	r4, r3
	}
	while ( (in /= 16) > 0 );

	// Output formatting options
	switch ( op )
    7d26:	d00a      	beq.n	7d3e <hex32ToStr_op+0x3c>
    7d28:	2a04      	cmp	r2, #4
    7d2a:	d008      	beq.n	7d3e <hex32ToStr_op+0x3c>
    7d2c:	2a01      	cmp	r2, #1
    7d2e:	d10e      	bne.n	7d4e <hex32ToStr_op+0x4c>
	{
	case 1: // Add 0x
		out[pos++] = 'x';
    7d30:	2278      	movs	r2, #120	; 0x78
    7d32:	54ca      	strb	r2, [r1, r3]
		out[pos++] = '0';
    7d34:	440b      	add	r3, r1
    7d36:	2230      	movs	r2, #48	; 0x30
    7d38:	3402      	adds	r4, #2
    7d3a:	705a      	strb	r2, [r3, #1]
		break;
    7d3c:	e007      	b.n	7d4e <hex32ToStr_op+0x4c>
    7d3e:	440b      	add	r3, r1
	case 2: //  8-bit padding
	case 4: // 16-bit padding
		while ( pos < op )
    7d40:	4294      	cmp	r4, r2
    7d42:	d204      	bcs.n	7d4e <hex32ToStr_op+0x4c>
			out[pos++] = '0';
    7d44:	2030      	movs	r0, #48	; 0x30
    7d46:	3401      	adds	r4, #1
    7d48:	f803 0b01 	strb.w	r0, [r3], #1
    7d4c:	e7f8      	b.n	7d40 <hex32ToStr_op+0x3e>
		break;
	}

	// Append null
	out[pos] = '\0';
    7d4e:	2300      	movs	r3, #0
    7d50:	550b      	strb	r3, [r1, r4]

	// Reverse the string to the correct order
	revsStr(out);
    7d52:	4608      	mov	r0, r1
}
    7d54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

	// Append null
	out[pos] = '\0';

	// Reverse the string to the correct order
	revsStr(out);
    7d58:	f7ff bf31 	b.w	7bbe <revsStr>

00007d5c <printHex32_op>:
	// Print number
	dPrintStr( tmpStr );
}

void printHex32_op( uint32_t in, uint8_t op )
{
    7d5c:	b507      	push	{r0, r1, r2, lr}
    7d5e:	460a      	mov	r2, r1
	// e.g. "0xFFFF\0"
	// op 2 and 4 require fewer characters (2+1 and 4+1 respectively)
	char tmpStr[7];

	// Convert number
	hex32ToStr_op( in, tmpStr, op );
    7d60:	4669      	mov	r1, sp
    7d62:	f7ff ffce 	bl	7d02 <hex32ToStr_op>

	// Print number
	dPrintStr( tmpStr );
    7d66:	4668      	mov	r0, sp
    7d68:	f7fe fac4 	bl	62f4 <Output_putstr>
}
    7d6c:	b003      	add	sp, #12
    7d6e:	f85d fb04 	ldr.w	pc, [sp], #4

00007d72 <eqStr>:
	return (pos - in);
}


int16_t eqStr( char* str1, char* str2 )
{
    7d72:	b510      	push	{r4, lr}
    7d74:	4603      	mov	r3, r0
	// Scan each string for NULLs and whether they are the same
	while( *str1 != '\0' && *str1++ == *str2++ );
    7d76:	f810 2b01 	ldrb.w	r2, [r0], #1
    7d7a:	b122      	cbz	r2, 7d86 <eqStr+0x14>
    7d7c:	f811 4b01 	ldrb.w	r4, [r1], #1
    7d80:	4294      	cmp	r4, r2
    7d82:	4603      	mov	r3, r0
    7d84:	d0f6      	beq.n	7d74 <eqStr+0x2>

	// If the strings are still identical (i.e. both NULL), then return -1, otherwise current *str1
	// If *str1 is 0, then str1 ended (and str1 is "like" str2), otherwise strings are different
	return *--str1 == *--str2 ? -1 : *++str1;
    7d86:	f813 0c01 	ldrb.w	r0, [r3, #-1]
    7d8a:	f811 2c01 	ldrb.w	r2, [r1, #-1]
    7d8e:	4290      	cmp	r0, r2
    7d90:	bf14      	ite	ne
    7d92:	7818      	ldrbne	r0, [r3, #0]
    7d94:	f64f 70ff 	movweq	r0, #65535	; 0xffff
}
    7d98:	b200      	sxth	r0, r0
    7d9a:	bd10      	pop	{r4, pc}

00007d9c <numToInt>:

int numToInt( char* in )
{
    7d9c:	b530      	push	{r4, r5, lr}
    7d9e:	4602      	mov	r2, r0
	char* lsd = in;
	char* msd = in;

	int total = 0;
	int sign = 1; // Default to positive
	uint8_t base = 10; // Use base 10 by default TODO Add support for bases other than 10 and 16
    7da0:	240a      	movs	r4, #10
	// Pointers to the LSD (Least Significant Digit) and MSD
	char* lsd = in;
	char* msd = in;

	int total = 0;
	int sign = 1; // Default to positive
    7da2:	2501      	movs	r5, #1
    7da4:	4611      	mov	r1, r2
	uint8_t base = 10; // Use base 10 by default TODO Add support for bases other than 10 and 16

	// Scan the string once to determine the length
	while ( *lsd != '\0' )
    7da6:	f812 3b01 	ldrb.w	r3, [r2], #1
    7daa:	b193      	cbz	r3, 7dd2 <numToInt+0x36>
	{
		// Check for positive/negative
		switch ( *lsd++ )
    7dac:	2b2b      	cmp	r3, #43	; 0x2b
    7dae:	4611      	mov	r1, r2
    7db0:	d00d      	beq.n	7dce <numToInt+0x32>
    7db2:	d802      	bhi.n	7dba <numToInt+0x1e>
    7db4:	2b20      	cmp	r3, #32
    7db6:	d00a      	beq.n	7dce <numToInt+0x32>
    7db8:	e008      	b.n	7dcc <numToInt+0x30>
    7dba:	2b2d      	cmp	r3, #45	; 0x2d
    7dbc:	d003      	beq.n	7dc6 <numToInt+0x2a>
    7dbe:	2b78      	cmp	r3, #120	; 0x78
    7dc0:	d104      	bne.n	7dcc <numToInt+0x30>
		case '+':
		case ' ':
			msd = lsd;
			break;
		case 'x': // Hex Mode
			base = 0x10;
    7dc2:	2410      	movs	r4, #16
			msd = lsd;
			break;
    7dc4:	e003      	b.n	7dce <numToInt+0x32>
		// Check for positive/negative
		switch ( *lsd++ )
		{
		// Fall through is intentional, only do something on negative, ignore the rest
		// Update the MSD to remove leading spaces and signs
		case '-': sign = -1;
    7dc6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    7dca:	e000      	b.n	7dce <numToInt+0x32>

	// Scan the string once to determine the length
	while ( *lsd != '\0' )
	{
		// Check for positive/negative
		switch ( *lsd++ )
    7dcc:	4601      	mov	r1, r0
		{
		// Fall through is intentional, only do something on negative, ignore the rest
		// Update the MSD to remove leading spaces and signs
		case '-': sign = -1;
    7dce:	4608      	mov	r0, r1
    7dd0:	e7e8      	b.n	7da4 <numToInt+0x8>
			break;
		}
	}

	// Process string depending on which base
	switch ( base )
    7dd2:	2c0a      	cmp	r4, #10
    7dd4:	d003      	beq.n	7dde <numToInt+0x42>
    7dd6:	2c10      	cmp	r4, #16
    7dd8:	d11f      	bne.n	7e1a <numToInt+0x7e>
    7dda:	2401      	movs	r4, #1
    7ddc:	e012      	b.n	7e04 <numToInt+0x68>
    7dde:	2201      	movs	r2, #1
	{
	case 10: // Decimal
		// Rescan the string from the LSD to MSD to convert it to a decimal number
		for ( unsigned int digit = 1; lsd > msd ; digit *= 10 )
    7de0:	4281      	cmp	r1, r0
    7de2:	d91a      	bls.n	7e1a <numToInt+0x7e>
			total += ( (*--lsd) - '0' ) * digit;
    7de4:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    7de8:	3c30      	subs	r4, #48	; 0x30
    7dea:	fb02 3304 	mla	r3, r2, r4, r3
	// Process string depending on which base
	switch ( base )
	{
	case 10: // Decimal
		// Rescan the string from the LSD to MSD to convert it to a decimal number
		for ( unsigned int digit = 1; lsd > msd ; digit *= 10 )
    7dee:	240a      	movs	r4, #10
    7df0:	4362      	muls	r2, r4
    7df2:	e7f5      	b.n	7de0 <numToInt+0x44>

	case 0x10: // Hex
		// Rescan the string from the LSD to MSD to convert it to a hexadecimal number
		for ( unsigned int digit = 1; lsd > msd ; digit *= 0x10 )
		{
			if    ( *--lsd <= '9' ) total += ( *lsd - '0' ) * digit;
    7df4:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
    7df8:	2a39      	cmp	r2, #57	; 0x39
    7dfa:	d806      	bhi.n	7e0a <numToInt+0x6e>
    7dfc:	3a30      	subs	r2, #48	; 0x30
			else if ( *lsd <= 'F' ) total += ( *lsd - 'A' + 10 ) * digit;
			else if ( *lsd <= 'f' ) total += ( *lsd - 'a' + 10 ) * digit;
    7dfe:	fb04 3302 	mla	r3, r4, r2, r3
			total += ( (*--lsd) - '0' ) * digit;
		break;

	case 0x10: // Hex
		// Rescan the string from the LSD to MSD to convert it to a hexadecimal number
		for ( unsigned int digit = 1; lsd > msd ; digit *= 0x10 )
    7e02:	0124      	lsls	r4, r4, #4
    7e04:	4281      	cmp	r1, r0
    7e06:	d8f5      	bhi.n	7df4 <numToInt+0x58>
    7e08:	e007      	b.n	7e1a <numToInt+0x7e>
		{
			if    ( *--lsd <= '9' ) total += ( *lsd - '0' ) * digit;
			else if ( *lsd <= 'F' ) total += ( *lsd - 'A' + 10 ) * digit;
    7e0a:	2a46      	cmp	r2, #70	; 0x46
    7e0c:	d801      	bhi.n	7e12 <numToInt+0x76>
    7e0e:	3a37      	subs	r2, #55	; 0x37
    7e10:	e7f5      	b.n	7dfe <numToInt+0x62>
			else if ( *lsd <= 'f' ) total += ( *lsd - 'a' + 10 ) * digit;
    7e12:	2a66      	cmp	r2, #102	; 0x66
    7e14:	d8f5      	bhi.n	7e02 <numToInt+0x66>
    7e16:	3a57      	subs	r2, #87	; 0x57
    7e18:	e7f1      	b.n	7dfe <numToInt+0x62>
		break;
	}

	// Propagate sign and return
	return total * sign;
}
    7e1a:	fb05 f003 	mul.w	r0, r5, r3
    7e1e:	bd30      	pop	{r4, r5, pc}
    7e20:	21494d4e 	.word	0x21494d4e
    7e24:	48000a0d 	.word	0x48000a0d
    7e28:	20647261 	.word	0x20647261
    7e2c:	6c756146 	.word	0x6c756146
    7e30:	53202174 	.word	0x53202174
    7e34:	485f4243 	.word	0x485f4243
    7e38:	3a525346 	.word	0x3a525346
    7e3c:	654d0020 	.word	0x654d0020
    7e40:	79726f6d 	.word	0x79726f6d
    7e44:	6e614d20 	.word	0x6e614d20
    7e48:	72656761 	.word	0x72656761
    7e4c:	75614620 	.word	0x75614620
    7e50:	2021746c 	.word	0x2021746c
    7e54:	5f424353 	.word	0x5f424353
    7e58:	52534643 	.word	0x52534643
    7e5c:	2000203a 	.word	0x2000203a
    7e60:	5f424353 	.word	0x5f424353
    7e64:	52414d4d 	.word	0x52414d4d
    7e68:	4200203a 	.word	0x4200203a
    7e6c:	46207375 	.word	0x46207375
    7e70:	746c7561 	.word	0x746c7561
    7e74:	43532021 	.word	0x43532021
    7e78:	46435f42 	.word	0x46435f42
    7e7c:	203a5253 	.word	0x203a5253
    7e80:	43532000 	.word	0x43532000
    7e84:	46425f42 	.word	0x46425f42
    7e88:	203a5241 	.word	0x203a5241
    7e8c:	61735500 	.word	0x61735500
    7e90:	46206567 	.word	0x46206567
    7e94:	746c7561 	.word	0x746c7561
    7e98:	43532021 	.word	0x43532021
    7e9c:	46435f42 	.word	0x46435f42
    7ea0:	203a5253 	.word	0x203a5253
    7ea4:	00          	.byte	0x00

00007ea5 <sys_reset_to_loader_magic>:
    7ea5:	ff 00 7f 52 45 53 45 54 20 54 4f 20 4c 4f 41 44     ...RESET TO LOAD
    7eb5:	45 52 7f 00 ff 00 e8 fd 00                          ER.......

00007ebe <ledWPageCLIDict_DescEntry>:
    7ebe:	57 72 69 74 65 20 74 6f 20 67 69 76 65 6e 20 72     Write to given r
    7ece:	65 67 69 73 74 65 72 20 70 61 67 65 20 73 74 61     egister page sta
    7ede:	72 74 69 6e 67 20 61 74 20 61 64 64 72 65 73 73     rting at address
    7eee:	2e 20 69 2e 65 2e 20 30 78 32 20 30 78 32 34 20     . i.e. 0x2 0x24 
    7efe:	30 78 46 30 20 30 78 31 32 00                       0xF0 0x12.

00007f08 <ledTestCLIDict_DescEntry>:
    7f08:	54 65 73 74 20 6f 75 74 20 74 68 65 20 6c 65 64     Test out the led
    7f18:	20 70 61 67 65 73 2e 00                              pages..

00007f20 <ledCLIDict>:
    7f20:	71 81 00 00 aa 82 00 00 95 2c 00 00 79 81 00 00     q........,..y...
    7f30:	23 83 00 00 0d 2c 00 00 81 81 00 00 b4 81 00 00     #....,..........
    7f40:	85 2e 00 00 89 81 00 00 8c 7f 00 00 e1 2b 00 00     .............+..
    7f50:	92 81 00 00 aa 7f 00 00 15 2b 00 00 9b 81 00 00     .........+......
    7f60:	08 7f 00 00 e5 29 00 00 a3 81 00 00 be 7e 00 00     .....).......~..
    7f70:	1d 2d 00 00 ac 81 00 00 79 82 00 00 85 29 00 00     .-......y....)..
    7f80:	00 00 00 00 00 00 00 00 00 00 00 00                 ............

00007f8c <ledRPageCLIDict_DescEntry>:
    7f8c:	52 65 61 64 20 74 68 65 20 67 69 76 65 6e 20 72     Read the given r
    7f9c:	65 67 69 73 74 65 72 20 70 61 67 65 2e 00           egister page..

00007faa <ledStartCLIDict_DescEntry>:
    7faa:	44 69 73 61 62 6c 65 20 73 6f 66 74 77 61 72 65     Disable software
    7fba:	20 73 68 75 74 64 6f 77 6e 2e 00 1b 5b 31 3b 33      shutdown...[1;3
    7fca:	35 6d 44 45 42 55 47 1b 5b 30 6d 20 2d 20 44 41     5mDEBUG.[0m - DA
    7fda:	54 41 3a 20 00 1b 5b 31 3b 33 33 6d 57 41 52 4e     TA: ..[1;33mWARN
    7fea:	49 4e 47 1b 5b 30 6d 20 2d 20 49 32 43 5f 42 75     ING.[0m - I2C_Bu
    7ffa:	66 66 65 72 50 75 73 68 20 66 61 69 6c 65 64 2c     fferPush failed,
    800a:	20 62 75 66 66 65 72 20 66 75 6c 6c 3a 20 00 1b      buffer full: ..
    801a:	5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b 5b 30     [1;5;31mERROR.[0
    802a:	6d 20 2d 20 4e 6f 20 62 75 66 66 65 72 20 74 6f     m - No buffer to
    803a:	20 70 6f 70 20 61 6e 20 65 6e 74 72 79 20 66 72      pop an entry fr
    804a:	6f 6d 2e 2e 2e 20 00 1b 5b 31 3b 35 3b 33 31 6d     om... ..[1;5;31m
    805a:	45 52 52 4f 52 1b 5b 30 6d 20 2d 20 49 32 43 20     ERROR.[0m - I2C 
    806a:	4e 41 4b 20 64 65 74 65 63 74 65 64 2e 2e 2e 0d     NAK detected....
    807a:	0a 00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52     ...[1;5;31mERROR
    808a:	1b 5b 30 6d 20 2d 20 41 72 62 69 74 72 61 74 69     .[0m - Arbitrati
    809a:	6f 6e 20 6c 6f 73 74 2e 2e 2e 0d 0a 00 1b 5b 31     on lost.......[1
    80aa:	3b 35 3b 33 31 6d 45 52 52 4f 52 1b 5b 30 6d 20     ;5;31mERROR.[0m 
    80ba:	2d 20 53 6c 61 76 65 20 41 64 64 72 65 73 73 20     - Slave Address 
    80ca:	49 32 43 20 4e 41 4b 20 64 65 74 65 63 74 65 64     I2C NAK detected
    80da:	2e 2e 2e 0d 0a 00 1b 5b 31 3b 33 35 6d 44 45 42     .......[1;35mDEB
    80ea:	55 47 1b 5b 30 6d 20 2d 20 41 74 74 65 6d 70 74     UG.[0m - Attempt
    80fa:	69 6e 67 20 74 6f 20 72 65 61 64 20 62 79 74 65     ing to read byte
    810a:	20 2d 20 00 1b 5b 31 3b 33 35 6d 44 45 42 55 47      - ..[1;35mDEBUG
    811a:	1b 5b 30 6d 20 2d 20 4e 45 58 54 0d 0a 00 1b 5b     .[0m - NEXT....[
    812a:	31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20     1;32mINFO.[0m - 
    813a:	53 65 6e 64 69 6e 67 3a 20 00 7c 20 00 4c 45 44     Sending: .| .LED
    814a:	5f 63 6f 6e 74 72 6f 6c 5f 63 61 70 61 62 69 6c     _control_capabil
    815a:	69 74 79 28 6d 6f 64 65 2c 61 6d 6f 75 6e 74 2c     ity(mode,amount,
    816a:	69 6e 64 65 78 29 00 69 32 63 52 65 63 76 00 69     index).i2cRecv.i
    817a:	32 63 53 65 6e 64 00 6c 65 64 43 74 72 6c 00 6c     2cSend.ledCtrl.l
    818a:	65 64 52 50 61 67 65 00 6c 65 64 53 74 61 72 74     edRPage.ledStart
    819a:	00 6c 65 64 54 65 73 74 00 6c 65 64 57 50 61 67     .ledTest.ledWPag
    81aa:	65 00 6c 65 64 5a 65 72 6f 00                       e.ledZero.

000081b4 <ledCtrlCLIDict_DescEntry>:
    81b4:	42 61 73 69 63 20 4c 45 44 20 63 6f 6e 74 72 6f     Basic LED contro
    81c4:	6c 2e 20 41 72 67 73 3a 20 3c 6d 6f 64 65 3e 20     l. Args: <mode> 
    81d4:	3c 61 6d 6f 75 6e 74 3e 20 5b 3c 69 6e 64 65 78     <amount> [<index
    81e4:	3e 5d 00                                            >].

000081e7 <LED_defaultBrightness1>:
    81e7:	e8 24 ff ff ff ff ff ff ff ff 00 00 00 00 00 00     .$..............
    81f7:	00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00 00     ................
    8207:	00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00 00     ................
    8217:	00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00 00     ................
    8227:	00 00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    8237:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8247:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8257:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8267:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8277:	00 00                                               ..

00008279 <ledZeroCLIDict_DescEntry>:
    8279:	5a 65 72 6f 20 6f 75 74 20 4c 45 44 20 72 65 67     Zero out LED reg
    8289:	69 73 74 65 72 20 70 61 67 65 73 20 28 6e 6f 6e     ister pages (non
    8299:	2d 63 6f 6e 66 69 67 75 72 61 74 69 6f 6e 29 2e     -configuration).
    82a9:	00                                                  .

000082aa <i2cRecvCLIDict_DescEntry>:
    82aa:	53 65 6e 64 20 49 32 43 20 73 65 71 75 65 6e 63     Send I2C sequenc
    82ba:	65 20 6f 66 20 62 79 74 65 73 20 61 6e 64 20 65     e of bytes and e
    82ca:	78 70 65 63 74 20 61 20 72 65 70 6c 79 20 6f 66     xpect a reply of
    82da:	20 31 20 62 79 74 65 20 6f 6e 20 74 68 65 20 6c      1 byte on the l
    82ea:	61 73 74 20 73 65 71 75 65 6e 63 65 2e 0d 0a 09     ast sequence....
    82fa:	09 55 73 65 20 7c 27 73 20 74 6f 20 73 70 6c 69     .Use |'s to spli
    830a:	74 20 73 65 71 75 65 6e 63 65 73 20 77 69 74 68     t sequences with
    831a:	20 61 20 73 74 6f 70 2e 00                           a stop..

00008323 <i2cSendCLIDict_DescEntry>:
    8323:	53 65 6e 64 20 49 32 43 20 73 65 71 75 65 6e 63     Send I2C sequenc
    8333:	65 20 6f 66 20 62 79 74 65 73 2e 20 55 73 65 20     e of bytes. Use 
    8343:	7c 27 73 20 74 6f 20 73 70 6c 69 74 20 73 65 71     |'s to split seq
    8353:	75 65 6e 63 65 73 20 77 69 74 68 20 61 20 73 74     uences with a st
    8363:	6f 70 2e 00                                         op..

00008367 <LED_ledEnableMask1>:
    8367:	e8 00 ff 00 ff 00 ff 00 ff 00 3f 00 00 00 00 00     ..........?.....
    8377:	00 00 00 00                                         ....

0000837b <ledCLIDictName>:
    837b:	49 53 53 49 20 4c 45 44 20 4d 6f 64 75 6c 65 20     ISSI LED Module 
    838b:	43 6f 6d 6d 61 6e 64 73 00                          Commands.

00008394 <matrixDebugCLIDict_DescEntry>:
    8394:	45 6e 61 62 6c 65 73 20 6d 61 74 72 69 78 20 64     Enables matrix d
    83a4:	65 62 75 67 20 6d 6f 64 65 2c 20 70 72 69 6e 74     ebug mode, print
    83b4:	73 20 6f 75 74 20 65 61 63 68 20 73 63 61 6e 20     s out each scan 
    83c4:	63 6f 64 65 2e 0d 0a 09 09 49 66 20 61 72 67 75     code.....If argu
    83d4:	6d 65 6e 74 20 1b 5b 33 35 6d 54 1b 5b 30 6d 20     ment .[35mT.[0m 
    83e4:	69 73 20 67 69 76 65 6e 2c 20 70 72 69 6e 74 73     is given, prints
    83f4:	20 6f 75 74 20 65 61 63 68 20 73 63 61 6e 20 63      out each scan c
    8404:	6f 64 65 20 73 74 61 74 65 20 74 72 61 6e 73 69     ode state transi
    8414:	74 69 6f 6e 2e 00 1b 5b 31 3b 33 32 6d 49 4e 46     tion...[1;32mINF
    8424:	4f 1b 5b 30 6d 20 2d 20 43 6f 6c 75 6d 6e 73 3a     O.[0m - Columns:
    8434:	20 20 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b       ..[1;32mINFO.[
    8444:	30 6d 20 2d 20 52 6f 77 73 3a 20 20 20 20 20 00     0m - Rows:     .
    8454:	1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20     .[1;32mINFO.[0m 
    8464:	2d 20 4d 61 78 20 4b 65 79 73 3a 20 00 1b 5b 31     - Max Keys: ..[1
    8474:	3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 4d     ;32mINFO.[0m - M
    8484:	61 74 72 69 78 20 44 65 62 75 67 20 4d 6f 64 65     atrix Debug Mode
    8494:	3a 20 00 1b 5b 31 6d 4f 1b 5b 30 6d 00 1b 5b 31     : ..[1mO.[0m..[1
    84a4:	3b 33 33 6d 50 1b 5b 30 6d 00 1b 5b 31 3b 33 32     ;33mP.[0m..[1;32
    84b4:	6d 48 1b 5b 30 6d 00 1b 5b 31 3b 33 35 6d 52 1b     mH.[0m..[1;35mR.
    84c4:	5b 30 6d 00 1b 5b 31 3b 33 31 6d 49 1b 5b 30 6d     [0m..[1;31mI.[0m
    84d4:	00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b     ..[1;5;31mERROR.
    84e4:	5b 30 6d 20 2d 20 4d 61 74 72 69 78 20 73 63 61     [0m - Matrix sca
    84f4:	6e 20 62 75 67 21 21 20 52 65 70 6f 72 74 20 6d     n bug!! Report m
    8504:	65 21 0d 0a 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f     e!....[1;32mINFO
    8514:	1b 5b 30 6d 20 2d 20 4d 61 78 20 73 63 61 6e 73     .[0m - Max scans
    8524:	3a 20 20 20 20 20 20 00 1b 5b 31 3b 33 32 6d 49     :      ..[1;32mI
    8534:	4e 46 4f 1b 5b 30 6d 20 2d 20 50 72 65 76 69 6f     NFO.[0m - Previo
    8544:	75 73 20 73 63 61 6e 73 3a 20 00 1b 5b 31 3b 33     us scans: ..[1;3
    8554:	32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 53 63 61     2mINFO.[0m - Sca
    8564:	6e 20 4e 75 6d 62 65 72 3a 20 20 20 20 00 3c 6b     n Number:    .<k
    8574:	65 79 3e 3a 3c 70 72 65 76 69 6f 75 73 20 73 74     ey>:<previous st
    8584:	61 74 65 3e 3c 63 75 72 72 65 6e 74 20 73 74 61     ate><current sta
    8594:	74 65 3e 20 3c 61 63 74 69 76 65 20 63 6f 75 6e     te> <active coun
    85a4:	74 3e 20 3c 69 6e 61 63 74 69 76 65 20 63 6f 75     t> <inactive cou
    85b4:	6e 74 3e 00 1b 5b 31 6d 30 78 00 3a 00 20 30 78     nt>..[1m0x.:. 0x
    85c4:	00 6d 61 74 72 69 78 44 65 62 75 67 00 6d 61 74     .matrixDebug.mat
    85d4:	72 69 78 49 6e 66 6f 00 6d 61 74 72 69 78 53 74     rixInfo.matrixSt
    85e4:	61 74 65 00                                         ate.

000085e8 <matrixStateCLIDict_DescEntry>:
    85e8:	50 72 69 6e 74 73 20 6f 75 74 20 74 68 65 20 63     Prints out the c
    85f8:	75 72 72 65 6e 74 20 73 63 61 6e 20 74 61 62 6c     urrent scan tabl
    8608:	65 20 4e 20 74 69 6d 65 73 2e 0d 0a 09 09 20 1b     e N times..... .
    8618:	5b 31 6d 4f 1b 5b 30 6d 20 2d 20 4f 66 66 2c 20     [1mO.[0m - Off, 
    8628:	1b 5b 31 3b 33 33 6d 50 1b 5b 30 6d 20 2d 20 50     .[1;33mP.[0m - P
    8638:	72 65 73 73 2c 20 1b 5b 31 3b 33 32 6d 48 1b 5b     ress, .[1;32mH.[
    8648:	30 6d 20 2d 20 48 6f 6c 64 2c 20 1b 5b 31 3b 33     0m - Hold, .[1;3
    8658:	35 6d 52 1b 5b 30 6d 20 2d 20 52 65 6c 65 61 73     5mR.[0m - Releas
    8668:	65 2c 20 1b 5b 31 3b 33 31 6d 49 1b 5b 30 6d 20     e, .[1;31mI.[0m 
    8678:	2d 20 49 6e 76 61 6c 69 64 00                       - Invalid.

00008682 <matrixInfoCLIDict_DescEntry>:
    8682:	50 72 69 6e 74 20 69 6e 66 6f 20 61 62 6f 75 74     Print info about
    8692:	20 74 68 65 20 63 6f 6e 66 69 67 75 72 65 64 20      the configured 
    86a2:	6d 61 74 72 69 78 2e 00                             matrix..

000086aa <matrixCLIDictName>:
    86aa:	4d 61 74 72 69 78 20 4d 6f 64 75 6c 65 20 43 6f     Matrix Module Co
    86ba:	6d 6d 61 6e 64 73 00 00 00 00                       mmands....

000086c4 <matrixCLIDict>:
    86c4:	c5 85 00 00 94 83 00 00 f1 2f 00 00 d1 85 00 00     ........./......
    86d4:	82 86 00 00 79 2f 00 00 dc 85 00 00 e8 85 00 00     ....y/..........
    86e4:	cd 2f 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ./..............
    86f4:	00 00 00 ff ff ff ff ff ff 3f 3f 3f 3f 3f 3f 3f     .........???????
    8704:	3f 3f 3f 3f 3f 3f 3f ff ff ff ff ff ff 00 00 00     ???????.........
    8714:	00 00 00 ff ff ff ff ff ff 00 00 00 00 00 00 00     ................
    8724:	00 00 00 00 00 00 00 ff ff ff ff ff ff 00 00 00     ................
    8734:	00 00 00 ff ff ff ff ff ff 00 00 00 00 00 00 00     ................
    8744:	00 00 00 00 00 00 00 ff ff ff ff ff ff 00 00 00     ................
    8754:	00 00 00 ff ff ff ff ff ff fc fc fc fc fc fc fc     ................
    8764:	fc fc fc fc fc fc fc ff ff ff ff ff ff 00 00 00     ................
    8774:	00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff     ................
    8784:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8794:	00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff     ................
    87a4:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    87b4:	00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff     ................
    87c4:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    87d4:	00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff     ................
    87e4:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    87f4:	00 00 00 ff ff ff ff ff ff 3f 3f 3f 3f 3f 3f 3f     .........???????
    8804:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 00 00 00     ?????????????...
    8814:	00 00 00 ff ff ff ff ff ff e0 e0 e0 e0 e0 e0 e0     ................
    8824:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 00 00 00     ................
    8834:	00 00 00 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    8844:	07 07 07 07 07 07 07 ff ff ff ff ff ff 00 00 00     ................
    8854:	00 00 00 fc fc fc fc fc fc fc fc fc fc fc fc fc     ................
    8864:	fc fc fc fc fc fc fc ff ff ff ff ff ff 00 00 00     ................
    8874:	00 00 00 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ...?????????????
    8884:	3f 3f 3f 3f 3f 3f 3f ff ff ff ff ff ff 00 00 00     ???????.........
    8894:	00 00 00 00 00 00 00 00 00 e0 e0 e0 e0 e0 e0 e0     ................
    88a4:	e0 e0 e0 e0 e0 e0 e0 ff ff ff ff ff ff 00 00 00     ................
    88b4:	00 00 00 00 00 00 00 00 00 07 07 07 07 07 07 07     ................
    88c4:	07 07 07 07 07 07 07 ff ff ff ff ff ff 00 00 00     ................
    88d4:	00 00 00 fc fc fc fc fc fc fc fc fc fc fc fc fc     ................
    88e4:	fc fc fc fc fc fc fc ff ff ff ff ff ff 00 00 00     ................
    88f4:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8904:	00 00 00 00 00 00 00 ff ff ff ff ff ff 00 00 00     ................
    8914:	00 00 00 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    8924:	e0 e0 e0 e0 e0 e0 e0 ff ff ff ff ff ff 00 00 00     ................
    8934:	00 00 00 ff ff ff ff ff ff 07 07 07 07 07 07 07     ................
    8944:	07 07 07 07 07 07 07 ff ff ff ff ff ff 00 00 00     ................
    8954:	00 00 00 ff ff ff ff ff ff 00 00 00 00 00 00 00     ................
    8964:	00 00 00 00 00 00 00 ff ff ff ff ff ff 00 00 00     ................
    8974:	00 00 00 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ...?????????????
    8984:	3f 3f 3f 3f 3f 3f 3f ff ff ff ff ff ff 00 00 00     ???????.........
    8994:	00 00 00 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    89a4:	e0 e0 e0 e0 e0 e0 e0 ff ff ff ff ff ff 00 00 00     ................
    89b4:	00 00 00 ff ff ff ff ff ff 07 07 07 07 07 07 07     ................
    89c4:	07 07 07 07 07 07 07 07 07 07 07 07 07 00 00 00     ................
    89d4:	00 00 00 ff ff ff ff ff ff fc fc fc fc fc fc fc     ................
    89e4:	fc fc fc fc fc fc fc fc fc fc fc fc fc 00 00 00     ................
    89f4:	00 00 00 ff ff ff ff ff ff 3f 3f 3f 3f 3f 3f 3f     .........???????
    8a04:	3f 3f 3f 3f 3f 3f 3f ff ff ff ff ff ff 00 00 00     ???????.........
    8a14:	00 00 00 ff ff ff ff ff ff e0 e0 e0 e0 e0 e0 e0     ................
    8a24:	e0 e0 e0 e0 e0 e0 e0 ff ff ff ff ff ff 00 00 00     ................
    8a34:	00 00 00 ff ff ff ff ff ff 07 07 07 07 07 07 07     ................
    8a44:	07 07 07 07 07 07 07 07 07 07 07 07 07 00 00 00     ................
    8a54:	00 00 00 ff ff ff ff ff ff fc fc fc fc fc fc fc     ................
    8a64:	fc fc fc fc fc fc fc fc fc fc fc fc fc 00 00 00     ................
    8a74:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8a84:	00 00 00 00 00 00 00 ff ff ff ff ff ff 00 00 00     ................
    8a94:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8aa4:	e0 e0 e0 e0 e0 e0 e0 ff ff ff ff ff ff 00 00 00     ................
    8ab4:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8ac4:	07 07 07 07 07 07 07 ff ff ff ff ff ff 00 00 00     ................
    8ad4:	00 00 00 fc fc fc fc fc fc fc fc fc fc fc fc fc     ................
    8ae4:	fc fc fc fc fc fc fc ff ff ff ff ff ff 00 00 00     ................
    8af4:	00 00 00 ff ff ff ff ff ff 3f 3f 3f 3f 3f 3f 3f     .........???????
    8b04:	3f 3f 3f 3f 3f 3f 3f ff ff ff ff ff ff 00 00 00     ???????.........
    8b14:	00 00 00 ff ff ff ff ff ff e0 e0 e0 e0 e0 e0 e0     ................
    8b24:	e0 e0 e0 e0 e0 e0 e0 ff ff ff ff ff ff 00 00 00     ................
    8b34:	00 00 00 ff ff ff ff ff ff 07 07 07 07 07 07 07     ................
    8b44:	07 07 07 07 07 07 07 ff ff ff ff ff ff 00 00 00     ................
    8b54:	00 00 00 ff ff ff ff ff ff fc fc fc fc fc fc fc     ................
    8b64:	fc fc fc fc fc fc fc ff ff ff ff ff ff 00 00 00     ................
    8b74:	00 00 00 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ...?????????????
    8b84:	3f 3f 3f 3f 3f 3f 3f ff ff ff ff ff ff 00 00 00     ???????.........
    8b94:	00 00 00 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    8ba4:	e0 e0 e0 e0 e0 e0 e0 ff ff ff ff ff ff 00 00 00     ................
    8bb4:	00 00 00 ff ff ff ff ff ff 07 07 07 07 07 07 07     ................
    8bc4:	07 07 07 07 07 07 07 ff ff ff ff ff ff 00 00 00     ................
    8bd4:	00 00 00 ff ff ff ff ff ff fc fc fc fc fc fc fc     ................
    8be4:	fc fc fc fc fc fc fc ff ff ff ff ff ff 00 00 00     ................
    8bf4:	39 b9 ea aa 8d 8d a8 a8 27 27 a0 1f 4b 4b 8d 8d     9.......''..KK..
    8c04:	b5 34 00 00 42 82 f3 b3 f6 f6 a5 a5 49 49 b7 b7     .4..B.......II..
    8c14:	5d 5d 45 85 fc bc f6 b6 2d 2d c1 00 7e 7e 3c 3c     ]]E.....--..~~<<
    8c24:	03 83 94 13 f9 b9 ca 09 d3 12 84 84                 ............

00008c30 <lcdTestCLIDict_DescEntry>:
    8c30:	54 65 73 74 20 6f 75 74 20 74 68 65 20 4c 43 44     Test out the LCD
    8c40:	20 64 69 73 70 6c 61 79 2e 00                        display..

00008c4a <lcdCLIDictName>:
    8c4a:	53 54 20 4c 43 44 20 4d 6f 64 75 6c 65 20 43 6f     ST LCD Module Co
    8c5a:	6d 6d 61 6e 64 73 00 00 00 00                       mmands....

00008c64 <lcdCLIDict>:
    8c64:	25 8d 00 00 4d 8d 00 00 91 35 00 00 2c 8d 00 00     %...M....5..,...
    8c74:	91 8f 00 00 b5 34 00 00 35 8d 00 00 d6 8f 00 00     .....4..5.......
    8c84:	e1 35 00 00 3d 8d 00 00 24 90 00 00 57 37 00 00     .5..=...$...W7..
    8c94:	45 8d 00 00 30 8c 00 00 89 36 00 00 00 00 00 00     E...0....6......
    8ca4:	00 00 00 00 00 00 00 00 1b 5b 31 3b 33 32 6d 49     .........[1;32mI
    8cb4:	4e 46 4f 1b 5b 30 6d 20 2d 20 53 65 6e 64 69 6e     NFO.[0m - Sendin
    8cc4:	67 20 2d 20 00 4c 43 44 5f 6c 61 79 65 72 53 74     g - .LCD_layerSt
    8cd4:	61 63 6b 45 78 61 63 74 5f 63 61 70 61 62 69 6c     ackExact_capabil
    8ce4:	69 74 79 28 6e 75 6d 2c 6c 61 79 65 72 31 2c 6c     ity(num,layer1,l
    8cf4:	61 79 65 72 32 2c 6c 61 79 65 72 33 2c 6c 61 79     ayer2,layer3,lay
    8d04:	65 72 34 29 00 4c 43 44 5f 6c 61 79 65 72 53 74     er4).LCD_layerSt
    8d14:	61 63 6b 5f 63 61 70 61 62 69 6c 69 74 79 28 29     ack_capability()
    8d24:	00 6c 63 64 43 6d 64 00 6c 63 64 43 6f 6c 6f 72     .lcdCmd.lcdColor
    8d34:	00 6c 63 64 44 69 73 70 00 6c 63 64 49 6e 69 74     .lcdDisp.lcdInit
    8d44:	00 6c 63 64 54 65 73 74 00                          .lcdTest.

00008d4d <lcdCmdCLIDict_DescEntry>:
    8d4d:	53 65 6e 64 20 62 79 74 65 20 76 69 61 20 53 50     Send byte via SP
    8d5d:	49 2c 20 73 65 63 6f 6e 64 20 61 72 67 75 6d 65     I, second argume
    8d6d:	6e 74 20 65 6e 61 62 6c 65 73 20 61 30 2e 20 44     nt enables a0. D
    8d7d:	65 66 61 75 6c 74 73 20 74 6f 20 63 6f 6e 74 72     efaults to contr
    8d8d:	6f 6c 2e 00                                         ol..

00008d91 <STLcdDefaultImage>:
    8d91:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8da1:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8db1:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    8dc1:	c0 c0 c0 c0 c0 00 00 00 00 00 00 00 00 00 00 00     ................
    8dd1:	ff ff ff ff ff 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    8de1:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    8df1:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8e01:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8e11:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8e21:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8e31:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    8e41:	03 03 03 03 03 00 00 00 00 00 00 00 00 00 00 00     ................
    8e51:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    8e61:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8e71:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8e81:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8e91:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8ea1:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8eb1:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    8ec1:	c0 c0 c0 c0 c0 00 00 00 00 00 00 00 00 00 00 00     ................
    8ed1:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    8ee1:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8ef1:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8f01:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8f11:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8f21:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8f31:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    8f41:	03 03 03 03 03 00 00 00 00 00 00 00 00 00 00 00     ................
    8f51:	ff ff ff ff ff f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    8f61:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    8f71:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8f81:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

00008f91 <lcdColorCLIDict_DescEntry>:
    8f91:	53 65 74 20 62 61 63 6b 6c 69 67 68 74 20 63 6f     Set backlight co
    8fa1:	6c 6f 72 2e 20 33 20 31 36 2d 62 69 74 20 6e 75     lor. 3 16-bit nu
    8fb1:	6d 62 65 72 73 3a 20 52 20 47 20 42 2e 20 69 2e     mbers: R G B. i.
    8fc1:	65 2e 20 30 78 46 46 46 20 30 78 31 34 34 34 20     e. 0xFFF 0x1444 
    8fd1:	30 78 33 32 00                                      0x32.

00008fd6 <lcdDispCLIDict_DescEntry>:
    8fd6:	57 72 69 74 65 20 62 79 74 65 28 73 29 20 74 6f     Write byte(s) to
    8fe6:	20 67 69 76 65 6e 20 70 61 67 65 20 73 74 61 72      given page star
    8ff6:	74 69 6e 67 20 61 74 20 67 69 76 65 6e 20 61 64     ting at given ad
    9006:	64 72 65 73 73 2e 20 69 2e 65 2e 20 30 78 31 20     dress. i.e. 0x1 
    9016:	30 78 35 20 30 78 46 46 20 30 78 30 30 00           0x5 0xFF 0x00.

00009024 <lcdInitCLIDict_DescEntry>:
    9024:	52 65 2d 69 6e 69 74 69 61 6c 69 7a 65 20 74 68     Re-initialize th
    9034:	65 20 4c 43 44 20 64 69 73 70 6c 61 79 2e 00 00     e LCD display...
    9044:	f7 95 00 00 02 96 00 00 0c 96 00 00 1a 96 00 00     ................
    9054:	23 96 00 00 2c 96 00 00 36 96 00 00 47 96 00 00     #...,...6...G...
    9064:	54 96 00 00 16 01 16 01 01 00 01 05 00 03 16 00     T...............

00009074 <uartConnectCLIDict>:
    9074:	60 96 00 00 74 97 00 00 c5 43 00 00 6b 96 00 00     `...t....C..k...
    9084:	d4 90 00 00 59 3a 00 00 76 96 00 00 e0 97 00 00     ....Y:..v.......
    9094:	51 45 00 00 81 96 00 00 ad 96 00 00 b5 3b 00 00     QE...........;..
    90a4:	8c 96 00 00 fb 96 00 00 55 3d 00 00 97 96 00 00     ........U=......
    90b4:	39 97 00 00 d1 45 00 00 a2 96 00 00 f3 90 00 00     9....E..........
    90c4:	0d 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .<..............

000090d4 <connectDbgCLIDict_DescEntry>:
    90d4:	54 6f 67 67 6c 65 20 55 41 52 54 43 6f 6e 6e 65     Toggle UARTConne
    90e4:	63 74 20 64 65 62 75 67 20 6d 6f 64 65 2e 00        ct debug mode..

000090f3 <connectStsCLIDict_DescEntry>:
    90f3:	55 41 52 54 43 6f 6e 6e 65 63 74 20 73 74 61 74     UARTConnect stat
    9103:	75 73 2e 00 1b 5b 31 3b 33 35 6d 44 45 42 55 47     us...[1;35mDEBUG
    9113:	1b 5b 30 6d 20 2d 20 41 6e 69 6d 61 74 69 6f 6e     .[0m - Animation
    9123:	0d 0a 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b     ....[1;32mINFO.[
    9133:	30 6d 20 2d 20 43 6f 6e 6e 65 63 74 20 44 65 62     0m - Connect Deb
    9143:	75 67 20 4d 6f 64 65 20 54 6f 67 67 6c 65 00 1b     ug Mode Toggle..
    9153:	5b 31 3b 33 35 6d 44 45 42 55 47 1b 5b 30 6d 20     [1;35mDEBUG.[0m 
    9163:	2d 20 50 45 4e 44 49 4e 47 20 53 45 54 20 2d 3e     - PENDING SET ->
    9173:	20 00 1b 5b 31 3b 33 33 6d 57 41 52 4e 49 4e 47      ..[1;33mWARNING
    9183:	1b 5b 30 6d 20 2d 20 43 61 62 6c 65 20 46 61 75     .[0m - Cable Fau
    9193:	6c 74 21 0d 0a 00 20 53 6c 61 76 65 20 00 20 4d     lt!... Slave . M
    91a3:	61 73 74 65 72 20 00 1b 5b 31 3b 33 35 6d 44 45     aster ..[1;35mDE
    91b3:	42 55 47 1b 5b 30 6d 20 2d 20 43 41 42 4c 45 43     BUG.[0m - CABLEC
    91c3:	48 45 43 4b 20 52 45 43 45 49 56 45 20 2d 20 00     HECK RECEIVE - .
    91d3:	1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20     .[1;32mINFO.[0m 
    91e3:	2d 20 4c 69 73 74 20 6f 66 20 55 41 52 54 43 6f     - List of UARTCo
    91f3:	6e 6e 65 63 74 20 63 6f 6d 6d 61 6e 64 73 00 4d     nnect commands.M
    9203:	61 73 74 65 72 00 53 6c 61 76 65 00 1b 5b 31 3b     aster.Slave..[1;
    9213:	33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 55 41     32mINFO.[0m - UA
    9223:	52 54 43 6f 6e 6e 65 63 74 20 53 74 61 74 75 73     RTConnect Status
    9233:	00 0d 0a 44 65 76 69 63 65 20 54 79 70 65 3a 09     ...Device Type:.
    9243:	00 0d 0a 44 65 76 69 63 65 20 49 64 3a 09 00 0d     ...Device Id:...
    9253:	0a 4d 61 78 20 49 64 3a 09 00 0d 0a 4d 61 73 74     .Max Id:....Mast
    9263:	65 72 20 3c 3d 0d 0a 09 53 74 61 74 75 73 3a 09     er <=...Status:.
    9273:	00 0d 0a 09 46 61 75 6c 74 73 3a 09 00 2f 00 0d     ....Faults:../..
    9283:	0a 09 52 78 3a 09 00 0d 0a 09 54 78 3a 09 00 0d     ..Rx:.....Tx:...
    9293:	0a 53 6c 61 76 65 20 3c 3d 0d 0a 09 53 74 61 74     .Slave <=...Stat
    92a3:	75 73 3a 09 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f     us:...[1;32mINFO
    92b3:	1b 5b 30 6d 20 2d 20 53 65 74 74 69 6e 67 20 64     .[0m - Setting d
    92c3:	65 76 69 63 65 20 61 73 20 73 6c 61 76 65 2e 00     evice as slave..
    92d3:	1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20     .[1;32mINFO.[0m 
    92e3:	2d 20 53 65 74 74 69 6e 67 20 64 65 76 69 63 65     - Setting device
    92f3:	20 61 73 20 6d 61 73 74 65 72 2e 00 1b 5b 31 3b      as master...[1;
    9303:	33 33 6d 57 41 52 4e 49 4e 47 1b 5b 30 6d 20 2d     33mWARNING.[0m -
    9313:	20 54 6f 6f 20 6d 75 63 68 20 64 61 74 61 20 74      Too much data t
    9323:	6f 20 73 65 6e 64 20 6f 6e 20 55 41 52 54 00 2c     o send on UART.,
    9333:	20 77 61 69 74 69 6e 67 2e 2e 2e 0d 0a 00 20 2b      waiting...... +
    9343:	00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b     ..[1;5;31mERROR.
    9353:	5b 30 6d 20 2d 20 49 6e 76 61 6c 69 64 20 53 63     [0m - Invalid Sc
    9363:	61 6e 43 6f 64 65 20 64 69 72 65 63 74 69 6f 6e     anCode direction
    9373:	2e 2e 2e 0d 0a 00 1b 5b 31 3b 33 33 6d 57 41 52     .......[1;33mWAR
    9383:	4e 49 4e 47 1b 5b 30 6d 20 2d 20 4e 6f 74 20 65     NING.[0m - Not e
    9393:	6e 6f 75 67 68 20 69 6e 74 65 72 63 6f 6e 6e 65     nough interconne
    93a3:	63 74 20 6c 61 79 6f 75 74 20 6e 6f 64 65 73 20     ct layout nodes 
    93b3:	63 6f 6e 66 69 67 75 72 65 64 3a 20 00 1b 5b 31     configured: ..[1
    93c3:	3b 33 35 6d 44 45 42 55 47 1b 5b 30 6d 20 2d 20     ;35mDEBUG.[0m - 
    93d3:	00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b     ..[1;5;31mERROR.
    93e3:	5b 30 6d 20 2d 20 54 6f 6f 20 62 69 67 20 6f 66     [0m - Too big of
    93f3:	20 61 20 63 6f 6d 6d 61 6e 64 20 74 6f 20 66 69      a command to fi
    9403:	74 20 69 6e 74 6f 20 74 68 65 20 62 75 66 66 65     t into the buffe
    9413:	72 2e 2e 2e 00 1b 5b 31 3b 35 3b 33 31 6d 45 52     r.....[1;5;31mER
    9423:	52 4f 52 1b 5b 30 6d 20 2d 20 49 6e 76 61 6c 69     ROR.[0m - Invali
    9433:	64 20 55 41 52 54 20 74 6f 20 73 65 6e 64 20 66     d UART to send f
    9443:	72 6f 6d 2e 2e 2e 0d 0a 00 1b 5b 31 3b 33 35 6d     rom.......[1;35m
    9453:	44 45 42 55 47 1b 5b 30 6d 20 2d 20 49 64 52 65     DEBUG.[0m - IdRe
    9463:	71 75 65 73 74 0d 0a 00 1b 5b 31 3b 35 3b 33 31     quest....[1;5;31
    9473:	6d 45 52 52 4f 52 1b 5b 30 6d 20 2d 20 49 6e 76     mERROR.[0m - Inv
    9483:	61 6c 69 64 20 49 64 52 65 71 75 65 73 74 20 64     alid IdRequest d
    9493:	69 72 65 63 74 69 6f 6e 2e 2e 2e 0d 0a 00 1b 5b     irection.......[
    94a3:	31 3b 33 35 6d 44 45 42 55 47 1b 5b 30 6d 20 2d     1;35mDEBUG.[0m -
    94b3:	20 49 64 45 6e 75 6d 65 72 61 74 69 6f 6e 0d 0a      IdEnumeration..
    94c3:	00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b     ..[1;5;31mERROR.
    94d3:	5b 30 6d 20 2d 20 49 6e 76 61 6c 69 64 20 49 64     [0m - Invalid Id
    94e3:	45 6e 75 6d 65 72 61 74 69 6f 6e 20 64 69 72 65     Enumeration dire
    94f3:	63 74 69 6f 6e 2e 2e 2e 0d 0a 00 1b 5b 31 3b 33     ction.......[1;3
    9503:	35 6d 44 45 42 55 47 1b 5b 30 6d 20 2d 20 49 64     5mDEBUG.[0m - Id
    9513:	52 65 70 6f 72 74 0d 0a 00 1b 5b 31 3b 33 32 6d     Report....[1;32m
    9523:	49 4e 46 4f 1b 5b 30 6d 20 2d 20 49 64 20 52 65     INFO.[0m - Id Re
    9533:	70 6f 72 74 65 64 3a 20 00 1b 5b 31 3b 33 32 6d     ported: ..[1;32m
    9543:	49 4e 46 4f 1b 5b 30 6d 20 2d 20 53 65 6e 64 69     INFO.[0m - Sendi
    9553:	6e 67 20 53 79 6e 63 20 49 64 6c 65 73 2e 2e 2e     ng Sync Idles...
    9563:	00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d     ..[1;32mINFO.[0m
    9573:	20 2d 20 52 65 73 65 74 74 69 6e 67 20 55 41 52      - Resetting UAR
    9583:	54 43 6f 6e 6e 65 63 74 20 73 74 61 74 65 2e 2e     TConnect state..
    9593:	2e 00 20 57 61 69 74 20 00 20 53 59 4e 20 00 20     .. Wait . SYN . 
    95a3:	53 4f 48 20 00 20 23 23 23 20 00 20 43 4d 44 20     SOH . ### . CMD 
    95b3:	00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b     ..[1;5;31mERROR.
    95c3:	5b 30 6d 20 2d 20 49 6e 76 61 6c 69 64 20 55 41     [0m - Invalid UA
    95d3:	52 54 53 74 61 74 75 73 2e 2e 2e 00 54 78 46 49     RTStatus....TxFI
    95e3:	46 4f 20 30 20 2d 20 00 54 78 46 49 46 4f 20 31     FO 0 - .TxFIFO 1
    95f3:	20 2d 20 00 43 61 62 6c 65 43 68 65 63 6b 00 49      - .CableCheck.I
    9603:	64 52 65 71 75 65 73 74 00 49 64 45 6e 75 6d 65     dRequest.IdEnume
    9613:	72 61 74 69 6f 6e 00 49 64 52 65 70 6f 72 74 00     ration.IdReport.
    9623:	53 63 61 6e 43 6f 64 65 00 41 6e 69 6d 61 74 69     ScanCode.Animati
    9633:	6f 6e 00 52 65 6d 6f 74 65 43 61 70 61 62 69 6c     on.RemoteCapabil
    9643:	69 74 79 00 52 65 6d 6f 74 65 4f 75 74 70 75 74     ity.RemoteOutput
    9653:	00 52 65 6d 6f 74 65 49 6e 70 75 74 00 63 6f 6e     .RemoteInput.con
    9663:	6e 65 63 74 43 6d 64 00 63 6f 6e 6e 65 63 74 44     nectCmd.connectD
    9673:	62 67 00 63 6f 6e 6e 65 63 74 49 64 6c 00 63 6f     bg.connectIdl.co
    9683:	6e 6e 65 63 74 4c 73 74 00 63 6f 6e 6e 65 63 74     nnectLst.connect
    9693:	4d 73 74 00 63 6f 6e 6e 65 63 74 52 73 74 00 63     Mst.connectRst.c
    96a3:	6f 6e 6e 65 63 74 53 74 73 00                       onnectSts.

000096ad <connectLstCLIDict_DescEntry>:
    96ad:	4c 69 73 74 73 20 61 76 61 69 6c 61 62 6c 65 20     Lists available 
    96bd:	55 41 52 54 43 6f 6e 6e 65 63 74 20 63 6f 6d 6d     UARTConnect comm
    96cd:	61 6e 64 73 20 61 6e 64 20 69 6e 64 65 78 20 69     ands and index i
    96dd:	64 00                                               d.

000096df <uartConnectCLIDictName>:
    96df:	55 41 52 54 43 6f 6e 6e 65 63 74 20 4d 6f 64 75     UARTConnect Modu
    96ef:	6c 65 20 43 6f 6d 6d 61 6e 64 73 00                 le Commands.

000096fb <connectMstCLIDict_DescEntry>:
    96fb:	53 65 74 73 20 74 68 65 20 64 65 76 69 63 65 20     Sets the device 
    970b:	61 73 20 6d 61 73 74 65 72 2e 20 55 73 65 20 61     as master. Use a
    971b:	72 67 75 6d 65 6e 74 20 6f 66 20 73 20 74 6f 20     rgument of s to 
    972b:	73 65 74 20 61 73 20 73 6c 61 76 65 2e 00           set as slave..

00009739 <connectRstCLIDict_DescEntry>:
    9739:	52 65 73 65 74 73 20 62 6f 74 68 20 52 78 20 61     Resets both Rx a
    9749:	6e 64 20 54 78 20 63 6f 6e 6e 65 63 74 20 62 75     nd Tx connect bu
    9759:	66 66 65 72 73 20 61 6e 64 20 73 74 61 74 65 20     ffers and state 
    9769:	76 61 72 69 61 62 6c 65 73 2e 00                    variables..

00009774 <connectCmdCLIDict_DescEntry>:
    9774:	53 65 6e 64 73 20 61 20 63 6f 6d 6d 61 6e 64 20     Sends a command 
    9784:	76 69 61 20 55 41 52 54 20 43 6f 6e 6e 65 63 74     via UART Connect
    9794:	2c 20 66 69 72 73 74 20 61 72 67 20 69 73 20 77     , first arg is w
    97a4:	68 69 63 68 20 75 61 72 74 2c 20 6e 65 78 74 20     hich uart, next 
    97b4:	61 72 67 20 69 73 20 74 68 65 20 63 6f 6d 6d 61     arg is the comma
    97c4:	6e 64 2c 20 72 65 73 74 20 61 72 65 20 74 68 65     nd, rest are the
    97d4:	20 61 72 67 75 6d 65 6e 74 73 2e 00                  arguments..

000097e0 <connectIdlCLIDict_DescEntry>:
    97e0:	53 65 6e 64 73 20 4e 20 6e 75 6d 62 65 72 20 6f     Sends N number o
    97f0:	66 20 49 64 6c 65 20 63 6f 6d 6d 61 6e 64 73 2c     f Idle commands,
    9800:	20 32 20 69 73 20 74 68 65 20 64 65 66 61 75 6c      2 is the defaul
    9810:	74 20 76 61 6c 75 65 2c 20 61 6e 64 20 73 68 6f     t value, and sho
    9820:	75 6c 64 20 62 65 20 73 75 66 66 69 63 69 65 6e     uld be sufficien
    9830:	74 20 69 6e 20 6d 6f 73 74 20 63 61 73 65 73 2e     t in most cases.
    9840:	00 00 00 00                                         ....

00009844 <default_tl_0x2B>:
    9844:	01 00 00 00 13 00 00 00                             ........

0000984c <default_tl_0x2C>:
    984c:	01 00 00 00 47 00 00 00                             ....G...

00009854 <default_tl_0x2D>:
    9854:	00 00 00 00                                         ....

00009858 <default_tl_0x2E>:
    9858:	00 00 00 00                                         ....

0000985c <default_tl_0x2F>:
    985c:	01 00 00 00 01 00 00 00                             ........

00009864 <rm24_guide>:
    9864:	01 0e 2a 00                                         ..*.

00009868 <tm24_guide>:
    9868:	01 00 01 3e 00                                      ...>.

0000986d <rm40_guide>:
    986d:	01 0e 14 00                                         ....

00009871 <rm92_guide>:
    9871:	01 0e 55 00 00 00 00                                ..U....

00009878 <default_tl_0x41>:
    9878:	00 00 00 00                                         ....

0000987c <tm18_guide>:
    987c:	01 00 01 3d 00 00 00 00                             ...=....

00009884 <default_tl_0x43>:
    9884:	01 00 00 00 05 00 00 00                             ........

0000988c <rm36_guide>:
    988c:	01 0e 4e 00                                         ..N.

00009890 <default_tl_0x44>:
    9890:	01 00 00 00 0a 00 00 00                             ........

00009898 <default_tl_0x45>:
    9898:	01 00 00 00 3e 00 00 00                             ....>...

000098a0 <default_tl_0x46>:
    98a0:	01 00 00 00 03 00 00 00                             ........

000098a8 <rm87_guide>:
    98a8:	01 0e 5a 00                                         ..Z.

000098ac <default_tl_0x47>:
    98ac:	01 00 00 00 07 00 00 00                             ........

000098b4 <macroCLIDictName>:
    98b4:	4d 61 63 72 6f 20 4d 6f 64 75 6c 65 20 43 6f 6d     Macro Module Com
    98c4:	6d 61 6e 64 73 00                                   mands.

000098ca <tm41_guide>:
    98ca:	01 00 01 21 00                                      ...!.

000098cf <tm93_guide>:
    98cf:	01 00 01 57 00                                      ...W.

000098d4 <keyReleaseCLIDict_DescEntry>:
    98d4:	53 65 6e 64 20 6b 65 79 2d 72 65 6c 65 61 73 65     Send key-release
    98e4:	20 65 76 65 6e 74 20 74 6f 20 6d 61 63 72 6f 20      event to macro 
    98f4:	6d 6f 64 75 6c 65 2e 20 44 75 70 6c 69 63 61 74     module. Duplicat
    9904:	65 73 20 68 61 76 65 20 75 6e 64 65 66 69 6e 65     es have undefine
    9914:	64 20 62 65 68 61 76 69 6f 75 72 2e 0d 0a 09 09     d behaviour.....
    9924:	1b 5b 33 35 6d 53 31 30 1b 5b 30 6d 20 53 63 61     .[35mS10.[0m Sca
    9934:	6e 63 6f 64 65 20 30 78 30 41 00                    ncode 0x0A.

0000993f <tm65_guide>:
    993f:	01 00 01 49 00                                      ...I.

00009944 <tm2_guide>:
    9944:	01 00 01 16 00                                      .....

00009949 <tm37_guide>:
    9949:	01 00 01 0f 00 00 00                                .......

00009950 <default_tl_0x30>:
    9950:	01 00 00 00 36 00 00 00                             ....6...

00009958 <default_tl_0x31>:
    9958:	01 00 00 00 43 00 00 00                             ....C...

00009960 <default_tl_0x32>:
    9960:	01 00 00 00 49 00 00 00                             ....I...

00009968 <default_tl_0x33>:
    9968:	01 00 00 00 32 00 00 00                             ....2...

00009970 <default_tl_0x34>:
    9970:	01 00 00 00 38 00 00 00                             ....8...

00009978 <default_tl_0x35>:
    9978:	01 00 00 00 3c 00 00 00                             ....<...

00009980 <tm101_guide>:
    9980:	01 00 01 4f 00 00 00 00                             ...O....

00009988 <default_tl_0x37>:
    9988:	00 00 00 00                                         ....

0000998c <default_tl_0x38>:
    998c:	01 00 00 00 27 00 00 00                             ....'...

00009994 <default_tl_0x39>:
    9994:	01 00 00 00 2b 00 00 00                             ....+...

0000999c <default_tl_0x4E>:
    999c:	01 00 00 00 2d 00 00 00                             ....-...

000099a4 <default_tl_0x3A>:
    99a4:	01 00 00 00 16 00 00 00                             ........

000099ac <default_tl_0x3B>:
    99ac:	01 00 00 00 24 00 00 00                             ....$...

000099b4 <default_tl_0x3C>:
    99b4:	01 00 00 00 28 00 00 00                             ....(...

000099bc <default_tl_0x3D>:
    99bc:	01 00 00 00 12 00 00 00                             ........

000099c4 <default_tl_0x3E>:
    99c4:	01 00 00 00 18 00 00 00                             ........

000099cc <default_tl_0x3F>:
    99cc:	00 00 00 00                                         ....

000099d0 <rm81_guide>:
    99d0:	01 0e 57 00                                         ..W.

000099d4 <macroStepCLIDict_DescEntry>:
    99d4:	44 6f 20 4e 20 6d 61 63 72 6f 20 70 72 6f 63 65     Do N macro proce
    99e4:	73 73 69 6e 67 20 73 74 65 70 73 2e 20 44 65 66     ssing steps. Def
    99f4:	61 75 6c 74 73 20 74 6f 20 31 2e 00                 aults to 1..

00009a00 <rm53_guide>:
    9a00:	01 0e 15 00                                         ....

00009a04 <rm25_guide>:
    9a04:	01 0e e5 00                                         ....

00009a08 <tm3_guide>:
    9a08:	01 00 01 46 00                                      ...F.

00009a0d <rm21_guide>:
    9a0d:	01 0e 18 00                                         ....

00009a11 <capSelectCLIDict_DescEntry>:
    9a11:	54 72 69 67 67 65 72 73 20 74 68 65 20 73 70 65     Triggers the spe
    9a21:	63 69 66 69 65 64 20 63 61 70 61 62 69 6c 69 74     cified capabilit
    9a31:	69 65 73 2e 20 46 69 72 73 74 20 74 77 6f 20 61     ies. First two a
    9a41:	72 67 73 20 61 72 65 20 73 74 61 74 65 20 61 6e     rgs are state an
    9a51:	64 20 73 74 61 74 65 54 79 70 65 2e 0d 0a 09 09     d stateType.....
    9a61:	1b 5b 33 35 6d 4b 31 31 1b 5b 30 6d 20 4b 65 79     .[35mK11.[0m Key
    9a71:	62 6f 61 72 64 20 43 61 70 61 62 69 6c 69 74 79     board Capability
    9a81:	20 30 78 30 42 00                                    0x0B.

00009a87 <rm77_guide>:
    9a87:	01 0e 3d 00                                         ..=.

00009a8b <InterconnectOffsetList>:
    9a8b:	2d 59                                               -Y

00009a8d <tm76_guide>:
    9a8d:	01 00 01 06 00                                      .....

00009a92 <rm49_guide>:
    9a92:	01 0e e1 00 00 00                                   ......

00009a98 <layer1_tl_0x02>:
    9a98:	01 00 00 00 4e 00 00 00                             ....N...

00009aa0 <layer1_tl_0x03>:
    9aa0:	01 00 00 00 4f 00 00 00                             ....O...

00009aa8 <layer1_tl_0x04>:
    9aa8:	01 00 00 00 56 00 00 00                             ....V...

00009ab0 <layer1_tl_0x05>:
    9ab0:	01 00 00 00 58 00 00 00                             ....X...

00009ab8 <layer1_tl_0x06>:
    9ab8:	01 00 00 00 4c 00 00 00                             ....L...

00009ac0 <layer1_tl_0x07>:
    9ac0:	01 00 00 00 51 00 00 00                             ....Q...

00009ac8 <layer1_tl_0x08>:
    9ac8:	01 00 00 00 54 00 00 00                             ....T...

00009ad0 <layer1_tl_0x09>:
    9ad0:	00 00 00 00                                         ....

00009ad4 <tm78_guide>:
    9ad4:	01 00 01 02 00 00 00 00                             ........

00009adc <macroCLIDict>:
    9adc:	5f b0 00 00 e4 9b 00 00 d1 4b 00 00 67 b0 00 00     _........K..g...
    9aec:	11 9a 00 00 51 4c 00 00 71 b0 00 00 00 a5 00 00     ....QL..q.......
    9afc:	51 54 00 00 79 b0 00 00 78 9f 00 00 7f 54 00 00     QT..y...x....T..
    9b0c:	82 b0 00 00 d4 98 00 00 ad 54 00 00 8d b0 00 00     .........T......
    9b1c:	90 a5 00 00 55 4d 00 00 98 b0 00 00 e9 a9 00 00     ....UM..........
    9b2c:	4d 4e 00 00 a2 b0 00 00 02 a9 00 00 85 4d 00 00     MN...........M..
    9b3c:	ad b0 00 00 58 a0 00 00 ed 4d 00 00 b8 b0 00 00     ....X....M......
    9b4c:	d1 a8 00 00 e1 4e 00 00 c2 b0 00 00 15 a6 00 00     .....N..........
    9b5c:	1d 4e 00 00 cc b0 00 00 41 b1 00 00 31 59 00 00     .N......A...1Y..
    9b6c:	d6 b0 00 00 d4 99 00 00 29 4c 00 00 00 00 00 00     ........)L......
    9b7c:	00 00 00 00 00 00 00 00                             ........

00009b84 <default_tl_0x40>:
    9b84:	00 00 00 00                                         ....

00009b88 <rm79_guide>:
    9b88:	01 0e 3c 00                                         ..<.

00009b8c <default_tl_0x42>:
    9b8c:	01 00 00 00 1c 00 00 00                             ........

00009b94 <layer1_tl_0x0B>:
    9b94:	00 00 00 00                                         ....

00009b98 <layer1_tl_0x0C>:
    9b98:	00 00 00 00                                         ....

00009b9c <layer1_tl_0x0D>:
    9b9c:	00 00 00 00                                         ....

00009ba0 <layer1_tl_0x0E>:
    9ba0:	00 00 00 00                                         ....

00009ba4 <layer1_tl_0x0F>:
    9ba4:	00 00 00 00                                         ....

00009ba8 <default_tl_0x48>:
    9ba8:	01 00 00 00 3b 00 00 00                             ....;...

00009bb0 <default_tl_0x49>:
    9bb0:	01 00 00 00 41 00 00 00                             ....A...

00009bb8 <default_tl_0x57>:
    9bb8:	01 00 00 00 11 00 00 00                             ........

00009bc0 <rm12_guide>:
    9bc0:	01 0e 51 00                                         ..Q.

00009bc4 <default_tl_0x4A>:
    9bc4:	01 00 00 00 46 00 00 00                             ....F...

00009bcc <default_tl_0x4B>:
    9bcc:	01 00 00 00 2f 00 00 00                             ..../...

00009bd4 <default_tl_0x4C>:
    9bd4:	01 00 00 00 35 00 00 00                             ....5...

00009bdc <default_tl_0x4D>:
    9bdc:	01 00 00 00 1e 00 00 00                             ........

00009be4 <capListCLIDict_DescEntry>:
    9be4:	50 72 69 6e 74 73 20 61 6e 20 69 6e 64 65 78 65     Prints an indexe
    9bf4:	64 20 6c 69 73 74 20 6f 66 20 61 6c 6c 20 6e 6f     d list of all no
    9c04:	6e 20 55 53 42 20 6b 65 79 63 6f 64 65 20 63 61     n USB keycode ca
    9c14:	70 61 62 69 6c 69 74 69 65 73 2e 00                 pabilities..

00009c20 <default_tl_0x4F>:
    9c20:	01 00 00 00 31 00 00 00                             ....1...

00009c28 <tm108_guide>:
    9c28:	01 00 01 32 00 00 00 00                             ...2....

00009c30 <default_tl_0x55>:
    9c30:	01 00 00 00 48 00 00 00                             ....H...

00009c38 <rm70_guide>:
    9c38:	01 0e 44 00                                         ..D.

00009c3c <tm13_guide>:
    9c3c:	01 00 01 03 00                                      .....

00009c41 <rm42_guide>:
    9c41:	01 0e 05 00                                         ....

00009c45 <rm46_guide>:
    9c45:	01 0e 17 00 00 00 00                                .......

00009c4c <ResultMacroList>:
    9c4c:	a3 a9 00 00 cb a8 00 00 e2 a7 00 00 ee a7 00 00     ................
    9c5c:	0a a7 00 00 f5 9d 00 00 45 a8 00 00 09 a0 00 00     ........E.......
    9c6c:	ac a7 00 00 b3 a4 00 00 29 b2 00 00 88 a6 00 00     ........).......
    9c7c:	c0 9b 00 00 ea a7 00 00 c0 a0 00 00 03 a8 00 00     ................
    9c8c:	f3 9f 00 00 96 a9 00 00 65 a4 00 00 3d b1 00 00     ........e...=...
    9c9c:	69 a4 00 00 0d 9a 00 00 84 a4 00 00 31 b1 00 00     i...........1...
    9cac:	64 98 00 00 04 9a 00 00 00 a0 00 00 93 9e 00 00     d...............
    9cbc:	a6 a8 00 00 cc a0 00 00 e6 a7 00 00 87 9e 00 00     ................
    9ccc:	9a a8 00 00 bc a0 00 00 3d aa 00 00 fc a4 00 00     ........=.......
    9cdc:	8c 98 00 00 4d a4 00 00 4f a0 00 00 20 b2 00 00     ....M...O... ...
    9cec:	6d 98 00 00 bf a6 00 00 41 9c 00 00 ff a7 00 00     m.......A.......
    9cfc:	ef 9f 00 00 92 a9 00 00 45 9c 00 00 39 b1 00 00     ........E...9...
    9d0c:	4f a6 00 00 92 9a 00 00 72 a4 00 00 2d b1 00 00     O.......r...-...
    9d1c:	76 a6 00 00 00 9a 00 00 31 aa 00 00 8f 9e 00 00     v.......1.......
    9d2c:	a2 a8 00 00 c8 a0 00 00 48 aa 00 00 61 a7 00 00     ........H...a...
    9d3c:	4b a6 00 00 b8 a0 00 00 39 aa 00 00 5e a8 00 00     K.......9...^...
    9d4c:	f1 a5 00 00 51 aa 00 00 d4 9d 00 00 96 a8 00 00     ....Q...........
    9d5c:	f7 9f 00 00 9a a9 00 00 38 9c 00 00 f6 a7 00 00     ........8.......
    9d6c:	e6 9f 00 00 8e a9 00 00 88 a4 00 00 35 b1 00 00     ............5...
    9d7c:	48 a6 00 00 87 9a 00 00 84 a6 00 00 88 9b 00 00     H...............
    9d8c:	08 a6 00 00 d0 99 00 00 70 a7 00 00 8b 9e 00 00     ........p.......
    9d9c:	9e a8 00 00 c4 a0 00 00 c2 a8 00 00 a8 98 00 00     ................
    9dac:	b4 a8 00 00 e8 a5 00 00 35 aa 00 00 fc a5 00 00     ........5.......
    9dbc:	71 98 00 00 d8 a6 00 00 74 9e 00 00 dd aa 00 00     q.......t.......
    9dcc:	f2 a7 00 00 67 a8 00 00                             ....g...

00009dd4 <rm66_guide>:
    9dd4:	01 0e 25 00                                         ..%.

00009dd8 <default_tl_0x52>:
    9dd8:	01 00 00 00 26 00 00 00                             ....&...

00009de0 <default_tl_0x53>:
    9de0:	01 00 00 00 0f 00 00 00                             ........

00009de8 <default_tl_0x54>:
    9de8:	01 00 00 00 15 00 00 00                             ........

00009df0 <tm71_guide>:
    9df0:	01 00 01 2c 00                                      ...,.

00009df5 <rm5_guide>:
    9df5:	01 0e 0d 00 00 00 00                                .......

00009dfc <default_tl_0x56>:
    9dfc:	01 00 00 00 0c 00 00 00                             ........

00009e04 <tm43_guide>:
    9e04:	01 00 01 39 00 00 00 00                             ...9....

00009e0c <layer1_tl_0x11>:
    9e0c:	00 00 00 00                                         ....

00009e10 <layer1_tl_0x12>:
    9e10:	00 00 00 00                                         ....

00009e14 <layer1_tl_0x13>:
    9e14:	00 00 00 00                                         ....

00009e18 <layer1_tl_0x14>:
    9e18:	00 00 00 00                                         ....

00009e1c <layer1_tl_0x15>:
    9e1c:	00 00 00 00                                         ....

00009e20 <layer1_tl_0x16>:
    9e20:	00 00 00 00                                         ....

00009e24 <layer1_tl_0x17>:
    9e24:	00 00 00 00                                         ....

00009e28 <tm4_guide>:
    9e28:	01 00 01 1a 00 00 00 00                             ........

00009e30 <layer1_tl_0x19>:
    9e30:	00 00 00 00                                         ....

00009e34 <tm39_guide>:
    9e34:	01 00 01 38 00 00 00 00                             ...8....

00009e3c <default_tl_0x50>:
    9e3c:	01 00 00 00 1b 00 00 00                             ........

00009e44 <default_tl_0x51>:
    9e44:	01 00 00 00 21 00 00 00                             ....!...

00009e4c <layer1_tl_0x1A>:
    9e4c:	00 00 00 00                                         ....

00009e50 <layer1_tl_0x1B>:
    9e50:	00 00 00 00                                         ....

00009e54 <layer1_tl_0x1C>:
    9e54:	00 00 00 00                                         ....

00009e58 <layer1_tl_0x1D>:
    9e58:	00 00 00 00                                         ....

00009e5c <layer1_tl_0x1E>:
    9e5c:	00 00 00 00                                         ....

00009e60 <layer1_tl_0x1F>:
    9e60:	00 00 00 00                                         ....

00009e64 <default_tl_0x58>:
    9e64:	01 00 00 00 44 00 00 00                             ....D...

00009e6c <default_tl_0x59>:
    9e6c:	01 00 00 00 4b 00 00 00                             ....K...

00009e74 <rm94_guide>:
    9e74:	01 0e 56 00                                         ..V.

00009e78 <tm97_guide>:
    9e78:	01 00 01 4d 00                                      ...M.

00009e7d <tm95_guide>:
    9e7d:	01 00 01 54 00                                      ...T.

00009e82 <tm30_guide>:
    9e82:	01 00 01 4d 00                                      ...M.

00009e87 <rm31_guide>:
    9e87:	01 0e 4b 00                                         ..K.

00009e8b <rm83_guide>:
    9e8b:	01 0e 5d 00                                         ..].

00009e8f <rm55_guide>:
    9e8f:	01 0e 2e 00                                         ....

00009e93 <rm27_guide>:
    9e93:	01 0e 4a 00                                         ..J.

00009e97 <tm60_guide>:
    9e97:	01 00 01 35 00                                      ...5.

00009e9c <tm84_guide>:
    9e9c:	01 00 01 08 00 00 00 00                             ........

00009ea4 <layer1_tl_0x20>:
    9ea4:	00 00 00 00                                         ....

00009ea8 <layer1_tl_0x21>:
    9ea8:	00 00 00 00                                         ....

00009eac <tm56_guide>:
    9eac:	01 00 01 34 00 00 00 00                             ...4....

00009eb4 <layer1_tl_0x23>:
    9eb4:	00 00 00 00                                         ....

00009eb8 <layer1_tl_0x24>:
    9eb8:	00 00 00 00                                         ....

00009ebc <tm28_guide>:
    9ebc:	01 00 01 42 00 00 00 00                             ...B....

00009ec4 <layer1_tl_0x26>:
    9ec4:	00 00 00 00                                         ....

00009ec8 <layer1_tl_0x27>:
    9ec8:	00 00 00 00                                         ....

00009ecc <layer1_tl_0x28>:
    9ecc:	00 00 00 00                                         ....

00009ed0 <layer1_tl_0x29>:
    9ed0:	00 00 00 00                                         ....

00009ed4 <layer1_tl_0x2A>:
    9ed4:	00 00 00 00                                         ....

00009ed8 <layer1_tl_0x0A>:
    9ed8:	00 00 00 00                                         ....

00009edc <layer1_tl_0x2C>:
    9edc:	00 00 00 00                                         ....

00009ee0 <layer1_tl_0x2D>:
    9ee0:	00 00 00 00                                         ....

00009ee4 <layer1_tl_0x2E>:
    9ee4:	00 00 00 00                                         ....

00009ee8 <layer1_tl_0x2F>:
    9ee8:	01 00 00 00 4d 00 00 00                             ....M...

00009ef0 <tm103_guide>:
    9ef0:	01 00 01 4c 00 00 00 00                             ...L....

00009ef8 <CapabilitiesList>:
    9ef8:	79 38 00 00 09 00 00 00 91 39 00 00 00 00 00 00     y8.......9......
    9f08:	e1 2e 00 00 04 00 00 00 35 51 00 00 02 00 00 00     ........5Q......
    9f18:	59 51 00 00 02 00 00 00 a1 51 00 00 01 00 00 00     YQ.......Q......
    9f28:	7d 51 00 00 02 00 00 00 11 51 00 00 03 00 00 00     }Q.......Q......
    9f38:	9d 5e 00 00 02 00 00 00 61 5f 00 00 00 00 00 00     .^......a_......
    9f48:	29 60 00 00 00 00 00 00 59 60 00 00 00 00 00 00     )`......Y`......
    9f58:	f5 5e 00 00 00 00 00 00 09 5f 00 00 01 00 00 00     .^......._......
    9f68:	8d 60 00 00 01 00 00 00 79 5f 00 00 06 00 00 00     .`......y_......

00009f78 <keyPressCLIDict_DescEntry>:
    9f78:	53 65 6e 64 20 6b 65 79 2d 70 72 65 73 73 20 65     Send key-press e
    9f88:	76 65 6e 74 73 20 74 6f 20 74 68 65 20 6d 61 63     vents to the mac
    9f98:	72 6f 20 6d 6f 64 75 6c 65 2e 20 44 75 70 6c 69     ro module. Dupli
    9fa8:	63 61 74 65 73 20 68 61 76 65 20 75 6e 64 65 66     cates have undef
    9fb8:	69 6e 65 64 20 62 65 68 61 76 69 6f 75 72 2e 0d     ined behaviour..
    9fc8:	0a 09 09 1b 5b 33 35 6d 53 31 30 1b 5b 30 6d 20     ....[35mS10.[0m 
    9fd8:	53 63 61 6e 63 6f 64 65 20 30 78 30 41 00           Scancode 0x0A.

00009fe6 <rm72_guide>:
    9fe6:	01 0e 42 00                                         ..B.

00009fea <tm15_guide>:
    9fea:	01 00 01 53 00                                      ...S.

00009fef <rm44_guide>:
    9fef:	01 0e 1d 00                                         ....

00009ff3 <rm16_guide>:
    9ff3:	01 0e 07 00                                         ....

00009ff7 <rm68_guide>:
    9ff7:	01 0e 3b 00                                         ..;.

00009ffb <tm87_guide>:
    9ffb:	01 00 01 31 00                                      ...1.

0000a000 <rm26_guide>:
    a000:	01 0e 0b 00                                         ....

0000a004 <tm73_guide>:
    a004:	01 00 01 32 00                                      ...2.

0000a009 <rm7_guide>:
    a009:	01 0e 34 00                                         ..4.

0000a00d <tm45_guide>:
    a00d:	01 00 01 4e 00                                      ...N.

0000a012 <tm17_guide>:
    a012:	01 00 01 57 00 00                                   ...W..

0000a018 <layer1_tl_0x31>:
    a018:	01 00 00 00 57 00 00 00                             ....W...

0000a020 <layer1_tl_0x32>:
    a020:	01 00 00 00 59 00 00 00                             ....Y...

0000a028 <layer1_tl_0x33>:
    a028:	01 00 00 00 50 00 00 00                             ....P...

0000a030 <tm69_guide>:
    a030:	01 00 01 05 00 00 00 00                             ........

0000a038 <layer1_tl_0x35>:
    a038:	01 00 00 00 55 00 00 00                             ....U...

0000a040 <tm35_guide>:
    a040:	01 00 01 0b 00                                      .....

0000a045 <tm105_guide>:
    a045:	01 00 01 45 00                                      ...E.

0000a04a <tm11_guide>:
    a04a:	01 00 01 26 00                                      ...&.

0000a04f <rm38_guide>:
    a04f:	01 0e 12 00                                         ....

0000a053 <tm48_guide>:
    a053:	01 00 01 0c 00                                      .....

0000a058 <macroDebugCLIDict_DescEntry>:
    a058:	44 69 73 61 62 6c 65 73 2f 45 6e 61 62 6c 65 73     Disables/Enables
    a068:	20 73 65 6e 64 69 6e 67 20 55 53 42 20 6b 65 79      sending USB key
    a078:	63 6f 64 65 73 20 74 6f 20 74 68 65 20 4f 75 74     codes to the Out
    a088:	70 75 74 20 4d 6f 64 75 6c 65 20 61 6e 64 20 70     put Module and p
    a098:	72 69 6e 74 73 20 55 2f 4b 20 63 6f 64 65 73 2e     rints U/K codes.
    a0a8:	00                                                  .

0000a0a9 <tm99_guide>:
    a0a9:	01 00 01 3c 00                                      ...<.

0000a0ae <tm54_guide>:
    a0ae:	01 00 01 30 00                                      ...0.

0000a0b3 <tm32_guide>:
    a0b3:	01 00 01 0e 00                                      .....

0000a0b8 <rm61_guide>:
    a0b8:	01 0e 21 00                                         ..!.

0000a0bc <rm33_guide>:
    a0bc:	01 0e 2f 00                                         ../.

0000a0c0 <rm14_guide>:
    a0c0:	01 0e 31 00                                         ..1.

0000a0c4 <rm85_guide>:
    a0c4:	01 0e 62 00                                         ..b.

0000a0c8 <rm57_guide>:
    a0c8:	01 0e e6 00                                         ....

0000a0cc <rm29_guide>:
    a0cc:	01 0e 4f 00                                         ..O.

0000a0d0 <layer1_tl_0x10>:
    a0d0:	00 00 00 00                                         ....

0000a0d4 <tm90_guide>:
    a0d4:	01 00 01 46 00                                      ...F.

0000a0d9 <tm62_guide>:
    a0d9:	01 00 01 45 00 00 00                                ...E...

0000a0e0 <TriggerMacroList>:
    a0e0:	a4 a4 00 00 00 00 00 00 cf a5 00 00 01 00 00 00     ................
    a0f0:	44 99 00 00 02 00 00 00 08 9a 00 00 03 00 00 00     D...............
    a100:	28 9e 00 00 04 00 00 00 39 a7 00 00 05 00 00 00     (.......9.......
    a110:	60 a4 00 00 06 00 00 00 e4 a9 00 00 07 00 00 00     `...............
    a120:	c6 a4 00 00 08 00 00 00 24 b2 00 00 09 00 00 00     ........$.......
    a130:	d4 a4 00 00 0a 00 00 00 4a a0 00 00 0b 00 00 00     ........J.......
    a140:	ba a6 00 00 0c 00 00 00 3c 9c 00 00 0d 00 00 00     ........<.......
    a150:	fa a7 00 00 0e 00 00 00 ea 9f 00 00 0f 00 00 00     ................
    a160:	54 a8 00 00 10 00 00 00 12 a0 00 00 11 00 00 00     T...............
    a170:	7c 98 00 00 12 00 00 00 c1 a4 00 00 13 00 00 00     |...............
    a180:	fd a8 00 00 0e 00 00 00 6d a4 00 00 14 00 00 00     ........m.......
    a190:	28 b1 00 00 15 00 00 00 10 a6 00 00 16 00 00 00     (...............
    a1a0:	68 98 00 00 06 00 00 00 71 a6 00 00 17 00 00 00     h.......q.......
    a1b0:	91 a8 00 00 18 00 00 00 d8 a7 00 00 19 00 00 00     ................
    a1c0:	bc 9e 00 00 1a 00 00 00 c6 a8 00 00 1b 00 00 00     ................
    a1d0:	82 9e 00 00 1c 00 00 00 8c a8 00 00 1d 00 00 00     ................
    a1e0:	b3 a0 00 00 1e 00 00 00 af a8 00 00 1f 00 00 00     ................
    a1f0:	48 a4 00 00 20 00 00 00 40 a0 00 00 21 00 00 00     H... ...@...!...
    a200:	d8 a5 00 00 22 00 00 00 49 99 00 00 23 00 00 00     ...."...I...#...
    a210:	4c a7 00 00 24 00 00 00 34 9e 00 00 25 00 00 00     L...$...4...%...
    a220:	b5 a6 00 00 26 00 00 00 ca 98 00 00 27 00 00 00     ....&.......'...
    a230:	18 a7 00 00 28 00 00 00 04 9e 00 00 29 00 00 00     ....(.......)...
    a240:	49 a8 00 00 2a 00 00 00 0d a0 00 00 2b 00 00 00     I...*.......+...
    a250:	6b a8 00 00 2c 00 00 00 bc a4 00 00 2d 00 00 00     k...,.......-...
    a260:	53 a0 00 00 2e 00 00 00 7f a6 00 00 2f 00 00 00     S.........../...
    a270:	9e a9 00 00 30 00 00 00 a9 a4 00 00 31 00 00 00     ....0.......1...
    a280:	ca b1 00 00 32 00 00 00 6c a6 00 00 33 00 00 00     ....2...l...3...
    a290:	ae a0 00 00 34 00 00 00 84 a5 00 00 35 00 00 00     ....4.......5...
    a2a0:	ac 9e 00 00 36 00 00 00 bd a8 00 00 37 00 00 00     ....6.......7...
    a2b0:	56 a4 00 00 38 00 00 00 90 aa 00 00 39 00 00 00     V...8.......9...
    a2c0:	97 9e 00 00 3a 00 00 00 aa a8 00 00 0b 00 00 00     ....:...........
    a2d0:	d9 a0 00 00 3b 00 00 00 55 aa 00 00 3c 00 00 00     ....;...U...<...
    a2e0:	ca a5 00 00 3d 00 00 00 3f 99 00 00 3e 00 00 00     ....=...?...>...
    a2f0:	3e a7 00 00 3f 00 00 00 b7 a4 00 00 40 00 00 00     >...?.......@...
    a300:	62 a8 00 00 1d 00 00 00 30 a0 00 00 41 00 00 00     b.......0...A...
    a310:	05 a7 00 00 3f 00 00 00 f0 9d 00 00 01 00 00 00     ....?...........
    a320:	40 a8 00 00 08 00 00 00 04 a0 00 00 42 00 00 00     @...........B...
    a330:	b0 a6 00 00 43 00 00 00 ae a4 00 00 01 00 00 00     ....C...........
    a340:	8d 9a 00 00 44 00 00 00 7a a6 00 00 45 00 00 00     ....D...z...E...
    a350:	d4 9a 00 00 46 00 00 00 dd a7 00 00 47 00 00 00     ....F.......G...
    a360:	c5 b1 00 00 48 00 00 00 a0 aa 00 00 49 00 00 00     ....H.......I...
    a370:	ec a5 00 00 4a 00 00 00 89 a9 00 00 4b 00 00 00     ....J.......K...
    a380:	9c 9e 00 00 4c 00 00 00 b8 a8 00 00 4c 00 00 00     ....L.......L...
    a390:	51 a4 00 00 4d 00 00 00 fb 9f 00 00 4e 00 00 00     Q...M.......N...
    a3a0:	dd a5 00 00 4f 00 00 00 d8 aa 00 00 50 00 00 00     ....O.......P...
    a3b0:	d4 a0 00 00 51 00 00 00 4c aa 00 00 52 00 00 00     ....Q...L...R...
    a3c0:	c5 a5 00 00 53 00 00 00 cf 98 00 00 54 00 00 00     ....S.......T...
    a3d0:	34 a7 00 00 51 00 00 00 7d 9e 00 00 55 00 00 00     4...Q...}...U...
    a3e0:	59 a8 00 00 56 00 00 00 78 9e 00 00 57 00 00 00     Y...V...x...W...
    a3f0:	80 a8 00 00 58 00 00 00 a9 a0 00 00 59 00 00 00     ....X.......Y...
    a400:	00 a7 00 00 5a 00 00 00 80 99 00 00 5b 00 00 00     ....Z.......[...
    a410:	5c a7 00 00 5c 00 00 00 f0 9e 00 00 5d 00 00 00     \...\.......]...
    a420:	70 a8 00 00 5e 00 00 00 45 a0 00 00 5f 00 00 00     p...^...E..._...
    a430:	2c aa 00 00 60 00 00 00 cb a4 00 00 5b 00 00 00     ,...`.......[...
    a440:	28 9c 00 00 61 00 00 00                             (...a...

0000a448 <tm34_guide>:
    a448:	01 00 01 25 00                                      ...%.

0000a44d <rm37_guide>:
    a44d:	01 0e 30 00                                         ..0.

0000a451 <tm86_guide>:
    a451:	01 00 01 04 00                                      .....

0000a456 <tm58_guide>:
    a456:	01 00 01 1f 00 00                                   ......

0000a45c <layer1_tl_0x18>:
    a45c:	00 00 00 00                                         ....

0000a460 <tm6_guide>:
    a460:	01 00 01 02 00                                      .....

0000a465 <rm18_guide>:
    a465:	01 0e 13 00                                         ....

0000a469 <rm20_guide>:
    a469:	01 0e 2c 00                                         ..,.

0000a46d <tm21_guide>:
    a46d:	01 00 01 54 00                                      ...T.

0000a472 <rm50_guide>:
    a472:	01 0e 1e 00 00 00                                   ......

0000a478 <layer2_tl_0x08>:
    a478:	01 00 00 00 54 00 00 00                             ....T...

0000a480 <layer2_tl_0x09>:
    a480:	00 00 00 00                                         ....

0000a484 <rm22_guide>:
    a484:	01 0e 16 00                                         ....

0000a488 <rm74_guide>:
    a488:	01 0e 3f 00                                         ..?.

0000a48c <layer2_tl_0x0A>:
    a48c:	00 00 00 00                                         ....

0000a490 <layer2_tl_0x0B>:
    a490:	00 00 00 00                                         ....

0000a494 <layer2_tl_0x0C>:
    a494:	00 00 00 00                                         ....

0000a498 <layer2_tl_0x0D>:
    a498:	00 00 00 00                                         ....

0000a49c <layer2_tl_0x0E>:
    a49c:	00 00 00 00                                         ....

0000a4a0 <layer2_tl_0x0F>:
    a4a0:	00 00 00 00                                         ....

0000a4a4 <tm0_guide>:
    a4a4:	01 00 01 06 00                                      .....

0000a4a9 <tm51_guide>:
    a4a9:	01 00 01 23 00                                      ...#.

0000a4ae <tm75_guide>:
    a4ae:	01 00 01 59 00                                      ...Y.

0000a4b3 <rm9_guide>:
    a4b3:	01 0e e2 00                                         ....

0000a4b7 <tm67_guide>:
    a4b7:	01 00 01 31 00                                      ...1.

0000a4bc <tm47_guide>:
    a4bc:	01 00 01 4b 00                                      ...K.

0000a4c1 <tm19_guide>:
    a4c1:	01 00 01 2b 00                                      ...+.

0000a4c6 <tm8_guide>:
    a4c6:	01 00 01 29 00                                      ...).

0000a4cb <tm107_guide>:
    a4cb:	01 00 01 58 00                                      ...X.

0000a4d0 <layer2_tl_0x10>:
    a4d0:	00 00 00 00                                         ....

0000a4d4 <tm10_guide>:
    a4d4:	01 00 01 44 00 00 00 00                             ...D....

0000a4dc <layer2_tl_0x12>:
    a4dc:	00 00 00 00                                         ....

0000a4e0 <layer2_tl_0x13>:
    a4e0:	00 00 00 00                                         ....

0000a4e4 <layer2_tl_0x14>:
    a4e4:	00 00 00 00                                         ....

0000a4e8 <layer2_tl_0x15>:
    a4e8:	00 00 00 00                                         ....

0000a4ec <layer2_tl_0x11>:
    a4ec:	00 00 00 00                                         ....

0000a4f0 <layer2_tl_0x17>:
    a4f0:	00 00 00 00                                         ....

0000a4f4 <layer2_tl_0x18>:
    a4f4:	00 00 00 00                                         ....

0000a4f8 <layer2_tl_0x19>:
    a4f8:	00 00 00 00                                         ....

0000a4fc <rm35_guide>:
    a4fc:	01 0e 1a 00                                         ....

0000a500 <keyHoldCLIDict_DescEntry>:
    a500:	53 65 6e 64 20 6b 65 79 2d 68 6f 6c 64 20 65 76     Send key-hold ev
    a510:	65 6e 74 73 20 74 6f 20 74 68 65 20 6d 61 63 72     ents to the macr
    a520:	6f 20 6d 6f 64 75 6c 65 2e 20 44 75 70 6c 69 63     o module. Duplic
    a530:	61 74 65 73 20 68 61 76 65 20 75 6e 64 65 66 69     ates have undefi
    a540:	6e 65 64 20 62 65 68 61 76 69 6f 75 72 2e 0d 0a     ned behaviour...
    a550:	09 09 1b 5b 33 35 6d 53 31 30 1b 5b 30 6d 20 53     ...[35mS10.[0m S
    a560:	63 61 6e 63 6f 64 65 20 30 78 30 41 00 00 00 00     cancode 0x0A....

0000a570 <layer2_tl_0x16>:
    a570:	00 00 00 00                                         ....

0000a574 <layer2_tl_0x1A>:
    a574:	00 00 00 00                                         ....

0000a578 <layer2_tl_0x1B>:
    a578:	00 00 00 00                                         ....

0000a57c <layer2_tl_0x1C>:
    a57c:	00 00 00 00                                         ....

0000a580 <layer2_tl_0x1D>:
    a580:	00 00 00 00                                         ....

0000a584 <tm55_guide>:
    a584:	01 00 01 0d 00 00 00 00                             ........

0000a58c <layer2_tl_0x1F>:
    a58c:	00 00 00 00                                         ....

0000a590 <layerDebugCLIDict_DescEntry>:
    a590:	4c 61 79 65 72 20 64 65 62 75 67 20 6d 6f 64 65     Layer debug mode
    a5a0:	2e 20 53 68 6f 77 73 20 6c 61 79 65 72 20 73 74     . Shows layer st
    a5b0:	61 63 6b 20 61 6e 64 20 61 6e 79 20 63 68 61 6e     ack and any chan
    a5c0:	67 65 73 2e 00                                      ges..

0000a5c5 <tm92_guide>:
    a5c5:	01 00 01 44 00                                      ...D.

0000a5ca <tm64_guide>:
    a5ca:	01 00 01 04 00                                      .....

0000a5cf <tm1_guide>:
    a5cf:	01 00 01 2f 00                                      .../.

0000a5d4 <layer1_tl_0x22>:
    a5d4:	00 00 00 00                                         ....

0000a5d8 <tm36_guide>:
    a5d8:	01 00 01 3b 00                                      ...;.

0000a5dd <tm88_guide>:
    a5dd:	01 00 01 05 00 00 00                                .......

0000a5e4 <layer1_tl_0x25>:
    a5e4:	00 00 00 00                                         ....

0000a5e8 <rm89_guide>:
    a5e8:	01 0e 61 00                                         ..a.

0000a5ec <tm82_guide>:
    a5ec:	01 00 01 30 00                                      ...0.

0000a5f1 <rm64_guide>:
    a5f1:	01 0e 24 00 00 00 00                                ..$....

0000a5f8 <layer2_tl_0x1E>:
    a5f8:	00 00 00 00                                         ....

0000a5fc <rm91_guide>:
    a5fc:	01 0e 58 00                                         ..X.

0000a600 <layer1_tl_0x2B>:
    a600:	00 00 00 00                                         ....

0000a604 <layer2_tl_0x20>:
    a604:	00 00 00 00                                         ....

0000a608 <rm80_guide>:
    a608:	01 0e 41 00                                         ..A.

0000a60c <layer2_tl_0x22>:
    a60c:	00 00 00 00                                         ....

0000a610 <tm23_guide>:
    a610:	01 00 01 18 00                                      .....

0000a615 <macroProcCLIDict_DescEntry>:
    a615:	50 61 75 73 65 2f 52 65 73 75 6d 65 20 6d 61 63     Pause/Resume mac
    a625:	72 6f 20 70 72 6f 63 65 73 73 69 6e 67 2e 00        ro processing..

0000a634 <layer2_tl_0x25>:
    a634:	00 00 00 00                                         ....

0000a638 <layer2_tl_0x26>:
    a638:	00 00 00 00                                         ....

0000a63c <layer2_tl_0x27>:
    a63c:	00 00 00 00                                         ....

0000a640 <layer2_tl_0x28>:
    a640:	00 00 00 00                                         ....

0000a644 <layer2_tl_0x29>:
    a644:	00 00 00 00                                         ....

0000a648 <rm76_guide>:
    a648:	01 09 00                                            ...

0000a64b <rm60_guide>:
    a64b:	01 0e 06 00                                         ....

0000a64f <rm48_guide>:
    a64f:	01 0e 26 00 00                                      ..&..

0000a654 <layer2_tl_0x2A>:
    a654:	00 00 00 00                                         ....

0000a658 <layer2_tl_0x2B>:
    a658:	00 00 00 00                                         ....

0000a65c <layer2_tl_0x2C>:
    a65c:	00 00 00 00                                         ....

0000a660 <layer2_tl_0x2D>:
    a660:	00 00 00 00                                         ....

0000a664 <layer2_tl_0x2E>:
    a664:	00 00 00 00                                         ....

0000a668 <layer2_tl_0x2F>:
    a668:	00 00 00 00                                         ....

0000a66c <tm53_guide>:
    a66c:	01 00 01 4c 00                                      ...L.

0000a671 <tm25_guide>:
    a671:	01 00 01 15 00                                      .....

0000a676 <rm52_guide>:
    a676:	01 0e 23 00                                         ..#.

0000a67a <tm77_guide>:
    a67a:	01 00 01 2f 00                                      .../.

0000a67f <tm49_guide>:
    a67f:	01 00 01 4f 00                                      ...O.

0000a684 <rm78_guide>:
    a684:	01 0e 40 00                                         ..@.

0000a688 <rm11_guide>:
    a688:	01 0e e0 00                                         ....

0000a68c <LayerIndex>:
    a68c:	b4 8a ff 1f e0 b0 00 00 02 59 00 00 e4 89 ff 1f     .........Y......
    a69c:	f8 b0 00 00 02 35 00 00 14 8c ff 1f 10 b1 00 00     .....5..........
    a6ac:	08 58 00 00                                         .X..

0000a6b0 <tm74_guide>:
    a6b0:	01 00 01 19 00                                      .....

0000a6b5 <tm40_guide>:
    a6b5:	01 00 01 3c 00                                      ...<.

0000a6ba <tm12_guide>:
    a6ba:	01 00 01 56 00                                      ...V.

0000a6bf <rm41_guide>:
    a6bf:	01 0e 1c 00 00                                      .....

0000a6c4 <layer2_tl_0x30>:
    a6c4:	00 00 00 00                                         ....

0000a6c8 <layer2_tl_0x31>:
    a6c8:	01 00 00 00 6a 00 00 00                             ....j...

0000a6d0 <layer2_tl_0x32>:
    a6d0:	01 00 00 00 6c 00 00 00                             ....l...

0000a6d8 <rm93_guide>:
    a6d8:	01 0e 59 00                                         ..Y.

0000a6dc <layer2_tl_0x34>:
    a6dc:	01 00 00 00 68 00 00 00                             ....h...

0000a6e4 <layer2_tl_0x35>:
    a6e4:	00 00 00 00                                         ....

0000a6e8 <layer2_tl_0x21>:
    a6e8:	00 00 00 00                                         ....

0000a6ec <layer2_tl_0x37>:
    a6ec:	00 00 00 00                                         ....

0000a6f0 <layer2_tl_0x38>:
    a6f0:	00 00 00 00                                         ....

0000a6f4 <layer2_tl_0x39>:
    a6f4:	00 00 00 00                                         ....

0000a6f8 <layer2_tl_0x23>:
    a6f8:	00 00 00 00                                         ....

0000a6fc <layer2_tl_0x24>:
    a6fc:	00 00 00 00                                         ....

0000a700 <tm100_guide>:
    a700:	01 00 01 4e 00                                      ...N.

0000a705 <tm70_guide>:
    a705:	01 00 01 4a 00                                      ...J.

0000a70a <rm4_guide>:
    a70a:	01 0e 2b 00 00 00                                   ..+...

0000a710 <layer2_tl_0x3A>:
    a710:	01 00 00 00 60 00 00 00                             ....`...

0000a718 <tm42_guide>:
    a718:	01 00 01 10 00 00 00 00                             ........

0000a720 <layer2_tl_0x3C>:
    a720:	01 00 00 00 63 00 00 00                             ....c...

0000a728 <layer2_tl_0x3D>:
    a728:	01 00 00 00 5e 00 00 00                             ....^...

0000a730 <layer2_tl_0x3E>:
    a730:	00 00 00 00                                         ....

0000a734 <tm94_guide>:
    a734:	01 00 01 3d 00                                      ...=.

0000a739 <tm5_guide>:
    a739:	01 00 01 43 00                                      ...C.

0000a73e <tm66_guide>:
    a73e:	01 00 01 1d 00 00                                   ......

0000a744 <layer1_tl_0x30>:
    a744:	01 00 00 00 52 00 00 00                             ....R...

0000a74c <tm38_guide>:
    a74c:	01 00 01 52 00 00 00 00                             ...R....

0000a754 <layer1_tl_0x34>:
    a754:	01 00 00 00 53 00 00 00                             ....S...

0000a75c <tm102_guide>:
    a75c:	01 00 01 33 00                                      ...3.

0000a761 <rm59_guide>:
    a761:	01 0e 0f 00 00 00 00                                .......

0000a768 <default_tl_0x18>:
    a768:	01 00 00 00 17 00 00 00                             ........

0000a770 <rm82_guide>:
    a770:	01 0e 5c 00                                         ..\.

0000a774 <layer2_tl_0x40>:
    a774:	00 00 00 00                                         ....

0000a778 <layer2_tl_0x41>:
    a778:	00 00 00 00                                         ....

0000a77c <layer2_tl_0x42>:
    a77c:	00 00 00 00                                         ....

0000a780 <layer2_tl_0x43>:
    a780:	01 00 00 00 5b 00 00 00                             ....[...

0000a788 <layer2_tl_0x44>:
    a788:	01 00 00 00 5c 00 00 00                             ....\...

0000a790 <layer2_tl_0x45>:
    a790:	01 00 00 00 69 00 00 00                             ....i...

0000a798 <layer2_tl_0x46>:
    a798:	01 00 00 00 5a 00 00 00                             ....Z...

0000a7a0 <layer2_tl_0x47>:
    a7a0:	00 00 00 00                                         ....

0000a7a4 <layer2_tl_0x48>:
    a7a4:	00 00 00 00                                         ....

0000a7a8 <layer2_tl_0x49>:
    a7a8:	00 00 00 00                                         ....

0000a7ac <rm8_guide>:
    a7ac:	01 0e 50 00                                         ..P.

0000a7b0 <layer2_tl_0x4A>:
    a7b0:	00 00 00 00                                         ....

0000a7b4 <layer2_tl_0x4B>:
    a7b4:	00 00 00 00                                         ....

0000a7b8 <layer2_tl_0x4C>:
    a7b8:	01 00 00 00 67 00 00 00                             ....g...

0000a7c0 <layer2_tl_0x4D>:
    a7c0:	01 00 00 00 61 00 00 00                             ....a...

0000a7c8 <layer2_tl_0x4E>:
    a7c8:	01 00 00 00 64 00 00 00                             ....d...

0000a7d0 <layer2_tl_0x4F>:
    a7d0:	01 00 00 00 65 00 00 00                             ....e...

0000a7d8 <tm27_guide>:
    a7d8:	01 00 01 50 00                                      ...P.

0000a7dd <tm79_guide>:
    a7dd:	01 00 01 03 00                                      .....

0000a7e2 <rm2_guide>:
    a7e2:	01 0e 09 00                                         ....

0000a7e6 <rm30_guide>:
    a7e6:	01 0e 08 00                                         ....

0000a7ea <rm13_guide>:
    a7ea:	01 0e 22 00                                         ..".

0000a7ee <rm3_guide>:
    a7ee:	01 0e 33 00                                         ..3.

0000a7f2 <rm96_guide>:
    a7f2:	01 0e 53 00                                         ..S.

0000a7f6 <rm71_guide>:
    a7f6:	01 0e 3e 00                                         ..>.

0000a7fa <tm14_guide>:
    a7fa:	01 00 01 2a 00                                      ...*.

0000a7ff <rm43_guide>:
    a7ff:	01 0e 37 00                                         ..7.

0000a803 <rm15_guide>:
    a803:	01 0e 28 00 00                                      ..(..

0000a808 <layer2_tl_0x50>:
    a808:	00 00 00 00                                         ....

0000a80c <layer2_tl_0x51>:
    a80c:	00 00 00 00                                         ....

0000a810 <layer2_tl_0x52>:
    a810:	00 00 00 00                                         ....

0000a814 <layer2_tl_0x53>:
    a814:	00 00 00 00                                         ....

0000a818 <layer2_tl_0x54>:
    a818:	01 00 00 00 5f 00 00 00                             ...._...

0000a820 <layer2_tl_0x55>:
    a820:	00 00 00 00                                         ....

0000a824 <layer2_tl_0x56>:
    a824:	00 00 00 00                                         ....

0000a828 <layer2_tl_0x57>:
    a828:	01 00 00 00 5d 00 00 00                             ....]...

0000a830 <layer2_tl_0x58>:
    a830:	01 00 00 00 6b 00 00 00                             ....k...

0000a838 <layer2_tl_0x33>:
    a838:	01 00 00 00 66 00 00 00                             ....f...

0000a840 <tm72_guide>:
    a840:	01 00 01 55 00                                      ...U.

0000a845 <rm6_guide>:
    a845:	01 0e 29 00                                         ..).

0000a849 <tm44_guide>:
    a849:	01 00 01 1e 00 00 00                                .......

0000a850 <layer2_tl_0x36>:
    a850:	00 00 00 00                                         ....

0000a854 <tm16_guide>:
    a854:	01 00 01 17 00                                      .....

0000a859 <tm96_guide>:
    a859:	01 00 01 3a 00                                      ...:.

0000a85e <rm63_guide>:
    a85e:	01 0e e3 00                                         ....

0000a862 <tm68_guide>:
    a862:	01 00 01 58 00                                      ...X.

0000a867 <rm97_guide>:
    a867:	01 0e 54 00                                         ..T.

0000a86b <tm46_guide>:
    a86b:	01 00 01 22 00                                      ...".

0000a870 <tm104_guide>:
    a870:	01 00 01 34 00 00 00 00                             ...4....

0000a878 <layer2_tl_0x3B>:
    a878:	01 00 00 00 62 00 00 00                             ....b...

0000a880 <tm98_guide>:
    a880:	01 00 01 3b 00 00 00 00                             ...;....

0000a888 <layer2_tl_0x3F>:
    a888:	00 00 00 00                                         ....

0000a88c <tm31_guide>:
    a88c:	01 00 01 28 00                                      ...(.

0000a891 <tm26_guide>:
    a891:	01 00 01 27 00                                      ...'.

0000a896 <rm67_guide>:
    a896:	01 0e 04 00                                         ....

0000a89a <rm32_guide>:
    a89a:	01 0e 4d 00                                         ..M.

0000a89e <rm84_guide>:
    a89e:	01 0e 63 00                                         ..c.

0000a8a2 <rm56_guide>:
    a8a2:	01 0e 19 00                                         ....

0000a8a6 <rm28_guide>:
    a8a6:	01 0e 36 00                                         ..6.

0000a8aa <tm61_guide>:
    a8aa:	01 00 01 1c 00                                      .....

0000a8af <tm33_guide>:
    a8af:	01 00 01 51 00                                      ...Q.

0000a8b4 <rm88_guide>:
    a8b4:	01 0e 60 00                                         ..`.

0000a8b8 <tm85_guide>:
    a8b8:	01 00 01 35 00                                      ...5.

0000a8bd <tm57_guide>:
    a8bd:	01 00 01 08 00                                      .....

0000a8c2 <rm86_guide>:
    a8c2:	01 0e 5f 00                                         .._.

0000a8c6 <tm29_guide>:
    a8c6:	01 00 01 24 00                                      ...$.

0000a8cb <rm1_guide>:
    a8cb:	02 06 01 00 01 00                                   ......

0000a8d1 <macroListCLIDict_DescEntry>:
    a8d1:	4c 69 73 74 20 74 68 65 20 64 65 66 69 6e 65 64     List the defined
    a8e1:	20 74 72 69 67 67 65 72 20 61 6e 64 20 72 65 73      trigger and res
    a8f1:	75 6c 74 20 6d 61 63 72 6f 73 2e 00                 ult macros..

0000a8fd <tm20_guide>:
    a8fd:	01 00 01 11 00                                      .....

0000a902 <layerStateCLIDict_DescEntry>:
    a902:	4d 6f 64 69 66 79 20 73 70 65 63 69 66 69 65 64     Modify specified
    a912:	20 69 6e 64 65 78 65 64 20 6c 61 79 65 72 20 73      indexed layer s
    a922:	74 61 74 65 20 3c 6c 61 79 65 72 3e 20 3c 73 74     tate <layer> <st
    a932:	61 74 65 20 62 79 74 65 3e 2e 0d 0a 09 09 1b 5b     ate byte>......[
    a942:	33 35 6d 4c 32 1b 5b 30 6d 20 49 6e 64 65 78 65     35mL2.[0m Indexe
    a952:	64 20 4c 61 79 65 72 20 30 78 30 32 0d 0a 09 09     d Layer 0x02....
    a962:	30 20 4f 66 66 2c 20 31 20 53 68 69 66 74 2c 20     0 Off, 1 Shift, 
    a972:	32 20 4c 61 74 63 68 2c 20 34 20 4c 6f 63 6b 20     2 Latch, 4 Lock 
    a982:	53 74 61 74 65 73 00                                States.

0000a989 <tm83_guide>:
    a989:	01 00 01 34 00                                      ...4.

0000a98e <rm73_guide>:
    a98e:	01 0e 3a 00                                         ..:.

0000a992 <rm45_guide>:
    a992:	01 0e 11 00                                         ....

0000a996 <rm17_guide>:
    a996:	01 0e 52 00                                         ..R.

0000a99a <rm69_guide>:
    a99a:	01 0e 45 00                                         ..E.

0000a99e <tm50_guide>:
    a99e:	01 00 01 33 00                                      ...3.

0000a9a3 <rm0_guide>:
    a9a3:	01 0e 1f 00 00                                      .....

0000a9a8 <default_tl_0x02>:
    a9a8:	01 00 00 00 06 00 00 00                             ........

0000a9b0 <default_tl_0x03>:
    a9b0:	01 00 00 00 0d 00 00 00                             ........

0000a9b8 <default_tl_0x04>:
    a9b8:	01 00 00 00 40 00 00 00                             ....@...

0000a9c0 <default_tl_0x05>:
    a9c0:	01 00 00 00 45 00 00 00                             ....E...

0000a9c8 <default_tl_0x06>:
    a9c8:	01 00 00 00 00 00 00 00                             ........

0000a9d0 <default_tl_0x07>:
    a9d0:	01 00 00 00 34 00 00 00                             ....4...

0000a9d8 <default_tl_0x08>:
    a9d8:	01 00 00 00 39 00 00 00                             ....9...

0000a9e0 <default_tl_0x09>:
    a9e0:	00 00 00 00                                         ....

0000a9e4 <tm7_guide>:
    a9e4:	01 00 01 47 00                                      ...G.

0000a9e9 <layerListCLIDict_DescEntry>:
    a9e9:	4c 69 73 74 20 61 76 61 69 6c 61 62 6c 65 20 6c     List available l
    a9f9:	61 79 65 72 73 2e 00                                ayers..

0000aa00 <default_tl_0x0A>:
    aa00:	00 00 00 00                                         ....

0000aa04 <default_tl_0x0B>:
    aa04:	01 00 00 00 23 00 00 00                             ....#...

0000aa0c <default_tl_0x0C>:
    aa0c:	01 00 00 00 30 00 00 00                             ....0...

0000aa14 <default_tl_0x0D>:
    aa14:	01 00 00 00 37 00 00 00                             ....7...

0000aa1c <default_tl_0x0E>:
    aa1c:	01 00 00 00 20 00 00 00                             .... ...

0000aa24 <default_tl_0x0F>:
    aa24:	01 00 00 00 25 00 00 00                             ....%...

0000aa2c <tm106_guide>:
    aa2c:	01 00 01 31 00                                      ...1.

0000aa31 <rm54_guide>:
    aa31:	01 0e 27 00                                         ..'.

0000aa35 <rm90_guide>:
    aa35:	01 0e 5b 00                                         ..[.

0000aa39 <rm62_guide>:
    aa39:	01 0e e4 00                                         ....

0000aa3d <rm34_guide>:
    aa3d:	01 0e 0c 00 00 00 00                                .......

0000aa44 <default_tl_0x36>:
    aa44:	00 00 00 00                                         ....

0000aa48 <rm58_guide>:
    aa48:	01 0e 2d 00                                         ..-.

0000aa4c <tm91_guide>:
    aa4c:	01 00 01 43 00                                      ...C.

0000aa51 <rm65_guide>:
    aa51:	01 0e 20 00                                         .. .

0000aa55 <tm63_guide>:
    aa55:	01 00 01 20 00 00 00                                ... ...

0000aa5c <default_tl_0x10>:
    aa5c:	01 00 00 00 2a 00 00 00                             ....*...

0000aa64 <default_tl_0x11>:
    aa64:	01 00 00 00 14 00 00 00                             ........

0000aa6c <default_tl_0x12>:
    aa6c:	00 00 00 00                                         ....

0000aa70 <default_tl_0x13>:
    aa70:	00 00 00 00                                         ....

0000aa74 <default_tl_0x14>:
    aa74:	00 00 00 00                                         ....

0000aa78 <default_tl_0x15>:
    aa78:	01 00 00 00 19 00 00 00                             ........

0000aa80 <default_tl_0x16>:
    aa80:	01 00 00 00 02 00 00 00                             ........

0000aa88 <default_tl_0x17>:
    aa88:	01 00 00 00 10 00 00 00                             ........

0000aa90 <tm59_guide>:
    aa90:	01 00 01 48 00 00 00 00                             ...H....

0000aa98 <default_tl_0x19>:
    aa98:	01 00 00 00 4a 00 00 00                             ....J...

0000aaa0 <tm81_guide>:
    aaa0:	01 00 01 07 00 00 00 00                             ........

0000aaa8 <default_tl_0x1A>:
    aaa8:	01 00 00 00 04 00 00 00                             ........

0000aab0 <default_tl_0x1B>:
    aab0:	01 00 00 00 09 00 00 00                             ........

0000aab8 <default_tl_0x1C>:
    aab8:	01 00 00 00 3d 00 00 00                             ....=...

0000aac0 <default_tl_0x1D>:
    aac0:	01 00 00 00 42 00 00 00                             ....B...

0000aac8 <default_tl_0x1E>:
    aac8:	01 00 00 00 2c 00 00 00                             ....,...

0000aad0 <default_tl_0x1F>:
    aad0:	01 00 00 00 3a 00 00 00                             ....:...

0000aad8 <tm89_guide>:
    aad8:	01 00 01 32 00                                      ...2.

0000aadd <rm95_guide>:
    aadd:	01 0e 5e 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b     ..^..[1;32mINFO.
    aaed:	5b 30 6d 20 2d 20 43 61 70 61 62 69 6c 69 74 69     [0m - Capabiliti
    aafd:	65 73 20 4c 69 73 74 20 00 0d 0a 09 00 1b 5b 31     es List ......[1
    ab0d:	3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 4b     ;32mINFO.[0m - K
    ab1d:	00 1b 5b 31 3b 33 33 6d 57 41 52 4e 49 4e 47 1b     ..[1;33mWARNING.
    ab2d:	5b 30 6d 20 2d 20 66 6c 61 73 68 4d 6f 64 65 45     [0m - flashModeE
    ab3d:	6e 61 62 6c 65 64 20 6e 6f 74 20 73 65 74 2c 20     nabled not set, 
    ab4d:	63 61 6e 63 65 6c 6c 69 6e 67 20 66 69 72 6d 77     cancelling firmw
    ab5d:	61 72 65 20 72 65 6c 6f 61 64 2e 2e 2e 0d 0a 00     are reload......
    ab6d:	1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20     .[1;32mINFO.[0m 
    ab7d:	2d 20 53 65 74 20 66 6c 61 73 68 4d 6f 64 65 45     - Set flashModeE
    ab8d:	6e 61 62 6c 65 64 20 74 6f 20 31 20 69 6e 20 79     nabled to 1 in y
    ab9d:	6f 75 72 20 6b 6c 6c 20 63 6f 6e 66 69 67 75 72     our kll configur
    abad:	61 74 69 6f 6e 2e 00 1b 5b 31 3b 33 32 6d 49 4e     ation...[1;32mIN
    abbd:	46 4f 1b 5b 30 6d 20 2d 20 4c 61 79 65 72 20 44     FO.[0m - Layer D
    abcd:	65 62 75 67 20 4d 6f 64 65 3a 20 00 1b 5b 31 3b     ebug Mode: ..[1;
    abdd:	33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 53 65     32mINFO.[0m - Se
    abed:	74 74 69 6e 67 20 4c 61 79 65 72 20 4c 00 20 74     tting Layer L. t
    abfd:	6f 20 2d 20 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f     o - ..[1;32mINFO
    ac0d:	1b 5b 30 6d 20 2d 20 4d 61 63 72 6f 20 44 65 62     .[0m - Macro Deb
    ac1d:	75 67 20 4d 6f 64 65 3a 20 00 1b 5b 31 3b 33 32     ug Mode: ..[1;32
    ac2d:	6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 4d 61 63 72     mINFO.[0m - Macr
    ac3d:	6f 20 50 72 6f 63 65 73 73 69 6e 67 20 4d 6f 64     o Processing Mod
    ac4d:	65 3a 20 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b     e: ..[1;32mINFO.
    ac5d:	5b 30 6d 20 2d 20 4c 61 79 65 72 20 4c 69 73 74     [0m - Layer List
    ac6d:	00 20 1b 5b 31 6d 28 64 65 66 61 75 6c 74 29 1b     . .[1m(default).
    ac7d:	5b 30 6d 00 0d 0a 09 09 20 4c 61 79 65 72 20 53     [0m..... Layer S
    ac8d:	74 61 74 65 3a 20 00 20 46 69 72 73 74 20 2d 3e     tate: . First ->
    ac9d:	20 4c 61 73 74 20 49 6e 64 69 63 65 73 3a 20 00      Last Indices: .
    acad:	1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20     .[1;32mINFO.[0m 
    acbd:	2d 20 50 65 6e 64 69 6e 67 20 4b 65 79 20 45 76     - Pending Key Ev
    accd:	65 6e 74 73 3a 20 00 20 3a 20 00 1b 5b 31 3b 33     ents: . : ..[1;3
    acdd:	32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 50 65 6e     2mINFO.[0m - Pen
    aced:	64 69 6e 67 20 54 72 69 67 67 65 72 20 4d 61 63     ding Trigger Mac
    acfd:	72 6f 73 3a 20 00 1b 5b 31 3b 33 32 6d 49 4e 46     ros: ..[1;32mINF
    ad0d:	4f 1b 5b 30 6d 20 2d 20 50 65 6e 64 69 6e 67 20     O.[0m - Pending 
    ad1d:	52 65 73 75 6c 74 20 4d 61 63 72 6f 73 3a 20 00     Result Macros: .
    ad2d:	1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20     .[1;32mINFO.[0m 
    ad3d:	2d 20 54 72 69 67 67 65 72 20 4d 61 63 72 6f 73     - Trigger Macros
    ad4d:	20 52 61 6e 67 65 3a 20 54 30 20 2d 3e 20 54 00      Range: T0 -> T.
    ad5d:	1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20     .[1;32mINFO.[0m 
    ad6d:	2d 20 52 65 73 75 6c 74 20 20 4d 61 63 72 6f 73     - Result  Macros
    ad7d:	20 52 61 6e 67 65 3a 20 52 30 20 2d 3e 20 52 00      Range: R0 -> R.
    ad8d:	1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20     .[1;32mINFO.[0m 
    ad9d:	2d 20 54 72 69 67 67 65 72 20 3a 20 52 65 73 75     - Trigger : Resu
    adad:	6c 74 20 4d 61 63 72 6f 20 50 61 69 72 73 00 09     lt Macro Pairs..
    adbd:	54 00 20 3a 20 52 00 1b 5b 31 3b 33 35 6d 44 45     T. : R..[1;35mDE
    adcd:	42 55 47 1b 5b 30 6d 20 2d 20 4c 61 79 65 72 20     BUG.[0m - Layer 
    addd:	00 20 30 00 4d 61 63 72 6f 5f 6c 61 79 65 72 53     . 0.Macro_layerS
    aded:	74 61 74 65 28 6c 61 79 65 72 49 6e 64 65 78 2c     tate(layerIndex,
    adfd:	6c 61 79 65 72 53 74 61 74 65 29 00 4d 61 63 72     layerState).Macr
    ae0d:	6f 5f 6c 61 79 65 72 4c 61 74 63 68 28 6c 61 79     o_layerLatch(lay
    ae1d:	65 72 49 6e 64 65 78 29 00 4d 61 63 72 6f 5f 6c     erIndex).Macro_l
    ae2d:	61 79 65 72 4c 6f 63 6b 28 6c 61 79 65 72 49 6e     ayerLock(layerIn
    ae3d:	64 65 78 29 00 4d 61 63 72 6f 5f 6c 61 79 65 72     dex).Macro_layer
    ae4d:	53 68 69 66 74 28 6c 61 79 65 72 49 6e 64 65 78     Shift(layerIndex
    ae5d:	29 00 4d 61 63 72 6f 5f 6c 61 79 65 72 52 6f 74     ).Macro_layerRot
    ae6d:	61 74 65 28 70 72 65 76 69 6f 75 73 29 00 1b 5b     ate(previous)..[
    ae7d:	31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b 5b 30 6d     1;5;31mERROR.[0m
    ae8d:	20 2d 20 53 63 61 6e 20 43 6f 64 65 20 68 61 73      - Scan Code has
    ae9d:	20 6e 6f 20 64 65 66 69 6e 65 64 20 54 72 69 67      no defined Trig
    aead:	67 65 72 20 4d 61 63 72 6f 3a 20 00 1b 5b 31 3b     ger Macro: ..[1;
    aebd:	35 3b 33 31 6d 45 52 52 4f 52 1b 5b 30 6d 20 2d     5;31mERROR.[0m -
    aecd:	20 49 6e 76 61 6c 69 64 20 6b 65 79 20 73 74 61      Invalid key sta
    aedd:	74 65 20 2d 20 00 1b 5b 31 3b 35 3b 33 31 6d 45     te - ..[1;5;31mE
    aeed:	52 52 4f 52 1b 5b 30 6d 20 2d 20 49 6e 76 61 6c     RROR.[0m - Inval
    aefd:	69 64 20 74 79 70 65 20 2d 20 00 1b 5b 31 3b 33     id type - ..[1;3
    af0d:	33 6d 57 41 52 4e 49 4e 47 1b 5b 30 6d 20 2d 20     3mWARNING.[0m - 
    af1d:	53 63 61 6e 43 6f 64 65 20 69 73 20 6f 75 74 20     ScanCode is out 
    af2d:	6f 66 20 72 61 6e 67 65 2f 6e 6f 74 20 64 65 66     of range/not def
    af3d:	69 6e 65 64 20 2d 20 00 1b 5b 31 3b 33 33 6d 57     ined - ..[1;33mW
    af4d:	41 52 4e 49 4e 47 1b 5b 30 6d 20 2d 20 53 63 61     ARNING.[0m - Sca
    af5d:	6e 43 6f 64 65 20 69 73 20 6f 75 74 20 6f 66 20     nCode is out of 
    af6d:	72 61 6e 67 65 2f 6e 6f 74 20 64 65 66 69 6e 65     range/not define
    af7d:	64 3a 20 00 1b 5b 31 3b 33 35 6d 44 45 42 55 47     d: ..[1;35mDEBUG
    af8d:	1b 5b 30 6d 20 2d 20 4d 61 63 72 6f 20 53 74 65     .[0m - Macro Ste
    af9d:	70 0d 0a 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b     p....[1;32mINFO.
    afad:	5b 30 6d 20 2d 20 54 72 69 67 67 65 72 20 4d 61     [0m - Trigger Ma
    afbd:	63 72 6f 20 49 6e 64 65 78 3a 20 00 7c 00 3b 00     cro Index: .|.;.
    afcd:	0d 0a 50 6f 73 69 74 69 6f 6e 3a 20 00 0d 0a 52     ..Position: ...R
    afdd:	65 73 75 6c 74 20 4d 61 63 72 6f 20 49 6e 64 65     esult Macro Inde
    afed:	78 3a 20 00 0d 0a 54 72 69 67 67 65 72 20 4d 61     x: ...Trigger Ma
    affd:	63 72 6f 20 53 74 61 74 65 3a 20 00 57 61 69 74     cro State: .Wait
    b00d:	69 6e 67 00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b     ing..[1;32mINFO.
    b01d:	5b 30 6d 20 2d 20 52 65 73 75 6c 74 20 4d 61 63     [0m - Result Mac
    b02d:	72 6f 20 49 6e 64 65 78 3a 20 00 2c 00 0d 0a 46     ro Index: .,...F
    b03d:	69 6e 61 6c 20 54 72 69 67 67 65 72 20 53 74 61     inal Trigger Sta
    b04d:	74 65 20 28 53 74 61 74 65 2f 54 79 70 65 29 3a     te (State/Type):
    b05d:	20 00 63 61 70 4c 69 73 74 00 63 61 70 53 65 6c      .capList.capSel
    b06d:	65 63 74 00 6b 65 79 48 6f 6c 64 00 6b 65 79 50     ect.keyHold.keyP
    b07d:	72 65 73 73 00 6b 65 79 52 65 6c 65 61 73 65 00     ress.keyRelease.
    b08d:	6c 61 79 65 72 44 65 62 75 67 00 6c 61 79 65 72     layerDebug.layer
    b09d:	4c 69 73 74 00 6c 61 79 65 72 53 74 61 74 65 00     List.layerState.
    b0ad:	6d 61 63 72 6f 44 65 62 75 67 00 6d 61 63 72 6f     macroDebug.macro
    b0bd:	4c 69 73 74 00 6d 61 63 72 6f 50 72 6f 63 00 6d     List.macroProc.m
    b0cd:	61 63 72 6f 53 68 6f 77 00 6d 61 63 72 6f 53 74     acroShow.macroSt
    b0dd:	65 70 00 44 3a 20 4d 44 45 72 67 6f 31 20 2b 20     ep.D: MDErgo1 + 
    b0ed:	6c 63 64 46 75 6e 63 4d 61 70 00 31 3a 20 4d 44     lcdFuncMap.1: MD
    b0fd:	45 72 67 6f 31 20 2b 20 6c 63 64 46 75 6e 63 4d     Ergo1 + lcdFuncM
    b10d:	61 70 00 32 3a 20 4d 44 45 72 67 6f 31 20 2b 20     ap.2: MDErgo1 + 
    b11d:	6c 63 64 46 75 6e 63 4d 61 70 00                    lcdFuncMap.

0000b128 <tm22_guide>:
    b128:	01 00 01 3a 00                                      ...:.

0000b12d <rm51_guide>:
    b12d:	01 0e 10 00                                         ....

0000b131 <rm23_guide>:
    b131:	01 0e 0a 00                                         ....

0000b135 <rm75_guide>:
    b135:	01 0e 43 00                                         ..C.

0000b139 <rm47_guide>:
    b139:	01 0e 38 00                                         ..8.

0000b13d <rm19_guide>:
    b13d:	01 0e 35 00                                         ..5.

0000b141 <macroShowCLIDict_DescEntry>:
    b141:	53 68 6f 77 20 74 68 65 20 6d 61 63 72 6f 20 63     Show the macro c
    b151:	6f 72 72 65 73 70 6f 6e 64 69 6e 67 20 74 6f 20     orresponding to 
    b161:	74 68 65 20 67 69 76 65 6e 20 69 6e 64 65 78 2e     the given index.
    b171:	0d 0a 09 09 1b 5b 33 35 6d 54 31 36 1b 5b 30 6d     .....[35mT16.[0m
    b181:	20 49 6e 64 65 78 65 64 20 54 72 69 67 67 65 72      Indexed Trigger
    b191:	20 4d 61 63 72 6f 20 30 78 31 30 2c 20 1b 5b 33      Macro 0x10, .[3
    b1a1:	35 6d 52 31 32 1b 5b 30 6d 20 49 6e 64 65 78 65     5mR12.[0m Indexe
    b1b1:	64 20 52 65 73 75 6c 74 20 4d 61 63 72 6f 20 30     d Result Macro 0
    b1c1:	78 30 43 00                                         x0C.

0000b1c5 <tm80_guide>:
    b1c5:	01 00 01 33 00                                      ...3.

0000b1ca <tm52_guide>:
    b1ca:	01 00 01 07 00 00                                   ......

0000b1d0 <default_tl_0x20>:
    b1d0:	01 00 00 00 3f 00 00 00                             ....?...

0000b1d8 <default_tl_0x21>:
    b1d8:	01 00 00 00 29 00 00 00                             ....)...

0000b1e0 <default_tl_0x22>:
    b1e0:	01 00 00 00 2e 00 00 00                             ........

0000b1e8 <default_tl_0x23>:
    b1e8:	01 00 00 00 33 00 00 00                             ....3...

0000b1f0 <default_tl_0x24>:
    b1f0:	01 00 00 00 1d 00 00 00                             ........

0000b1f8 <default_tl_0x25>:
    b1f8:	01 00 00 00 22 00 00 00                             ...."...

0000b200 <default_tl_0x26>:
    b200:	01 00 00 00 0b 00 00 00                             ........

0000b208 <default_tl_0x27>:
    b208:	01 00 00 00 1a 00 00 00                             ........

0000b210 <default_tl_0x28>:
    b210:	01 00 00 00 1f 00 00 00                             ........

0000b218 <default_tl_0x29>:
    b218:	01 00 00 00 08 00 00 00                             ........

0000b220 <rm39_guide>:
    b220:	01 0e 1b 00                                         ....

0000b224 <tm9_guide>:
    b224:	01 00 01 1b 00                                      .....

0000b229 <rm10_guide>:
    b229:	01 0e 0e 00 00 00 00                                .......

0000b230 <default_tl_0x2A>:
    b230:	01 00 00 00 0e 00 00 00 1b 5b 31 3b 35 3b 33 31     .........[1;5;31
    b240:	6d 45 52 52 4f 52 1b 5b 30 6d 20 2d 20 4c 45 44     mERROR.[0m - LED
    b250:	20 53 74 61 74 65 20 54 79 70 65 20 2d 20 4e 6f      State Type - No
    b260:	74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 2e 2e 2e     t implemented...
    b270:	0d 0a 00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f     ....[1;5;31mERRO
    b280:	52 1b 5b 30 6d 20 2d 20 41 6e 61 6c 6f 67 20 53     R.[0m - Analog S
    b290:	74 61 74 65 20 54 79 70 65 20 2d 20 4e 6f 74 20     tate Type - Not 
    b2a0:	69 6d 70 6c 65 6d 65 6e 74 65 64 2e 2e 2e 0d 0a     implemented.....
    b2b0:	00 1b 5b 31 3b 35 3b 33 31 6d 45 52 52 4f 52 1b     ..[1;5;31mERROR.
    b2c0:	5b 30 6d 20 2d 20 49 6e 76 61 6c 69 64 20 53 74     [0m - Invalid St
    b2d0:	61 74 65 20 54 79 70 65 2e 20 54 68 69 73 20 69     ate Type. This i
    b2e0:	73 20 61 20 62 75 67 2e 0d 0a 00                    s a bug....

0000b2eb <kbdProtocolCLIDict_DescEntry>:
    b2eb:	4b 65 79 62 6f 61 72 64 20 50 72 6f 74 6f 63 6f     Keyboard Protoco
    b2fb:	6c 20 4d 6f 64 65 3a 20 30 20 2d 20 42 6f 6f 74     l Mode: 0 - Boot
    b30b:	2c 20 31 20 2d 20 4f 53 2f 4e 4b 52 4f 20 4d 6f     , 1 - OS/NKRO Mo
    b31b:	64 65 00                                            de.

0000b31e <CSWTCH.80>:
    b31e:	00 01 02 03 04 05 06 07                             ........

0000b326 <CSWTCH.81>:
    b326:	15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16     ................
    b336:	17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18     ................
    b346:	19 19 19 19 19 19 19 19 1a 1a 1a 1a 1a 1a 1a 1a     ................

0000b356 <CSWTCH.78>:
    b356:	06 06 06 06 06 06 06 06 07 07 07 07 07 07 07 07     ................
    b366:	08 08 08 08 08 08 08 08 09 09 09 09 09 09 09 09     ................
    b376:	0a 0a 0a 0a 0a 0a 0a 0a 0b 0b 0b 0b 0b 0b 0b 0b     ................
    b386:	0c 0c 0c 0c 0c 0c 0c 0c 0d 0d 0d 0d 0d 0d 0d 0d     ................
    b396:	0e 0e 0e 0e 0e 0e 0e 0e 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b3a6:	10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11     ................
    b3b6:	12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13     ................

0000b3c6 <outputCLIDictName>:
    b3c6:	55 53 42 20 4d 6f 64 75 6c 65 20 43 6f 6d 6d 61     USB Module Comma
    b3d6:	6e 64 73 00                                         nds.

0000b3da <CSWTCH.79>:
    b3da:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    b3ea:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    b3fa:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    b40a:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    b41a:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    b42a:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    b43a:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    b44a:	00 00                                               ..

0000b44c <outputCLIDict>:
    b44c:	fa b7 00 00 eb b2 00 00 d5 5d 00 00 06 b8 00 00     .........]......
    b45c:	33 b8 00 00 59 5e 00 00 12 b8 00 00 31 b9 00 00     3...Y^......1...
    b46c:	fd 5d 00 00 1b b8 00 00 71 b9 00 00 b1 5d 00 00     .]......q....]..
    b47c:	24 b8 00 00 4d b8 00 00 25 5e 00 00 2c b8 00 00     $...M...%^..,...
    b48c:	a0 b4 00 00 7d 5e 00 00 00 00 00 00 00 00 00 00     ....}^..........
    b49c:	00 00 00 00                                         ....

0000b4a0 <setModCLIDict_DescEntry>:
    b4a0:	53 65 74 20 74 68 65 20 6d 6f 64 66 69 65 72 20     Set the modfier 
    b4b0:	62 79 74 65 3a 0d 0a 09 09 31 20 4c 43 74 72 6c     byte:....1 LCtrl
    b4c0:	2c 20 32 20 4c 53 68 66 74 2c 20 34 20 4c 41 6c     , 2 LShft, 4 LAl
    b4d0:	74 2c 20 38 20 4c 47 55 49 2c 20 31 36 20 52 43     t, 8 LGUI, 16 RC
    b4e0:	74 72 6c 2c 20 33 32 20 52 53 68 66 74 2c 20 36     trl, 32 RShft, 6
    b4f0:	34 20 52 41 6c 74 2c 20 31 32 38 20 52 47 55 49     4 RAlt, 128 RGUI
    b500:	00 1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d     ..[1;32mINFO.[0m
    b510:	20 2d 20 4b 65 79 62 6f 61 72 64 20 50 72 6f 74      - Keyboard Prot
    b520:	6f 63 6f 6c 3a 20 00 1b 5b 31 3b 33 32 6d 49 4e     ocol: ..[1;32mIN
    b530:	46 4f 1b 5b 30 6d 20 2d 20 4c 45 44 20 53 74 61     FO.[0m - LED Sta
    b540:	74 65 3a 20 00 4f 75 74 70 75 74 5f 63 6f 6e 73     te: .Output_cons
    b550:	43 74 72 6c 53 65 6e 64 28 63 6f 6e 73 43 6f 64     CtrlSend(consCod
    b560:	65 29 00 1b 5b 31 3b 33 33 6d 57 41 52 4e 49 4e     e)..[1;33mWARNIN
    b570:	47 1b 5b 30 6d 20 2d 20 43 6f 6e 73 75 6d 65 72     G.[0m - Consumer
    b580:	20 43 6f 6e 74 72 6f 6c 20 69 73 20 6e 6f 74 20      Control is not 
    b590:	69 6d 70 6c 65 6d 65 6e 74 65 64 20 66 6f 72 20     implemented for 
    b5a0:	42 6f 6f 74 20 4d 6f 64 65 0d 0a 00 4f 75 74 70     Boot Mode...Outp
    b5b0:	75 74 5f 6e 6f 6e 65 53 65 6e 64 28 29 00 4f 75     ut_noneSend().Ou
    b5c0:	74 70 75 74 5f 73 79 73 43 74 72 6c 53 65 6e 64     tput_sysCtrlSend
    b5d0:	28 73 79 73 43 6f 64 65 29 00 1b 5b 31 3b 33 33     (sysCode)..[1;33
    b5e0:	6d 57 41 52 4e 49 4e 47 1b 5b 30 6d 20 2d 20 53     mWARNING.[0m - S
    b5f0:	79 73 74 65 6d 20 43 6f 6e 74 72 6f 6c 20 69 73     ystem Control is
    b600:	20 6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64      not implemented
    b610:	20 66 6f 72 20 42 6f 6f 74 20 4d 6f 64 65 0d 0a      for Boot Mode..
    b620:	00 4f 75 74 70 75 74 5f 66 6c 61 73 68 4d 6f 64     .Output_flashMod
    b630:	65 28 29 00 4f 75 74 70 75 74 5f 75 73 62 4d 6f     e().Output_usbMo
    b640:	75 73 65 28 6d 6f 75 73 65 42 75 74 74 6f 6e 2c     use(mouseButton,
    b650:	72 65 6c 58 2c 72 65 6c 59 29 00 4f 75 74 70 75     relX,relY).Outpu
    b660:	74 5f 6b 62 64 50 72 6f 74 6f 63 6f 6c 42 6f 6f     t_kbdProtocolBoo
    b670:	74 28 29 00 4f 75 74 70 75 74 5f 6b 62 64 50 72     t().Output_kbdPr
    b680:	6f 74 6f 63 6f 6c 4e 4b 52 4f 28 29 00 4f 75 74     otocolNKRO().Out
    b690:	70 75 74 5f 75 73 62 43 6f 64 65 53 65 6e 64 28     put_usbCodeSend(
    b6a0:	75 73 62 43 6f 64 65 29 00 1b 5b 31 3b 33 33 6d     usbCode)..[1;33m
    b6b0:	57 41 52 4e 49 4e 47 1b 5b 30 6d 20 2d 20 55 53     WARNING.[0m - US
    b6c0:	42 20 4b 65 79 20 6c 69 6d 69 74 20 72 65 61 63     B Key limit reac
    b6d0:	68 65 64 0d 0a 00 1b 5b 31 3b 33 33 6d 57 41 52     hed....[1;33mWAR
    b6e0:	4e 49 4e 47 1b 5b 30 6d 20 2d 20 55 53 42 20 43     NING.[0m - USB C
    b6f0:	6f 64 65 20 61 62 6f 76 65 20 31 30 34 2f 30 78     ode above 104/0x
    b700:	36 38 20 69 6e 20 42 6f 6f 74 20 4d 6f 64 65 3a     68 in Boot Mode:
    b710:	20 00 1b 5b 31 3b 33 33 6d 57 41 52 4e 49 4e 47      ..[1;33mWARNING
    b720:	1b 5b 30 6d 20 2d 20 55 53 42 20 43 6f 64 65 20     .[0m - USB Code 
    b730:	6e 6f 74 20 77 69 74 68 69 6e 20 34 2d 34 39 20     not within 4-49 
    b740:	28 30 78 34 2d 30 78 33 31 29 2c 20 35 31 2d 31     (0x4-0x31), 51-1
    b750:	35 35 20 28 30 78 33 33 2d 30 78 39 42 29 2c 20     55 (0x33-0x9B), 
    b760:	31 35 37 2d 31 36 34 20 28 30 78 39 44 2d 30 78     157-164 (0x9D-0x
    b770:	41 34 29 2c 20 31 37 36 2d 32 32 31 20 28 30 78     A4), 176-221 (0x
    b780:	42 30 2d 30 78 44 44 29 20 6f 72 20 32 32 34 2d     B0-0xDD) or 224-
    b790:	32 33 31 20 28 30 78 45 30 2d 30 78 45 37 29 20     231 (0xE0-0xE7) 
    b7a0:	4e 4b 52 4f 20 4d 6f 64 65 3a 20 00 1b 5b 31 3b     NKRO Mode: ..[1;
    b7b0:	33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d 20 45 78     32mINFO.[0m - Ex
    b7c0:	74 65 72 6e 61 6c 20 41 76 61 69 6c 61 62 6c 65     ternal Available
    b7d0:	20 43 75 72 72 65 6e 74 20 43 68 61 6e 67 65 64      Current Changed
    b7e0:	2e 20 54 6f 74 61 6c 20 41 76 61 69 6c 61 62 6c     . Total Availabl
    b7f0:	65 3a 20 00 20 6d 41 0d 0a 00 6b 62 64 50 72 6f     e: . mA...kbdPro
    b800:	74 6f 63 6f 6c 00 6f 75 74 70 75 74 44 65 62 75     tocol.outputDebu
    b810:	67 00 72 65 61 64 4c 45 44 73 00 73 65 6e 64 4b     g.readLEDs.sendK
    b820:	65 79 73 00 73 65 74 4b 65 79 73 00 73 65 74 4d     eys.setKeys.setM
    b830:	6f 64 00                                            od.

0000b833 <outputDebugCLIDict_DescEntry>:
    b833:	54 6f 67 67 6c 65 20 4f 75 74 70 75 74 20 44 65     Toggle Output De
    b843:	62 75 67 20 6d 6f 64 65 2e 00                       bug mode..

0000b84d <setKeysCLIDict_DescEntry>:
    b84d:	50 72 65 70 61 72 65 20 61 20 73 70 61 63 65 20     Prepare a space 
    b85d:	73 65 70 61 72 61 74 65 64 20 6c 69 73 74 20 6f     separated list o
    b86d:	66 20 55 53 42 20 63 6f 64 65 73 20 28 64 65 63     f USB codes (dec
    b87d:	69 6d 61 6c 29 2e 20 57 61 69 74 73 20 75 6e 74     imal). Waits unt
    b88d:	69 6c 20 1b 5b 33 35 6d 73 65 6e 64 4b 65 79 73     il .[35msendKeys
    b89d:	1b 5b 30 6d 2e 00                                   .[0m..

0000b8a3 <CSWTCH.76>:
    b8a3:	00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 02     ................
    b8b3:	02 02 02 02 02 02 02 03 03 03 03 03 03 03 03 04     ................
    b8c3:	04 04 04 04 04 04 04 05 05 05 05 05 05 05 05        ...............

0000b8d2 <CSWTCH.77>:
    b8d2:	01 02 03 04 05 06 07 00 01 02 03 04 05 06 07 00     ................
    b8e2:	01 02 03 04 05 06 07 00 01 02 03 04 05 06 07 00     ................
    b8f2:	01 02 03 04 05 06 07 00 01 02 03 04 05 06 07        ...............

0000b901 <CSWTCH.82>:
    b901:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    b911:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................
    b921:	00 01 02 03 04 05 06 07 00 01 02 03 04 05 06 07     ................

0000b931 <readLEDsCLIDict_DescEntry>:
    b931:	52 65 61 64 20 4c 45 44 20 62 79 74 65 3a 0d 0a     Read LED byte:..
    b941:	09 09 31 20 4e 75 6d 4c 63 6b 2c 20 32 20 43 61     ..1 NumLck, 2 Ca
    b951:	70 73 4c 63 6b 2c 20 34 20 53 63 72 6c 4c 63 6b     psLck, 4 ScrlLck
    b961:	2c 20 31 36 20 4b 61 6e 61 2c 20 65 74 63 2e 00     , 16 Kana, etc..

0000b971 <sendKeysCLIDict_DescEntry>:
    b971:	53 65 6e 64 20 74 68 65 20 70 72 65 70 61 72 65     Send the prepare
    b981:	64 20 6c 69 73 74 20 6f 66 20 55 53 42 20 63 6f     d list of USB co
    b991:	64 65 73 20 61 6e 64 20 6d 6f 64 69 66 69 65 72     des and modifier
    b9a1:	20 62 79 74 65 2e 00                                 byte..

0000b9a8 <usb_endpoint_config_table>:
    b9a8:	15 15 15 19 15 15 15 15                             ........

0000b9b0 <usb_descriptor_list>:
    b9b0:	00 01 00 00 f2 8f ff 1f 12 00 00 00 00 02 00 00     ................
    b9c0:	a4 8e ff 1f c8 00 00 00 00 06 00 00 8b 93 ff 1f     ................
    b9d0:	01 00 00 00 00 0a 00 00 8a 93 ff 1f 01 00 00 00     ................
    b9e0:	00 22 00 00 de 90 ff 1f 3f 00 00 00 00 21 00 00     ."......?....!..
    b9f0:	b6 8e ff 1f 09 00 00 00 00 22 01 00 5a 8d ff 1f     ........."..Z...
    ba00:	7d 00 00 00 00 21 01 00 cf 8e ff 1f 09 00 00 00     }....!..........
    ba10:	00 22 04 00 6c 8f ff 1f 33 00 00 00 00 21 04 00     ."..l...3....!..
    ba20:	2a 8f ff 1f 09 00 00 00 00 22 05 00 d7 8d ff 1f     *........"......
    ba30:	55 00 00 00 00 21 05 00 43 8f ff 1f 09 00 00 00     U....!..C.......
    ba40:	00 22 06 00 9f 8f ff 1f 35 00 00 00 00 21 06 00     ."......5....!..
    ba50:	5c 8f ff 1f 09 00 00 00 00 03 00 00 1e 91 ff 1f     \...............
    ba60:	00 00 00 00 01 03 09 04 40 90 ff 1f 00 00 00 00     ........@.......
    ba70:	02 03 09 04 70 90 ff 1f 00 00 00 00 03 03 09 04     ....p...........
    ba80:	22 91 ff 1f 00 00 00 00 04 03 09 04 d4 8f ff 1f     "...............
    ba90:	00 00 00 00 05 03 09 04 52 90 ff 1f 00 00 00 00     ........R.......
    baa0:	06 03 09 04 04 90 ff 1f 00 00 00 00 07 03 09 04     ................
    bab0:	2c 8e ff 1f 00 00 00 00 08 03 09 04 78 8e ff 1f     ,...........x...
    bac0:	00 00 00 00 09 03 09 04 64 8e ff 1f 00 00 00 00     ........d.......
    bad0:	0a 03 09 04 86 8e ff 1f 00 00 00 00 00 00 00 00     ................
    bae0:	00 00 00 00 00 00 00 00 1b 5b 31 3b 33 33 6d 57     .........[1;33mW
    baf0:	41 52 4e 49 4e 47 1b 5b 30 6d 20 2d 20 53 45 54     ARNING.[0m - SET
    bb00:	5f 46 45 41 54 55 52 45 20 2d 20 44 65 76 69 63     _FEATURE - Devic
    bb10:	65 20 77 56 61 6c 75 65 28 00 1b 5b 31 3b 33 33     e wValue(..[1;33
    bb20:	6d 57 41 52 4e 49 4e 47 1b 5b 30 6d 20 2d 20 43     mWARNING.[0m - C
    bb30:	4c 45 41 52 5f 46 45 41 54 55 52 45 20 2d 20 49     LEAR_FEATURE - I
    bb40:	6e 74 65 72 66 61 63 65 20 77 56 61 6c 75 65 28     nterface wValue(
    bb50:	00 29 20 77 49 6e 64 65 78 28 00 1b 5b 31 3b 33     .) wIndex(..[1;3
    bb60:	33 6d 57 41 52 4e 49 4e 47 1b 5b 30 6d 20 2d 20     3mWARNING.[0m - 
    bb70:	53 45 54 5f 46 45 41 54 55 52 45 20 2d 20 49 6e     SET_FEATURE - In
    bb80:	74 65 72 66 61 63 65 20 77 56 61 6c 75 65 28 00     terface wValue(.
    bb90:	1b 5b 31 3b 33 33 6d 57 41 52 4e 49 4e 47 1b 5b     .[1;33mWARNING.[
    bba0:	30 6d 20 2d 20 55 6e 6b 6e 6f 77 6e 20 69 6e 74     0m - Unknown int
    bbb0:	65 72 66 61 63 65 20 2d 20 00 1b 5b 31 3b 35 3b     erface - ..[1;5;
    bbc0:	33 31 6d 45 52 52 4f 52 1b 5b 30 6d 20 2d 20 55     31mERROR.[0m - U
    bbd0:	53 42 20 6e 6f 74 20 63 6f 6e 66 69 67 75 72 65     SB not configure
    bbe0:	64 2e 2e 2e 0d 0a 00 1b 5b 31 3b 33 33 6d 57 41     d.......[1;33mWA
    bbf0:	52 4e 49 4e 47 1b 5b 30 6d 20 2d 20 55 53 42 20     RNING.[0m - USB 
    bc00:	54 72 61 6e 73 6d 69 74 20 54 69 6d 65 6f 75 74     Transmit Timeout
    bc10:	2e 2e 2e 0d 0a 00 53 79 73 43 74 72 6c 5b 00 5d     ......SysCtrl[.]
    bc20:	20 0d 0a 00 43 6f 6e 73 43 74 72 6c 5b 00 1b 5b      ...ConsCtrl[..[
    bc30:	31 3b 33 35 6d 44 45 42 55 47 1b 5b 30 6d 20 2d     1;35mDEBUG.[0m -
    bc40:	20 42 6f 6f 74 20 55 53 42 3a 20 00 1b 5b 31 3b      Boot USB: ..[1;
    bc50:	33 35 6d 44 45 42 55 47 1b 5b 30 6d 20 2d 20 4e     35mDEBUG.[0m - N
    bc60:	4b 52 4f 20 55 53 42 3a 20 00 00 00 00 00           KRO USB: .....

0000bc6e <helpCLIDict_DescEntry>:
    bc6e:	59 6f 75 27 72 65 20 6c 6f 6f 6b 69 6e 67 20 61     You're looking a
    bc7e:	74 20 69 74 20 3a 50 00                             t it :P.

0000bc86 <restartCLIDict_DescEntry>:
    bc86:	53 65 6e 64 73 20 61 20 73 6f 66 74 77 61 72 65     Sends a software
    bc96:	20 72 65 73 74 61 72 74 2c 20 73 68 6f 75 6c 64      restart, should
    bca6:	20 62 65 20 73 69 6d 69 6c 61 72 20 74 6f 20 70      be similar to p
    bcb6:	6f 77 65 72 69 6e 67 20 6f 6e 20 74 68 65 20 64     owering on the d
    bcc6:	65 76 69 63 65 2e 00                                evice..

0000bccd <clearCLIDict_DescEntry>:
    bccd:	43 6c 65 61 72 20 74 68 65 20 73 63 72 65 65 6e     Clear the screen
    bcdd:	2e 00                                               ..

0000bcdf <reloadCLIDict_DescEntry>:
    bcdf:	53 69 67 6e 61 6c 73 20 6d 69 63 72 6f 63 6f 6e     Signals microcon
    bcef:	74 72 6f 6c 6c 65 72 20 74 6f 20 72 65 66 6c 61     troller to refla
    bcff:	73 68 2f 72 65 6c 6f 61 64 2e 00                    sh/reload..

0000bd0a <versionCLIDict_DescEntry>:
    bd0a:	56 65 72 73 69 6f 6e 20 69 6e 66 6f 72 6d 61 74     Version informat
    bd1a:	69 6f 6e 20 61 62 6f 75 74 20 74 68 69 73 20 66     ion about this f
    bd2a:	69 72 6d 77 61 72 65 2e 00 1b 5b 32 4a 1b 5b 48     irmware...[2J.[H
    bd3a:	0d 00 1b 63 00 0d 0a 1b 5b 31 3b 33 32 6d 00 1b     ...c....[1;32m..
    bd4a:	5b 30 6d 0d 0a 00 20 1b 5b 33 35 6d 00 20 1b 5b     [0m... .[35m. .[
    bd5a:	31 6d 52 65 76 69 73 69 6f 6e 3a 1b 5b 30 6d 20     1mRevision:.[0m 
    bd6a:	20 20 20 20 20 66 39 37 61 38 36 38 35 35 66 33          f97a86855f3
    bd7a:	36 61 66 38 63 62 62 31 39 38 63 64 33 63 37 30     6af8cbb198cd3c70
    bd8a:	39 61 34 39 66 35 66 35 39 37 34 39 63 0d 0a 00     9a49f5f59749c...
    bd9a:	20 1b 5b 31 6d 42 72 61 6e 63 68 3a 1b 5b 30 6d      .[1mBranch:.[0m
    bdaa:	20 20 20 20 20 20 20 20 6d 61 73 74 65 72 0d 0a             master..
    bdba:	00 20 1b 5b 31 6d 54 72 65 65 20 53 74 61 74 75     . .[1mTree Statu
    bdca:	73 3a 1b 5b 30 6d 20 20 20 44 69 72 74 79 0d 0a     s:.[0m   Dirty..
    bdda:	09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d     .Keyboards/ICED-
    bdea:	4c 2f 43 4d 61 6b 65 43 61 63 68 65 2e 74 78 74     L/CMakeCache.txt
    bdfa:	0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45     ...Keyboards/ICE
    be0a:	44 2d 4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 33     D-L/CMakeFiles/3
    be1a:	2e 33 2e 31 2f 43 4d 61 6b 65 43 43 6f 6d 70 69     .3.1/CMakeCCompi
    be2a:	6c 65 72 2e 63 6d 61 6b 65 0d 0a 09 4b 65 79 62     ler.cmake...Keyb
    be3a:	6f 61 72 64 73 2f 49 43 45 44 2d 4c 2f 43 4d 61     oards/ICED-L/CMa
    be4a:	6b 65 46 69 6c 65 73 2f 33 2e 33 2e 31 2f 43 4d     keFiles/3.3.1/CM
    be5a:	61 6b 65 43 58 58 43 6f 6d 70 69 6c 65 72 2e 63     akeCXXCompiler.c
    be6a:	6d 61 6b 65 0d 0a 09 4b 65 79 62 6f 61 72 64 73     make...Keyboards
    be7a:	2f 49 43 45 44 2d 4c 2f 43 4d 61 6b 65 46 69 6c     /ICED-L/CMakeFil
    be8a:	65 73 2f 33 2e 33 2e 31 2f 43 4d 61 6b 65 53 79     es/3.3.1/CMakeSy
    be9a:	73 74 65 6d 2e 63 6d 61 6b 65 0d 0a 09 4b 65 79     stem.cmake...Key
    beaa:	62 6f 61 72 64 73 2f 49 43 45 44 2d 4c 2f 43 4d     boards/ICED-L/CM
    beba:	61 6b 65 46 69 6c 65 73 2f 43 4d 61 6b 65 44 69     akeFiles/CMakeDi
    beca:	72 65 63 74 6f 72 79 49 6e 66 6f 72 6d 61 74 69     rectoryInformati
    beda:	6f 6e 2e 63 6d 61 6b 65 0d 0a 09 4b 65 79 62 6f     on.cmake...Keybo
    beea:	61 72 64 73 2f 49 43 45 44 2d 4c 2f 43 4d 61 6b     ards/ICED-L/CMak
    befa:	65 46 69 6c 65 73 2f 43 4d 61 6b 65 4f 75 74 70     eFiles/CMakeOutp
    bf0a:	75 74 2e 6c 6f 67 0d 0a 09 4b 65 79 62 6f 61 72     ut.log...Keyboar
    bf1a:	64 73 2f 49 43 45 44 2d 4c 2f 43 4d 61 6b 65 46     ds/ICED-L/CMakeF
    bf2a:	69 6c 65 73 2f 43 4d 61 6b 65 52 75 6c 65 48 61     iles/CMakeRuleHa
    bf3a:	73 68 65 73 2e 74 78 74 0d 0a 09 4b 65 79 62 6f     shes.txt...Keybo
    bf4a:	61 72 64 73 2f 49 43 45 44 2d 4c 2f 43 4d 61 6b     ards/ICED-L/CMak
    bf5a:	65 46 69 6c 65 73 2f 4d 61 6b 65 66 69 6c 65 2e     eFiles/Makefile.
    bf6a:	63 6d 61 6b 65 0d 0a 09 4b 65 79 62 6f 61 72 64     cmake...Keyboard
    bf7a:	73 2f 49 43 45 44 2d 4c 2f 43 4d 61 6b 65 46 69     s/ICED-L/CMakeFi
    bf8a:	6c 65 73 2f 4d 61 6b 65 66 69 6c 65 32 0d 0a 09     les/Makefile2...
    bf9a:	4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 4c     Keyboards/ICED-L
    bfaa:	2f 43 4d 61 6b 65 46 69 6c 65 73 2f 53 69 7a 65     /CMakeFiles/Size
    bfba:	41 66 74 65 72 2e 64 69 72 2f 44 65 70 65 6e 64     After.dir/Depend
    bfca:	49 6e 66 6f 2e 63 6d 61 6b 65 0d 0a 09 4b 65 79     Info.cmake...Key
    bfda:	62 6f 61 72 64 73 2f 49 43 45 44 2d 4c 2f 43 4d     boards/ICED-L/CM
    bfea:	61 6b 65 46 69 6c 65 73 2f 53 69 7a 65 41 66 74     akeFiles/SizeAft
    bffa:	65 72 2e 64 69 72 2f 62 75 69 6c 64 2e 6d 61 6b     er.dir/build.mak
    c00a:	65 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43     e...Keyboards/IC
    c01a:	45 44 2d 4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f     ED-L/CMakeFiles/
    c02a:	53 69 7a 65 41 66 74 65 72 2e 64 69 72 2f 63 6d     SizeAfter.dir/cm
    c03a:	61 6b 65 5f 63 6c 65 61 6e 2e 63 6d 61 6b 65 0d     ake_clean.cmake.
    c04a:	0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44     ..Keyboards/ICED
    c05a:	2d 4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 53 69     -L/CMakeFiles/Si
    c06a:	7a 65 41 66 74 65 72 2e 64 69 72 2f 64 65 70 65     zeAfter.dir/depe
    c07a:	6e 64 2e 69 6e 74 65 72 6e 61 6c 0d 0a 09 4b 65     nd.internal...Ke
    c08a:	79 62 6f 61 72 64 73 2f 49 43 45 44 2d 4c 2f 43     yboards/ICED-L/C
    c09a:	4d 61 6b 65 46 69 6c 65 73 2f 53 69 7a 65 41 66     MakeFiles/SizeAf
    c0aa:	74 65 72 2e 64 69 72 2f 64 65 70 65 6e 64 2e 6d     ter.dir/depend.m
    c0ba:	61 6b 65 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f     ake...Keyboards/
    c0ca:	49 43 45 44 2d 4c 2f 43 4d 61 6b 65 46 69 6c 65     ICED-L/CMakeFile
    c0da:	73 2f 53 69 7a 65 41 66 74 65 72 2e 64 69 72 2f     s/SizeAfter.dir/
    c0ea:	70 72 6f 67 72 65 73 73 2e 6d 61 6b 65 0d 0a 09     progress.make...
    c0fa:	4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 4c     Keyboards/ICED-L
    c10a:	2f 43 4d 61 6b 65 46 69 6c 65 73 2f 54 61 72 67     /CMakeFiles/Targ
    c11a:	65 74 44 69 72 65 63 74 6f 72 69 65 73 2e 74 78     etDirectories.tx
    c12a:	74 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43     t...Keyboards/IC
    c13a:	45 44 2d 4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f     ED-L/CMakeFiles/
    c14a:	63 6d 61 6b 65 2e 63 68 65 63 6b 5f 63 61 63 68     cmake.check_cach
    c15a:	65 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43     e...Keyboards/IC
    c16a:	45 44 2d 4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f     ED-L/CMakeFiles/
    c17a:	6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f     kiibohd.elf.dir/
    c18a:	43 2e 69 6e 63 6c 75 64 65 63 61 63 68 65 0d 0a     C.includecache..
    c19a:	09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d     .Keyboards/ICED-
    c1aa:	4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69     L/CMakeFiles/kii
    c1ba:	62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f 44 65 62     bohd.elf.dir/Deb
    c1ca:	75 67 2f 63 6c 69 2f 63 6c 69 2e 63 2e 64 0d 0a     ug/cli/cli.c.d..
    c1da:	09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d     .Keyboards/ICED-
    c1ea:	4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69     L/CMakeFiles/kii
    c1fa:	62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f 44 65 62     bohd.elf.dir/Deb
    c20a:	75 67 2f 63 6c 69 2f 63 6c 69 2e 63 2e 6f 0d 0a     ug/cli/cli.c.o..
    c21a:	09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d     .Keyboards/ICED-
    c22a:	4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69     L/CMakeFiles/kii
    c23a:	62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f 44 65 62     bohd.elf.dir/Deb
    c24a:	75 67 2f 6c 65 64 2f 6c 65 64 2e 63 2e 64 0d 0a     ug/led/led.c.d..
    c25a:	09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d     .Keyboards/ICED-
    c26a:	4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69     L/CMakeFiles/kii
    c27a:	62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f 44 65 62     bohd.elf.dir/Deb
    c28a:	75 67 2f 6c 65 64 2f 6c 65 64 2e 63 2e 6f 0d 0a     ug/led/led.c.o..
    c29a:	09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d     .Keyboards/ICED-
    c2aa:	4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69     L/CMakeFiles/kii
    c2ba:	62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f 44 65 62     bohd.elf.dir/Deb
    c2ca:	75 67 2f 70 72 69 6e 74 2f 70 72 69 6e 74 2e 63     ug/print/print.c
    c2da:	2e 64 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49     .d...Keyboards/I
    c2ea:	43 45 44 2d 4c 2f 43 4d 61 6b 65 46 69 6c 65 73     CED-L/CMakeFiles
    c2fa:	2f 6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72     /kiibohd.elf.dir
    c30a:	2f 44 65 62 75 67 2f 70 72 69 6e 74 2f 70 72 69     /Debug/print/pri
    c31a:	6e 74 2e 63 2e 6f 0d 0a 09 4b 65 79 62 6f 61 72     nt.c.o...Keyboar
    c32a:	64 73 2f 49 43 45 44 2d 4c 2f 43 4d 61 6b 65 46     ds/ICED-L/CMakeF
    c33a:	69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e 65 6c 66     iles/kiibohd.elf
    c34a:	2e 64 69 72 2f 44 65 70 65 6e 64 49 6e 66 6f 2e     .dir/DependInfo.
    c35a:	63 6d 61 6b 65 0d 0a 09 4b 65 79 62 6f 61 72 64     cmake...Keyboard
    c36a:	73 2f 49 43 45 44 2d 4c 2f 43 4d 61 6b 65 46 69     s/ICED-L/CMakeFi
    c37a:	6c 65 73 2f 6b 69 69 62 6f 68 64 2e 65 6c 66 2e     les/kiibohd.elf.
    c38a:	64 69 72 2f 4c 69 62 2f 64 65 6c 61 79 2e 63 2e     dir/Lib/delay.c.
    c39a:	64 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43     d...Keyboards/IC
    c3aa:	45 44 2d 4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f     ED-L/CMakeFiles/
    c3ba:	6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f     kiibohd.elf.dir/
    c3ca:	4c 69 62 2f 64 65 6c 61 79 2e 63 2e 6f 0d 0a 09     Lib/delay.c.o...
    c3da:	4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 4c     Keyboards/ICED-L
    c3ea:	2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69 62     /CMakeFiles/kiib
    c3fa:	6f 68 64 2e 65 6c 66 2e 64 69 72 2f 4c 69 62 2f     ohd.elf.dir/Lib/
    c40a:	6d 6b 32 30 64 78 2e 63 2e 64 0d 0a 09 4b 65 79     mk20dx.c.d...Key
    c41a:	62 6f 61 72 64 73 2f 49 43 45 44 2d 4c 2f 43 4d     boards/ICED-L/CM
    c42a:	61 6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f 68 64     akeFiles/kiibohd
    c43a:	2e 65 6c 66 2e 64 69 72 2f 4c 69 62 2f 6d 6b 32     .elf.dir/Lib/mk2
    c44a:	30 64 78 2e 63 2e 6f 0d 0a 09 4b 65 79 62 6f 61     0dx.c.o...Keyboa
    c45a:	72 64 73 2f 49 43 45 44 2d 4c 2f 43 4d 61 6b 65     rds/ICED-L/CMake
    c46a:	46 69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e 65 6c     Files/kiibohd.el
    c47a:	66 2e 64 69 72 2f 4d 61 63 72 6f 2f 50 61 72 74     f.dir/Macro/Part
    c48a:	69 61 6c 4d 61 70 2f 6d 61 63 72 6f 2e 63 2e 64     ialMap/macro.c.d
    c49a:	0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45     ...Keyboards/ICE
    c4aa:	44 2d 4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b     D-L/CMakeFiles/k
    c4ba:	69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f 4d     iibohd.elf.dir/M
    c4ca:	61 63 72 6f 2f 50 61 72 74 69 61 6c 4d 61 70 2f     acro/PartialMap/
    c4da:	6d 61 63 72 6f 2e 63 2e 6f 0d 0a 09 4b 65 79 62     macro.c.o...Keyb
    c4ea:	6f 61 72 64 73 2f 49 43 45 44 2d 4c 2f 43 4d 61     oards/ICED-L/CMa
    c4fa:	6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e     keFiles/kiibohd.
    c50a:	65 6c 66 2e 64 69 72 2f 4d 61 63 72 6f 2f 50 61     elf.dir/Macro/Pa
    c51a:	72 74 69 61 6c 4d 61 70 2f 72 65 73 75 6c 74 2e     rtialMap/result.
    c52a:	63 2e 64 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f     c.d...Keyboards/
    c53a:	49 43 45 44 2d 4c 2f 43 4d 61 6b 65 46 69 6c 65     ICED-L/CMakeFile
    c54a:	73 2f 6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69     s/kiibohd.elf.di
    c55a:	72 2f 4d 61 63 72 6f 2f 50 61 72 74 69 61 6c 4d     r/Macro/PartialM
    c56a:	61 70 2f 72 65 73 75 6c 74 2e 63 2e 6f 0d 0a 09     ap/result.c.o...
    c57a:	4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 4c     Keyboards/ICED-L
    c58a:	2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69 62     /CMakeFiles/kiib
    c59a:	6f 68 64 2e 65 6c 66 2e 64 69 72 2f 4d 61 63 72     ohd.elf.dir/Macr
    c5aa:	6f 2f 50 61 72 74 69 61 6c 4d 61 70 2f 74 72 69     o/PartialMap/tri
    c5ba:	67 67 65 72 2e 63 2e 64 0d 0a 09 4b 65 79 62 6f     gger.c.d...Keybo
    c5ca:	61 72 64 73 2f 49 43 45 44 2d 4c 2f 43 4d 61 6b     ards/ICED-L/CMak
    c5da:	65 46 69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e 65     eFiles/kiibohd.e
    c5ea:	6c 66 2e 64 69 72 2f 4d 61 63 72 6f 2f 50 61 72     lf.dir/Macro/Par
    c5fa:	74 69 61 6c 4d 61 70 2f 74 72 69 67 67 65 72 2e     tialMap/trigger.
    c60a:	63 2e 6f 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f     c.o...Keyboards/
    c61a:	49 43 45 44 2d 4c 2f 43 4d 61 6b 65 46 69 6c 65     ICED-L/CMakeFile
    c62a:	73 2f 6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69     s/kiibohd.elf.di
    c63a:	72 2f 4f 75 74 70 75 74 2f 70 6a 72 63 55 53 42     r/Output/pjrcUSB
    c64a:	2f 61 72 6d 2f 75 73 62 5f 64 65 73 63 2e 63 2e     /arm/usb_desc.c.
    c65a:	64 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43     d...Keyboards/IC
    c66a:	45 44 2d 4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f     ED-L/CMakeFiles/
    c67a:	6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f     kiibohd.elf.dir/
    c68a:	4f 75 74 70 75 74 2f 70 6a 72 63 55 53 42 2f 61     Output/pjrcUSB/a
    c69a:	72 6d 2f 75 73 62 5f 64 65 73 63 2e 63 2e 6f 0d     rm/usb_desc.c.o.
    c6aa:	0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44     ..Keyboards/ICED
    c6ba:	2d 4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69     -L/CMakeFiles/ki
    c6ca:	69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f 4f 75     ibohd.elf.dir/Ou
    c6da:	74 70 75 74 2f 70 6a 72 63 55 53 42 2f 61 72 6d     tput/pjrcUSB/arm
    c6ea:	2f 75 73 62 5f 64 65 76 2e 63 2e 64 0d 0a 09 4b     /usb_dev.c.d...K
    c6fa:	65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 4c 2f     eyboards/ICED-L/
    c70a:	43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f     CMakeFiles/kiibo
    c71a:	68 64 2e 65 6c 66 2e 64 69 72 2f 4f 75 74 70 75     hd.elf.dir/Outpu
    c72a:	74 2f 70 6a 72 63 55 53 42 2f 61 72 6d 2f 75 73     t/pjrcUSB/arm/us
    c73a:	62 5f 64 65 76 2e 63 2e 6f 0d 0a 09 4b 65 79 62     b_dev.c.o...Keyb
    c74a:	6f 61 72 64 73 2f 49 43 45 44 2d 4c 2f 43 4d 61     oards/ICED-L/CMa
    c75a:	6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e     keFiles/kiibohd.
    c76a:	65 6c 66 2e 64 69 72 2f 4f 75 74 70 75 74 2f 70     elf.dir/Output/p
    c77a:	6a 72 63 55 53 42 2f 61 72 6d 2f 75 73 62 5f 6a     jrcUSB/arm/usb_j
    c78a:	6f 79 73 74 69 63 6b 2e 63 2e 64 0d 0a 09 4b 65     oystick.c.d...Ke
    c79a:	79 62 6f 61 72 64 73 2f 49 43 45 44 2d 4c 2f 43     yboards/ICED-L/C
    c7aa:	4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f 68     MakeFiles/kiiboh
    c7ba:	64 2e 65 6c 66 2e 64 69 72 2f 4f 75 74 70 75 74     d.elf.dir/Output
    c7ca:	2f 70 6a 72 63 55 53 42 2f 61 72 6d 2f 75 73 62     /pjrcUSB/arm/usb
    c7da:	5f 6a 6f 79 73 74 69 63 6b 2e 63 2e 6f 0d 0a 09     _joystick.c.o...
    c7ea:	4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 4c     Keyboards/ICED-L
    c7fa:	2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69 62     /CMakeFiles/kiib
    c80a:	6f 68 64 2e 65 6c 66 2e 64 69 72 2f 4f 75 74 70     ohd.elf.dir/Outp
    c81a:	75 74 2f 70 6a 72 63 55 53 42 2f 61 72 6d 2f 75     ut/pjrcUSB/arm/u
    c82a:	73 62 5f 6b 65 79 62 6f 61 72 64 2e 63 2e 64 0d     sb_keyboard.c.d.
    c83a:	0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44     ..Keyboards/ICED
    c84a:	2d 4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69     -L/CMakeFiles/ki
    c85a:	69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f 4f 75     ibohd.elf.dir/Ou
    c86a:	74 70 75 74 2f 70 6a 72 63 55 53 42 2f 61 72 6d     tput/pjrcUSB/arm
    c87a:	2f 75 73 62 5f 6b 65 79 62 6f 61 72 64 2e 63 2e     /usb_keyboard.c.
    c88a:	6f 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43     o...Keyboards/IC
    c89a:	45 44 2d 4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f     ED-L/CMakeFiles/
    c8aa:	6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f     kiibohd.elf.dir/
    c8ba:	4f 75 74 70 75 74 2f 70 6a 72 63 55 53 42 2f 61     Output/pjrcUSB/a
    c8ca:	72 6d 2f 75 73 62 5f 6d 65 6d 2e 63 2e 64 0d 0a     rm/usb_mem.c.d..
    c8da:	09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d     .Keyboards/ICED-
    c8ea:	4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69     L/CMakeFiles/kii
    c8fa:	62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f 4f 75 74     bohd.elf.dir/Out
    c90a:	70 75 74 2f 70 6a 72 63 55 53 42 2f 61 72 6d 2f     put/pjrcUSB/arm/
    c91a:	75 73 62 5f 6d 65 6d 2e 63 2e 6f 0d 0a 09 4b 65     usb_mem.c.o...Ke
    c92a:	79 62 6f 61 72 64 73 2f 49 43 45 44 2d 4c 2f 43     yboards/ICED-L/C
    c93a:	4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f 68     MakeFiles/kiiboh
    c94a:	64 2e 65 6c 66 2e 64 69 72 2f 4f 75 74 70 75 74     d.elf.dir/Output
    c95a:	2f 70 6a 72 63 55 53 42 2f 61 72 6d 2f 75 73 62     /pjrcUSB/arm/usb
    c96a:	5f 6d 6f 75 73 65 2e 63 2e 64 0d 0a 09 4b 65 79     _mouse.c.d...Key
    c97a:	62 6f 61 72 64 73 2f 49 43 45 44 2d 4c 2f 43 4d     boards/ICED-L/CM
    c98a:	61 6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f 68 64     akeFiles/kiibohd
    c99a:	2e 65 6c 66 2e 64 69 72 2f 4f 75 74 70 75 74 2f     .elf.dir/Output/
    c9aa:	70 6a 72 63 55 53 42 2f 61 72 6d 2f 75 73 62 5f     pjrcUSB/arm/usb_
    c9ba:	6d 6f 75 73 65 2e 63 2e 6f 0d 0a 09 4b 65 79 62     mouse.c.o...Keyb
    c9ca:	6f 61 72 64 73 2f 49 43 45 44 2d 4c 2f 43 4d 61     oards/ICED-L/CMa
    c9da:	6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e     keFiles/kiibohd.
    c9ea:	65 6c 66 2e 64 69 72 2f 4f 75 74 70 75 74 2f 70     elf.dir/Output/p
    c9fa:	6a 72 63 55 53 42 2f 61 72 6d 2f 75 73 62 5f 73     jrcUSB/arm/usb_s
    ca0a:	65 72 69 61 6c 2e 63 2e 64 0d 0a 09 4b 65 79 62     erial.c.d...Keyb
    ca1a:	6f 61 72 64 73 2f 49 43 45 44 2d 4c 2f 43 4d 61     oards/ICED-L/CMa
    ca2a:	6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e     keFiles/kiibohd.
    ca3a:	65 6c 66 2e 64 69 72 2f 4f 75 74 70 75 74 2f 70     elf.dir/Output/p
    ca4a:	6a 72 63 55 53 42 2f 61 72 6d 2f 75 73 62 5f 73     jrcUSB/arm/usb_s
    ca5a:	65 72 69 61 6c 2e 63 2e 6f 0d 0a 09 4b 65 79 62     erial.c.o...Keyb
    ca6a:	6f 61 72 64 73 2f 49 43 45 44 2d 4c 2f 43 4d 61     oards/ICED-L/CMa
    ca7a:	6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e     keFiles/kiibohd.
    ca8a:	65 6c 66 2e 64 69 72 2f 4f 75 74 70 75 74 2f 70     elf.dir/Output/p
    ca9a:	6a 72 63 55 53 42 2f 6f 75 74 70 75 74 5f 63 6f     jrcUSB/output_co
    caaa:	6d 2e 63 2e 64 0d 0a 09 4b 65 79 62 6f 61 72 64     m.c.d...Keyboard
    caba:	73 2f 49 43 45 44 2d 4c 2f 43 4d 61 6b 65 46 69     s/ICED-L/CMakeFi
    caca:	6c 65 73 2f 6b 69 69 62 6f 68 64 2e 65 6c 66 2e     les/kiibohd.elf.
    cada:	64 69 72 2f 4f 75 74 70 75 74 2f 70 6a 72 63 55     dir/Output/pjrcU
    caea:	53 42 2f 6f 75 74 70 75 74 5f 63 6f 6d 2e 63 2e     SB/output_com.c.
    cafa:	6f 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43     o...Keyboards/IC
    cb0a:	45 44 2d 4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f     ED-L/CMakeFiles/
    cb1a:	6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f     kiibohd.elf.dir/
    cb2a:	53 63 61 6e 2f 49 53 53 49 4c 65 64 2f 6c 65 64     Scan/ISSILed/led
    cb3a:	5f 73 63 61 6e 2e 63 2e 64 0d 0a 09 4b 65 79 62     _scan.c.d...Keyb
    cb4a:	6f 61 72 64 73 2f 49 43 45 44 2d 4c 2f 43 4d 61     oards/ICED-L/CMa
    cb5a:	6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e     keFiles/kiibohd.
    cb6a:	65 6c 66 2e 64 69 72 2f 53 63 61 6e 2f 49 53 53     elf.dir/Scan/ISS
    cb7a:	49 4c 65 64 2f 6c 65 64 5f 73 63 61 6e 2e 63 2e     ILed/led_scan.c.
    cb8a:	6f 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43     o...Keyboards/IC
    cb9a:	45 44 2d 4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f     ED-L/CMakeFiles/
    cbaa:	6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f     kiibohd.elf.dir/
    cbba:	53 63 61 6e 2f 4d 44 45 72 67 6f 31 2d 43 75 73     Scan/MDErgo1-Cus
    cbca:	74 6f 6d 4c 6f 67 6f 2f 73 63 61 6e 5f 6c 6f 6f     tomLogo/scan_loo
    cbda:	70 2e 63 2e 64 0d 0a 09 4b 65 79 62 6f 61 72 64     p.c.d...Keyboard
    cbea:	73 2f 49 43 45 44 2d 4c 2f 43 4d 61 6b 65 46 69     s/ICED-L/CMakeFi
    cbfa:	6c 65 73 2f 6b 69 69 62 6f 68 64 2e 65 6c 66 2e     les/kiibohd.elf.
    cc0a:	64 69 72 2f 53 63 61 6e 2f 4d 44 45 72 67 6f 31     dir/Scan/MDErgo1
    cc1a:	2d 43 75 73 74 6f 6d 4c 6f 67 6f 2f 73 63 61 6e     -CustomLogo/scan
    cc2a:	5f 6c 6f 6f 70 2e 63 2e 6f 0d 0a 09 4b 65 79 62     _loop.c.o...Keyb
    cc3a:	6f 61 72 64 73 2f 49 43 45 44 2d 4c 2f 43 4d 61     oards/ICED-L/CMa
    cc4a:	6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e     keFiles/kiibohd.
    cc5a:	65 6c 66 2e 64 69 72 2f 53 63 61 6e 2f 4d 61 74     elf.dir/Scan/Mat
    cc6a:	72 69 78 41 52 4d 2f 6d 61 74 72 69 78 5f 73 63     rixARM/matrix_sc
    cc7a:	61 6e 2e 63 2e 64 0d 0a 09 4b 65 79 62 6f 61 72     an.c.d...Keyboar
    cc8a:	64 73 2f 49 43 45 44 2d 4c 2f 43 4d 61 6b 65 46     ds/ICED-L/CMakeF
    cc9a:	69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e 65 6c 66     iles/kiibohd.elf
    ccaa:	2e 64 69 72 2f 53 63 61 6e 2f 4d 61 74 72 69 78     .dir/Scan/Matrix
    ccba:	41 52 4d 2f 6d 61 74 72 69 78 5f 73 63 61 6e 2e     ARM/matrix_scan.
    ccca:	63 2e 6f 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f     c.o...Keyboards/
    ccda:	49 43 45 44 2d 4c 2f 43 4d 61 6b 65 46 69 6c 65     ICED-L/CMakeFile
    ccea:	73 2f 6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69     s/kiibohd.elf.di
    ccfa:	72 2f 53 63 61 6e 2f 53 54 4c 63 64 2f 6c 63 64     r/Scan/STLcd/lcd
    cd0a:	5f 73 63 61 6e 2e 63 2e 64 0d 0a 09 4b 65 79 62     _scan.c.d...Keyb
    cd1a:	6f 61 72 64 73 2f 49 43 45 44 2d 4c 2f 43 4d 61     oards/ICED-L/CMa
    cd2a:	6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e     keFiles/kiibohd.
    cd3a:	65 6c 66 2e 64 69 72 2f 53 63 61 6e 2f 53 54 4c     elf.dir/Scan/STL
    cd4a:	63 64 2f 6c 63 64 5f 73 63 61 6e 2e 63 2e 6f 0d     cd/lcd_scan.c.o.
    cd5a:	0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44     ..Keyboards/ICED
    cd6a:	2d 4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69     -L/CMakeFiles/ki
    cd7a:	69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f 53 63     ibohd.elf.dir/Sc
    cd8a:	61 6e 2f 55 41 52 54 43 6f 6e 6e 65 63 74 2f 63     an/UARTConnect/c
    cd9a:	6f 6e 6e 65 63 74 5f 73 63 61 6e 2e 63 2e 64 0d     onnect_scan.c.d.
    cdaa:	0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44     ..Keyboards/ICED
    cdba:	2d 4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69     -L/CMakeFiles/ki
    cdca:	69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f 53 63     ibohd.elf.dir/Sc
    cdda:	61 6e 2f 55 41 52 54 43 6f 6e 6e 65 63 74 2f 63     an/UARTConnect/c
    cdea:	6f 6e 6e 65 63 74 5f 73 63 61 6e 2e 63 2e 6f 0d     onnect_scan.c.o.
    cdfa:	0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44     ..Keyboards/ICED
    ce0a:	2d 4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69     -L/CMakeFiles/ki
    ce1a:	69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f 62 75     ibohd.elf.dir/bu
    ce2a:	69 6c 64 2e 6d 61 6b 65 0d 0a 09 4b 65 79 62 6f     ild.make...Keybo
    ce3a:	61 72 64 73 2f 49 43 45 44 2d 4c 2f 43 4d 61 6b     ards/ICED-L/CMak
    ce4a:	65 46 69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e 65     eFiles/kiibohd.e
    ce5a:	6c 66 2e 64 69 72 2f 63 6d 61 6b 65 5f 63 6c 65     lf.dir/cmake_cle
    ce6a:	61 6e 2e 63 6d 61 6b 65 0d 0a 09 4b 65 79 62 6f     an.cmake...Keybo
    ce7a:	61 72 64 73 2f 49 43 45 44 2d 4c 2f 43 4d 61 6b     ards/ICED-L/CMak
    ce8a:	65 46 69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e 65     eFiles/kiibohd.e
    ce9a:	6c 66 2e 64 69 72 2f 64 65 70 65 6e 64 2e 69 6e     lf.dir/depend.in
    ceaa:	74 65 72 6e 61 6c 0d 0a 09 4b 65 79 62 6f 61 72     ternal...Keyboar
    ceba:	64 73 2f 49 43 45 44 2d 4c 2f 43 4d 61 6b 65 46     ds/ICED-L/CMakeF
    ceca:	69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e 65 6c 66     iles/kiibohd.elf
    ceda:	2e 64 69 72 2f 64 65 70 65 6e 64 2e 6d 61 6b 65     .dir/depend.make
    ceea:	0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45     ...Keyboards/ICE
    cefa:	44 2d 4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b     D-L/CMakeFiles/k
    cf0a:	69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f 66     iibohd.elf.dir/f
    cf1a:	6c 61 67 73 2e 6d 61 6b 65 0d 0a 09 4b 65 79 62     lags.make...Keyb
    cf2a:	6f 61 72 64 73 2f 49 43 45 44 2d 4c 2f 43 4d 61     oards/ICED-L/CMa
    cf3a:	6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e     keFiles/kiibohd.
    cf4a:	65 6c 66 2e 64 69 72 2f 6c 69 6e 6b 2e 74 78 74     elf.dir/link.txt
    cf5a:	0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45     ...Keyboards/ICE
    cf6a:	44 2d 4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b     D-L/CMakeFiles/k
    cf7a:	69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f 6d     iibohd.elf.dir/m
    cf8a:	61 69 6e 2e 63 2e 64 0d 0a 09 4b 65 79 62 6f 61     ain.c.d...Keyboa
    cf9a:	72 64 73 2f 49 43 45 44 2d 4c 2f 43 4d 61 6b 65     rds/ICED-L/CMake
    cfaa:	46 69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e 65 6c     Files/kiibohd.el
    cfba:	66 2e 64 69 72 2f 6d 61 69 6e 2e 63 2e 6f 0d 0a     f.dir/main.c.o..
    cfca:	09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d     .Keyboards/ICED-
    cfda:	4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69     L/CMakeFiles/kii
    cfea:	62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f 70 72 6f     bohd.elf.dir/pro
    cffa:	67 72 65 73 73 2e 6d 61 6b 65 0d 0a 09 4b 65 79     gress.make...Key
    d00a:	62 6f 61 72 64 73 2f 49 43 45 44 2d 4c 2f 43 4d     boards/ICED-L/CM
    d01a:	61 6b 65 46 69 6c 65 73 2f 6b 6c 6c 5f 72 65 67     akeFiles/kll_reg
    d02a:	65 6e 2e 64 69 72 2f 44 65 70 65 6e 64 49 6e 66     en.dir/DependInf
    d03a:	6f 2e 63 6d 61 6b 65 0d 0a 09 4b 65 79 62 6f 61     o.cmake...Keyboa
    d04a:	72 64 73 2f 49 43 45 44 2d 4c 2f 43 4d 61 6b 65     rds/ICED-L/CMake
    d05a:	46 69 6c 65 73 2f 6b 6c 6c 5f 72 65 67 65 6e 2e     Files/kll_regen.
    d06a:	64 69 72 2f 62 75 69 6c 64 2e 6d 61 6b 65 0d 0a     dir/build.make..
    d07a:	09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d     .Keyboards/ICED-
    d08a:	4c 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b 6c 6c     L/CMakeFiles/kll
    d09a:	5f 72 65 67 65 6e 2e 64 69 72 2f 63 6d 61 6b 65     _regen.dir/cmake
    d0aa:	5f 63 6c 65 61 6e 2e 63 6d 61 6b 65 0d 0a 09 4b     _clean.cmake...K
    d0ba:	65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 4c 2f     eyboards/ICED-L/
    d0ca:	43 4d 61 6b 65 46 69 6c 65 73 2f 6b 6c 6c 5f 72     CMakeFiles/kll_r
    d0da:	65 67 65 6e 2e 64 69 72 2f 70 72 6f 67 72 65 73     egen.dir/progres
    d0ea:	73 2e 6d 61 6b 65 0d 0a 09 4b 65 79 62 6f 61 72     s.make...Keyboar
    d0fa:	64 73 2f 49 43 45 44 2d 4c 2f 43 4d 61 6b 65 46     ds/ICED-L/CMakeF
    d10a:	69 6c 65 73 2f 70 72 6f 67 72 65 73 73 2e 6d 61     iles/progress.ma
    d11a:	72 6b 73 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f     rks...Keyboards/
    d12a:	49 43 45 44 2d 4c 2f 4d 61 6b 65 66 69 6c 65 0d     ICED-L/Makefile.
    d13a:	0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44     ..Keyboards/ICED
    d14a:	2d 4c 2f 62 75 69 6c 64 76 61 72 73 2e 68 0d 0a     -L/buildvars.h..
    d15a:	09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d     .Keyboards/ICED-
    d16a:	4c 2f 63 6d 61 6b 65 5f 69 6e 73 74 61 6c 6c 2e     L/cmake_install.
    d17a:	63 6d 61 6b 65 0d 0a 09 4b 65 79 62 6f 61 72 64     cmake...Keyboard
    d18a:	73 2f 49 43 45 44 2d 4c 2f 63 6f 6d 70 69 6c 65     s/ICED-L/compile
    d19a:	5f 63 6f 6d 6d 61 6e 64 73 2e 6a 73 6f 6e 0d 0a     _commands.json..
    d1aa:	09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d     .Keyboards/ICED-
    d1ba:	4c 2f 63 6f 6d 70 69 6c 65 72 0d 0a 09 4b 65 79     L/compiler...Key
    d1ca:	62 6f 61 72 64 73 2f 49 43 45 44 2d 4c 2f 67 65     boards/ICED-L/ge
    d1da:	6e 65 72 61 74 65 64 4b 65 79 6d 61 70 2e 68 0d     neratedKeymap.h.
    d1ea:	0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44     ..Keyboards/ICED
    d1fa:	2d 4c 2f 6b 69 69 62 6f 68 64 2e 64 66 75 2e 62     -L/kiibohd.dfu.b
    d20a:	69 6e 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49     in...Keyboards/I
    d21a:	43 45 44 2d 4c 2f 6b 69 69 62 6f 68 64 2e 65 6c     CED-L/kiibohd.el
    d22a:	66 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43     f...Keyboards/IC
    d23a:	45 44 2d 4c 2f 6b 69 69 62 6f 68 64 2e 6c 73 73     ED-L/kiibohd.lss
    d24a:	0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45     ...Keyboards/ICE
    d25a:	44 2d 4c 2f 6b 69 69 62 6f 68 64 2e 73 79 6d 0d     D-L/kiibohd.sym.
    d26a:	0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44     ..Keyboards/ICED
    d27a:	2d 4c 2f 6b 6c 6c 5f 64 65 66 73 2e 68 0d 0a 09     -L/kll_defs.h...
    d28a:	4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 4c     Keyboards/ICED-L
    d29a:	2f 6c 69 6e 6b 2e 6d 61 70 0d 0a 09 4b 65 79 62     /link.map...Keyb
    d2aa:	6f 61 72 64 73 2f 49 43 45 44 2d 4c 2f 6c 6f 61     oards/ICED-L/loa
    d2ba:	64 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43     d...Keyboards/IC
    d2ca:	45 44 2d 52 2f 43 4d 61 6b 65 43 61 63 68 65 2e     ED-R/CMakeCache.
    d2da:	74 78 74 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f     txt...Keyboards/
    d2ea:	49 43 45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c 65     ICED-R/CMakeFile
    d2fa:	73 2f 33 2e 33 2e 31 2f 43 4d 61 6b 65 43 43 6f     s/3.3.1/CMakeCCo
    d30a:	6d 70 69 6c 65 72 2e 63 6d 61 6b 65 0d 0a 09 4b     mpiler.cmake...K
    d31a:	65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 52 2f     eyboards/ICED-R/
    d32a:	43 4d 61 6b 65 46 69 6c 65 73 2f 33 2e 33 2e 31     CMakeFiles/3.3.1
    d33a:	2f 43 4d 61 6b 65 43 58 58 43 6f 6d 70 69 6c 65     /CMakeCXXCompile
    d34a:	72 2e 63 6d 61 6b 65 0d 0a 09 4b 65 79 62 6f 61     r.cmake...Keyboa
    d35a:	72 64 73 2f 49 43 45 44 2d 52 2f 43 4d 61 6b 65     rds/ICED-R/CMake
    d36a:	46 69 6c 65 73 2f 33 2e 33 2e 31 2f 43 4d 61 6b     Files/3.3.1/CMak
    d37a:	65 53 79 73 74 65 6d 2e 63 6d 61 6b 65 0d 0a 09     eSystem.cmake...
    d38a:	4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 52     Keyboards/ICED-R
    d39a:	2f 43 4d 61 6b 65 46 69 6c 65 73 2f 43 4d 61 6b     /CMakeFiles/CMak
    d3aa:	65 44 69 72 65 63 74 6f 72 79 49 6e 66 6f 72 6d     eDirectoryInform
    d3ba:	61 74 69 6f 6e 2e 63 6d 61 6b 65 0d 0a 09 4b 65     ation.cmake...Ke
    d3ca:	79 62 6f 61 72 64 73 2f 49 43 45 44 2d 52 2f 43     yboards/ICED-R/C
    d3da:	4d 61 6b 65 46 69 6c 65 73 2f 43 4d 61 6b 65 4f     MakeFiles/CMakeO
    d3ea:	75 74 70 75 74 2e 6c 6f 67 0d 0a 09 4b 65 79 62     utput.log...Keyb
    d3fa:	6f 61 72 64 73 2f 49 43 45 44 2d 52 2f 43 4d 61     oards/ICED-R/CMa
    d40a:	6b 65 46 69 6c 65 73 2f 43 4d 61 6b 65 52 75 6c     keFiles/CMakeRul
    d41a:	65 48 61 73 68 65 73 2e 74 78 74 0d 0a 09 4b 65     eHashes.txt...Ke
    d42a:	79 62 6f 61 72 64 73 2f 49 43 45 44 2d 52 2f 43     yboards/ICED-R/C
    d43a:	4d 61 6b 65 46 69 6c 65 73 2f 4d 61 6b 65 66 69     MakeFiles/Makefi
    d44a:	6c 65 2e 63 6d 61 6b 65 0d 0a 09 4b 65 79 62 6f     le.cmake...Keybo
    d45a:	61 72 64 73 2f 49 43 45 44 2d 52 2f 43 4d 61 6b     ards/ICED-R/CMak
    d46a:	65 46 69 6c 65 73 2f 4d 61 6b 65 66 69 6c 65 32     eFiles/Makefile2
    d47a:	0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45     ...Keyboards/ICE
    d48a:	44 2d 52 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 53     D-R/CMakeFiles/S
    d49a:	69 7a 65 41 66 74 65 72 2e 64 69 72 2f 44 65 70     izeAfter.dir/Dep
    d4aa:	65 6e 64 49 6e 66 6f 2e 63 6d 61 6b 65 0d 0a 09     endInfo.cmake...
    d4ba:	4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 52     Keyboards/ICED-R
    d4ca:	2f 43 4d 61 6b 65 46 69 6c 65 73 2f 53 69 7a 65     /CMakeFiles/Size
    d4da:	41 66 74 65 72 2e 64 69 72 2f 62 75 69 6c 64 2e     After.dir/build.
    d4ea:	6d 61 6b 65 0d 0a 09 4b 65 79 62 6f 61 72 64 73     make...Keyboards
    d4fa:	2f 49 43 45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c     /ICED-R/CMakeFil
    d50a:	65 73 2f 53 69 7a 65 41 66 74 65 72 2e 64 69 72     es/SizeAfter.dir
    d51a:	2f 63 6d 61 6b 65 5f 63 6c 65 61 6e 2e 63 6d 61     /cmake_clean.cma
    d52a:	6b 65 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49     ke...Keyboards/I
    d53a:	43 45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c 65 73     CED-R/CMakeFiles
    d54a:	2f 53 69 7a 65 41 66 74 65 72 2e 64 69 72 2f 64     /SizeAfter.dir/d
    d55a:	65 70 65 6e 64 2e 69 6e 74 65 72 6e 61 6c 0d 0a     epend.internal..
    d56a:	09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d     .Keyboards/ICED-
    d57a:	52 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 53 69 7a     R/CMakeFiles/Siz
    d58a:	65 41 66 74 65 72 2e 64 69 72 2f 64 65 70 65 6e     eAfter.dir/depen
    d59a:	64 2e 6d 61 6b 65 0d 0a 09 4b 65 79 62 6f 61 72     d.make...Keyboar
    d5aa:	64 73 2f 49 43 45 44 2d 52 2f 43 4d 61 6b 65 46     ds/ICED-R/CMakeF
    d5ba:	69 6c 65 73 2f 53 69 7a 65 41 66 74 65 72 2e 64     iles/SizeAfter.d
    d5ca:	69 72 2f 70 72 6f 67 72 65 73 73 2e 6d 61 6b 65     ir/progress.make
    d5da:	0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45     ...Keyboards/ICE
    d5ea:	44 2d 52 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 54     D-R/CMakeFiles/T
    d5fa:	61 72 67 65 74 44 69 72 65 63 74 6f 72 69 65 73     argetDirectories
    d60a:	2e 74 78 74 0d 0a 09 4b 65 79 62 6f 61 72 64 73     .txt...Keyboards
    d61a:	2f 49 43 45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c     /ICED-R/CMakeFil
    d62a:	65 73 2f 63 6d 61 6b 65 2e 63 68 65 63 6b 5f 63     es/cmake.check_c
    d63a:	61 63 68 65 0d 0a 09 4b 65 79 62 6f 61 72 64 73     ache...Keyboards
    d64a:	2f 49 43 45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c     /ICED-R/CMakeFil
    d65a:	65 73 2f 6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64     es/kiibohd.elf.d
    d66a:	69 72 2f 43 2e 69 6e 63 6c 75 64 65 63 61 63 68     ir/C.includecach
    d67a:	65 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43     e...Keyboards/IC
    d68a:	45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c 65 73 2f     ED-R/CMakeFiles/
    d69a:	6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f     kiibohd.elf.dir/
    d6aa:	44 65 62 75 67 2f 63 6c 69 2f 63 6c 69 2e 63 2e     Debug/cli/cli.c.
    d6ba:	64 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43     d...Keyboards/IC
    d6ca:	45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c 65 73 2f     ED-R/CMakeFiles/
    d6da:	6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f     kiibohd.elf.dir/
    d6ea:	44 65 62 75 67 2f 63 6c 69 2f 63 6c 69 2e 63 2e     Debug/cli/cli.c.
    d6fa:	6f 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43     o...Keyboards/IC
    d70a:	45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c 65 73 2f     ED-R/CMakeFiles/
    d71a:	6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f     kiibohd.elf.dir/
    d72a:	44 65 62 75 67 2f 6c 65 64 2f 6c 65 64 2e 63 2e     Debug/led/led.c.
    d73a:	64 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43     d...Keyboards/IC
    d74a:	45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c 65 73 2f     ED-R/CMakeFiles/
    d75a:	6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f     kiibohd.elf.dir/
    d76a:	44 65 62 75 67 2f 6c 65 64 2f 6c 65 64 2e 63 2e     Debug/led/led.c.
    d77a:	6f 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43     o...Keyboards/IC
    d78a:	45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c 65 73 2f     ED-R/CMakeFiles/
    d79a:	6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f     kiibohd.elf.dir/
    d7aa:	44 65 62 75 67 2f 70 72 69 6e 74 2f 70 72 69 6e     Debug/print/prin
    d7ba:	74 2e 63 2e 64 0d 0a 09 4b 65 79 62 6f 61 72 64     t.c.d...Keyboard
    d7ca:	73 2f 49 43 45 44 2d 52 2f 43 4d 61 6b 65 46 69     s/ICED-R/CMakeFi
    d7da:	6c 65 73 2f 6b 69 69 62 6f 68 64 2e 65 6c 66 2e     les/kiibohd.elf.
    d7ea:	64 69 72 2f 44 65 62 75 67 2f 70 72 69 6e 74 2f     dir/Debug/print/
    d7fa:	70 72 69 6e 74 2e 63 2e 6f 0d 0a 09 4b 65 79 62     print.c.o...Keyb
    d80a:	6f 61 72 64 73 2f 49 43 45 44 2d 52 2f 43 4d 61     oards/ICED-R/CMa
    d81a:	6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e     keFiles/kiibohd.
    d82a:	65 6c 66 2e 64 69 72 2f 44 65 70 65 6e 64 49 6e     elf.dir/DependIn
    d83a:	66 6f 2e 63 6d 61 6b 65 0d 0a 09 4b 65 79 62 6f     fo.cmake...Keybo
    d84a:	61 72 64 73 2f 49 43 45 44 2d 52 2f 43 4d 61 6b     ards/ICED-R/CMak
    d85a:	65 46 69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e 65     eFiles/kiibohd.e
    d86a:	6c 66 2e 64 69 72 2f 4c 69 62 2f 64 65 6c 61 79     lf.dir/Lib/delay
    d87a:	2e 63 2e 64 0d 0a 09 4b 65 79 62 6f 61 72 64 73     .c.d...Keyboards
    d88a:	2f 49 43 45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c     /ICED-R/CMakeFil
    d89a:	65 73 2f 6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64     es/kiibohd.elf.d
    d8aa:	69 72 2f 4c 69 62 2f 64 65 6c 61 79 2e 63 2e 6f     ir/Lib/delay.c.o
    d8ba:	0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45     ...Keyboards/ICE
    d8ca:	44 2d 52 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b     D-R/CMakeFiles/k
    d8da:	69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f 4c     iibohd.elf.dir/L
    d8ea:	69 62 2f 6d 6b 32 30 64 78 2e 63 2e 64 0d 0a 09     ib/mk20dx.c.d...
    d8fa:	4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 52     Keyboards/ICED-R
    d90a:	2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69 62     /CMakeFiles/kiib
    d91a:	6f 68 64 2e 65 6c 66 2e 64 69 72 2f 4c 69 62 2f     ohd.elf.dir/Lib/
    d92a:	6d 6b 32 30 64 78 2e 63 2e 6f 0d 0a 09 4b 65 79     mk20dx.c.o...Key
    d93a:	62 6f 61 72 64 73 2f 49 43 45 44 2d 52 2f 43 4d     boards/ICED-R/CM
    d94a:	61 6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f 68 64     akeFiles/kiibohd
    d95a:	2e 65 6c 66 2e 64 69 72 2f 4d 61 63 72 6f 2f 50     .elf.dir/Macro/P
    d96a:	61 72 74 69 61 6c 4d 61 70 2f 6d 61 63 72 6f 2e     artialMap/macro.
    d97a:	63 2e 64 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f     c.d...Keyboards/
    d98a:	49 43 45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c 65     ICED-R/CMakeFile
    d99a:	73 2f 6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69     s/kiibohd.elf.di
    d9aa:	72 2f 4d 61 63 72 6f 2f 50 61 72 74 69 61 6c 4d     r/Macro/PartialM
    d9ba:	61 70 2f 6d 61 63 72 6f 2e 63 2e 6f 0d 0a 09 4b     ap/macro.c.o...K
    d9ca:	65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 52 2f     eyboards/ICED-R/
    d9da:	43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f     CMakeFiles/kiibo
    d9ea:	68 64 2e 65 6c 66 2e 64 69 72 2f 4d 61 63 72 6f     hd.elf.dir/Macro
    d9fa:	2f 50 61 72 74 69 61 6c 4d 61 70 2f 72 65 73 75     /PartialMap/resu
    da0a:	6c 74 2e 63 2e 64 0d 0a 09 4b 65 79 62 6f 61 72     lt.c.d...Keyboar
    da1a:	64 73 2f 49 43 45 44 2d 52 2f 43 4d 61 6b 65 46     ds/ICED-R/CMakeF
    da2a:	69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e 65 6c 66     iles/kiibohd.elf
    da3a:	2e 64 69 72 2f 4d 61 63 72 6f 2f 50 61 72 74 69     .dir/Macro/Parti
    da4a:	61 6c 4d 61 70 2f 72 65 73 75 6c 74 2e 63 2e 6f     alMap/result.c.o
    da5a:	0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45     ...Keyboards/ICE
    da6a:	44 2d 52 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b     D-R/CMakeFiles/k
    da7a:	69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f 4d     iibohd.elf.dir/M
    da8a:	61 63 72 6f 2f 50 61 72 74 69 61 6c 4d 61 70 2f     acro/PartialMap/
    da9a:	74 72 69 67 67 65 72 2e 63 2e 64 0d 0a 09 4b 65     trigger.c.d...Ke
    daaa:	79 62 6f 61 72 64 73 2f 49 43 45 44 2d 52 2f 43     yboards/ICED-R/C
    daba:	4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f 68     MakeFiles/kiiboh
    daca:	64 2e 65 6c 66 2e 64 69 72 2f 4d 61 63 72 6f 2f     d.elf.dir/Macro/
    dada:	50 61 72 74 69 61 6c 4d 61 70 2f 74 72 69 67 67     PartialMap/trigg
    daea:	65 72 2e 63 2e 6f 0d 0a 09 4b 65 79 62 6f 61 72     er.c.o...Keyboar
    dafa:	64 73 2f 49 43 45 44 2d 52 2f 43 4d 61 6b 65 46     ds/ICED-R/CMakeF
    db0a:	69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e 65 6c 66     iles/kiibohd.elf
    db1a:	2e 64 69 72 2f 4f 75 74 70 75 74 2f 70 6a 72 63     .dir/Output/pjrc
    db2a:	55 53 42 2f 61 72 6d 2f 75 73 62 5f 64 65 73 63     USB/arm/usb_desc
    db3a:	2e 63 2e 64 0d 0a 09 4b 65 79 62 6f 61 72 64 73     .c.d...Keyboards
    db4a:	2f 49 43 45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c     /ICED-R/CMakeFil
    db5a:	65 73 2f 6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64     es/kiibohd.elf.d
    db6a:	69 72 2f 4f 75 74 70 75 74 2f 70 6a 72 63 55 53     ir/Output/pjrcUS
    db7a:	42 2f 61 72 6d 2f 75 73 62 5f 64 65 73 63 2e 63     B/arm/usb_desc.c
    db8a:	2e 6f 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49     .o...Keyboards/I
    db9a:	43 45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c 65 73     CED-R/CMakeFiles
    dbaa:	2f 6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72     /kiibohd.elf.dir
    dbba:	2f 4f 75 74 70 75 74 2f 70 6a 72 63 55 53 42 2f     /Output/pjrcUSB/
    dbca:	61 72 6d 2f 75 73 62 5f 64 65 76 2e 63 2e 64 0d     arm/usb_dev.c.d.
    dbda:	0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44     ..Keyboards/ICED
    dbea:	2d 52 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69     -R/CMakeFiles/ki
    dbfa:	69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f 4f 75     ibohd.elf.dir/Ou
    dc0a:	74 70 75 74 2f 70 6a 72 63 55 53 42 2f 61 72 6d     tput/pjrcUSB/arm
    dc1a:	2f 75 73 62 5f 64 65 76 2e 63 2e 6f 0d 0a 09 4b     /usb_dev.c.o...K
    dc2a:	65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 52 2f     eyboards/ICED-R/
    dc3a:	43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f     CMakeFiles/kiibo
    dc4a:	68 64 2e 65 6c 66 2e 64 69 72 2f 4f 75 74 70 75     hd.elf.dir/Outpu
    dc5a:	74 2f 70 6a 72 63 55 53 42 2f 61 72 6d 2f 75 73     t/pjrcUSB/arm/us
    dc6a:	62 5f 6a 6f 79 73 74 69 63 6b 2e 63 2e 64 0d 0a     b_joystick.c.d..
    dc7a:	09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d     .Keyboards/ICED-
    dc8a:	52 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69     R/CMakeFiles/kii
    dc9a:	62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f 4f 75 74     bohd.elf.dir/Out
    dcaa:	70 75 74 2f 70 6a 72 63 55 53 42 2f 61 72 6d 2f     put/pjrcUSB/arm/
    dcba:	75 73 62 5f 6a 6f 79 73 74 69 63 6b 2e 63 2e 6f     usb_joystick.c.o
    dcca:	0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45     ...Keyboards/ICE
    dcda:	44 2d 52 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b     D-R/CMakeFiles/k
    dcea:	69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f 4f     iibohd.elf.dir/O
    dcfa:	75 74 70 75 74 2f 70 6a 72 63 55 53 42 2f 61 72     utput/pjrcUSB/ar
    dd0a:	6d 2f 75 73 62 5f 6b 65 79 62 6f 61 72 64 2e 63     m/usb_keyboard.c
    dd1a:	2e 64 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49     .d...Keyboards/I
    dd2a:	43 45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c 65 73     CED-R/CMakeFiles
    dd3a:	2f 6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72     /kiibohd.elf.dir
    dd4a:	2f 4f 75 74 70 75 74 2f 70 6a 72 63 55 53 42 2f     /Output/pjrcUSB/
    dd5a:	61 72 6d 2f 75 73 62 5f 6b 65 79 62 6f 61 72 64     arm/usb_keyboard
    dd6a:	2e 63 2e 6f 0d 0a 09 4b 65 79 62 6f 61 72 64 73     .c.o...Keyboards
    dd7a:	2f 49 43 45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c     /ICED-R/CMakeFil
    dd8a:	65 73 2f 6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64     es/kiibohd.elf.d
    dd9a:	69 72 2f 4f 75 74 70 75 74 2f 70 6a 72 63 55 53     ir/Output/pjrcUS
    ddaa:	42 2f 61 72 6d 2f 75 73 62 5f 6d 65 6d 2e 63 2e     B/arm/usb_mem.c.
    ddba:	64 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43     d...Keyboards/IC
    ddca:	45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c 65 73 2f     ED-R/CMakeFiles/
    ddda:	6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f     kiibohd.elf.dir/
    ddea:	4f 75 74 70 75 74 2f 70 6a 72 63 55 53 42 2f 61     Output/pjrcUSB/a
    ddfa:	72 6d 2f 75 73 62 5f 6d 65 6d 2e 63 2e 6f 0d 0a     rm/usb_mem.c.o..
    de0a:	09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d     .Keyboards/ICED-
    de1a:	52 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69     R/CMakeFiles/kii
    de2a:	62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f 4f 75 74     bohd.elf.dir/Out
    de3a:	70 75 74 2f 70 6a 72 63 55 53 42 2f 61 72 6d 2f     put/pjrcUSB/arm/
    de4a:	75 73 62 5f 6d 6f 75 73 65 2e 63 2e 64 0d 0a 09     usb_mouse.c.d...
    de5a:	4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 52     Keyboards/ICED-R
    de6a:	2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69 62     /CMakeFiles/kiib
    de7a:	6f 68 64 2e 65 6c 66 2e 64 69 72 2f 4f 75 74 70     ohd.elf.dir/Outp
    de8a:	75 74 2f 70 6a 72 63 55 53 42 2f 61 72 6d 2f 75     ut/pjrcUSB/arm/u
    de9a:	73 62 5f 6d 6f 75 73 65 2e 63 2e 6f 0d 0a 09 4b     sb_mouse.c.o...K
    deaa:	65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 52 2f     eyboards/ICED-R/
    deba:	43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f     CMakeFiles/kiibo
    deca:	68 64 2e 65 6c 66 2e 64 69 72 2f 4f 75 74 70 75     hd.elf.dir/Outpu
    deda:	74 2f 70 6a 72 63 55 53 42 2f 61 72 6d 2f 75 73     t/pjrcUSB/arm/us
    deea:	62 5f 73 65 72 69 61 6c 2e 63 2e 64 0d 0a 09 4b     b_serial.c.d...K
    defa:	65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 52 2f     eyboards/ICED-R/
    df0a:	43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f     CMakeFiles/kiibo
    df1a:	68 64 2e 65 6c 66 2e 64 69 72 2f 4f 75 74 70 75     hd.elf.dir/Outpu
    df2a:	74 2f 70 6a 72 63 55 53 42 2f 61 72 6d 2f 75 73     t/pjrcUSB/arm/us
    df3a:	62 5f 73 65 72 69 61 6c 2e 63 2e 6f 0d 0a 09 4b     b_serial.c.o...K
    df4a:	65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 52 2f     eyboards/ICED-R/
    df5a:	43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f     CMakeFiles/kiibo
    df6a:	68 64 2e 65 6c 66 2e 64 69 72 2f 4f 75 74 70 75     hd.elf.dir/Outpu
    df7a:	74 2f 70 6a 72 63 55 53 42 2f 6f 75 74 70 75 74     t/pjrcUSB/output
    df8a:	5f 63 6f 6d 2e 63 2e 64 0d 0a 09 4b 65 79 62 6f     _com.c.d...Keybo
    df9a:	61 72 64 73 2f 49 43 45 44 2d 52 2f 43 4d 61 6b     ards/ICED-R/CMak
    dfaa:	65 46 69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e 65     eFiles/kiibohd.e
    dfba:	6c 66 2e 64 69 72 2f 4f 75 74 70 75 74 2f 70 6a     lf.dir/Output/pj
    dfca:	72 63 55 53 42 2f 6f 75 74 70 75 74 5f 63 6f 6d     rcUSB/output_com
    dfda:	2e 63 2e 6f 0d 0a 09 4b 65 79 62 6f 61 72 64 73     .c.o...Keyboards
    dfea:	2f 49 43 45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c     /ICED-R/CMakeFil
    dffa:	65 73 2f 6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64     es/kiibohd.elf.d
    e00a:	69 72 2f 53 63 61 6e 2f 49 53 53 49 4c 65 64 2f     ir/Scan/ISSILed/
    e01a:	6c 65 64 5f 73 63 61 6e 2e 63 2e 64 0d 0a 09 4b     led_scan.c.d...K
    e02a:	65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 52 2f     eyboards/ICED-R/
    e03a:	43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f     CMakeFiles/kiibo
    e04a:	68 64 2e 65 6c 66 2e 64 69 72 2f 53 63 61 6e 2f     hd.elf.dir/Scan/
    e05a:	49 53 53 49 4c 65 64 2f 6c 65 64 5f 73 63 61 6e     ISSILed/led_scan
    e06a:	2e 63 2e 6f 0d 0a 09 4b 65 79 62 6f 61 72 64 73     .c.o...Keyboards
    e07a:	2f 49 43 45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c     /ICED-R/CMakeFil
    e08a:	65 73 2f 6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64     es/kiibohd.elf.d
    e09a:	69 72 2f 53 63 61 6e 2f 4d 44 45 72 67 6f 31 2d     ir/Scan/MDErgo1-
    e0aa:	43 75 73 74 6f 6d 4c 6f 67 6f 2f 73 63 61 6e 5f     CustomLogo/scan_
    e0ba:	6c 6f 6f 70 2e 63 2e 64 0d 0a 09 4b 65 79 62 6f     loop.c.d...Keybo
    e0ca:	61 72 64 73 2f 49 43 45 44 2d 52 2f 43 4d 61 6b     ards/ICED-R/CMak
    e0da:	65 46 69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e 65     eFiles/kiibohd.e
    e0ea:	6c 66 2e 64 69 72 2f 53 63 61 6e 2f 4d 44 45 72     lf.dir/Scan/MDEr
    e0fa:	67 6f 31 2d 43 75 73 74 6f 6d 4c 6f 67 6f 2f 73     go1-CustomLogo/s
    e10a:	63 61 6e 5f 6c 6f 6f 70 2e 63 2e 6f 0d 0a 09 4b     can_loop.c.o...K
    e11a:	65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 52 2f     eyboards/ICED-R/
    e12a:	43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f     CMakeFiles/kiibo
    e13a:	68 64 2e 65 6c 66 2e 64 69 72 2f 53 63 61 6e 2f     hd.elf.dir/Scan/
    e14a:	4d 61 74 72 69 78 41 52 4d 2f 6d 61 74 72 69 78     MatrixARM/matrix
    e15a:	5f 73 63 61 6e 2e 63 2e 64 0d 0a 09 4b 65 79 62     _scan.c.d...Keyb
    e16a:	6f 61 72 64 73 2f 49 43 45 44 2d 52 2f 43 4d 61     oards/ICED-R/CMa
    e17a:	6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e     keFiles/kiibohd.
    e18a:	65 6c 66 2e 64 69 72 2f 53 63 61 6e 2f 4d 61 74     elf.dir/Scan/Mat
    e19a:	72 69 78 41 52 4d 2f 6d 61 74 72 69 78 5f 73 63     rixARM/matrix_sc
    e1aa:	61 6e 2e 63 2e 6f 0d 0a 09 4b 65 79 62 6f 61 72     an.c.o...Keyboar
    e1ba:	64 73 2f 49 43 45 44 2d 52 2f 43 4d 61 6b 65 46     ds/ICED-R/CMakeF
    e1ca:	69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e 65 6c 66     iles/kiibohd.elf
    e1da:	2e 64 69 72 2f 53 63 61 6e 2f 53 54 4c 63 64 2f     .dir/Scan/STLcd/
    e1ea:	6c 63 64 5f 73 63 61 6e 2e 63 2e 64 0d 0a 09 4b     lcd_scan.c.d...K
    e1fa:	65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 52 2f     eyboards/ICED-R/
    e20a:	43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f     CMakeFiles/kiibo
    e21a:	68 64 2e 65 6c 66 2e 64 69 72 2f 53 63 61 6e 2f     hd.elf.dir/Scan/
    e22a:	53 54 4c 63 64 2f 6c 63 64 5f 73 63 61 6e 2e 63     STLcd/lcd_scan.c
    e23a:	2e 6f 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49     .o...Keyboards/I
    e24a:	43 45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c 65 73     CED-R/CMakeFiles
    e25a:	2f 6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72     /kiibohd.elf.dir
    e26a:	2f 53 63 61 6e 2f 55 41 52 54 43 6f 6e 6e 65 63     /Scan/UARTConnec
    e27a:	74 2f 63 6f 6e 6e 65 63 74 5f 73 63 61 6e 2e 63     t/connect_scan.c
    e28a:	2e 64 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49     .d...Keyboards/I
    e29a:	43 45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c 65 73     CED-R/CMakeFiles
    e2aa:	2f 6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72     /kiibohd.elf.dir
    e2ba:	2f 53 63 61 6e 2f 55 41 52 54 43 6f 6e 6e 65 63     /Scan/UARTConnec
    e2ca:	74 2f 63 6f 6e 6e 65 63 74 5f 73 63 61 6e 2e 63     t/connect_scan.c
    e2da:	2e 6f 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49     .o...Keyboards/I
    e2ea:	43 45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c 65 73     CED-R/CMakeFiles
    e2fa:	2f 6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72     /kiibohd.elf.dir
    e30a:	2f 62 75 69 6c 64 2e 6d 61 6b 65 0d 0a 09 4b 65     /build.make...Ke
    e31a:	79 62 6f 61 72 64 73 2f 49 43 45 44 2d 52 2f 43     yboards/ICED-R/C
    e32a:	4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f 68     MakeFiles/kiiboh
    e33a:	64 2e 65 6c 66 2e 64 69 72 2f 63 6d 61 6b 65 5f     d.elf.dir/cmake_
    e34a:	63 6c 65 61 6e 2e 63 6d 61 6b 65 0d 0a 09 4b 65     clean.cmake...Ke
    e35a:	79 62 6f 61 72 64 73 2f 49 43 45 44 2d 52 2f 43     yboards/ICED-R/C
    e36a:	4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f 68     MakeFiles/kiiboh
    e37a:	64 2e 65 6c 66 2e 64 69 72 2f 64 65 70 65 6e 64     d.elf.dir/depend
    e38a:	2e 69 6e 74 65 72 6e 61 6c 0d 0a 09 4b 65 79 62     .internal...Keyb
    e39a:	6f 61 72 64 73 2f 49 43 45 44 2d 52 2f 43 4d 61     oards/ICED-R/CMa
    e3aa:	6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f 68 64 2e     keFiles/kiibohd.
    e3ba:	65 6c 66 2e 64 69 72 2f 64 65 70 65 6e 64 2e 6d     elf.dir/depend.m
    e3ca:	61 6b 65 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f     ake...Keyboards/
    e3da:	49 43 45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c 65     ICED-R/CMakeFile
    e3ea:	73 2f 6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69     s/kiibohd.elf.di
    e3fa:	72 2f 66 6c 61 67 73 2e 6d 61 6b 65 0d 0a 09 4b     r/flags.make...K
    e40a:	65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 52 2f     eyboards/ICED-R/
    e41a:	43 4d 61 6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f     CMakeFiles/kiibo
    e42a:	68 64 2e 65 6c 66 2e 64 69 72 2f 6c 69 6e 6b 2e     hd.elf.dir/link.
    e43a:	74 78 74 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f     txt...Keyboards/
    e44a:	49 43 45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c 65     ICED-R/CMakeFile
    e45a:	73 2f 6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69     s/kiibohd.elf.di
    e46a:	72 2f 6d 61 69 6e 2e 63 2e 64 0d 0a 09 4b 65 79     r/main.c.d...Key
    e47a:	62 6f 61 72 64 73 2f 49 43 45 44 2d 52 2f 43 4d     boards/ICED-R/CM
    e48a:	61 6b 65 46 69 6c 65 73 2f 6b 69 69 62 6f 68 64     akeFiles/kiibohd
    e49a:	2e 65 6c 66 2e 64 69 72 2f 6d 61 69 6e 2e 63 2e     .elf.dir/main.c.
    e4aa:	6f 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43     o...Keyboards/IC
    e4ba:	45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c 65 73 2f     ED-R/CMakeFiles/
    e4ca:	6b 69 69 62 6f 68 64 2e 65 6c 66 2e 64 69 72 2f     kiibohd.elf.dir/
    e4da:	70 72 6f 67 72 65 73 73 2e 6d 61 6b 65 0d 0a 09     progress.make...
    e4ea:	4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 52     Keyboards/ICED-R
    e4fa:	2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b 6c 6c 5f     /CMakeFiles/kll_
    e50a:	72 65 67 65 6e 2e 64 69 72 2f 44 65 70 65 6e 64     regen.dir/Depend
    e51a:	49 6e 66 6f 2e 63 6d 61 6b 65 0d 0a 09 4b 65 79     Info.cmake...Key
    e52a:	62 6f 61 72 64 73 2f 49 43 45 44 2d 52 2f 43 4d     boards/ICED-R/CM
    e53a:	61 6b 65 46 69 6c 65 73 2f 6b 6c 6c 5f 72 65 67     akeFiles/kll_reg
    e54a:	65 6e 2e 64 69 72 2f 62 75 69 6c 64 2e 6d 61 6b     en.dir/build.mak
    e55a:	65 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43     e...Keyboards/IC
    e56a:	45 44 2d 52 2f 43 4d 61 6b 65 46 69 6c 65 73 2f     ED-R/CMakeFiles/
    e57a:	6b 6c 6c 5f 72 65 67 65 6e 2e 64 69 72 2f 63 6d     kll_regen.dir/cm
    e58a:	61 6b 65 5f 63 6c 65 61 6e 2e 63 6d 61 6b 65 0d     ake_clean.cmake.
    e59a:	0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44     ..Keyboards/ICED
    e5aa:	2d 52 2f 43 4d 61 6b 65 46 69 6c 65 73 2f 6b 6c     -R/CMakeFiles/kl
    e5ba:	6c 5f 72 65 67 65 6e 2e 64 69 72 2f 70 72 6f 67     l_regen.dir/prog
    e5ca:	72 65 73 73 2e 6d 61 6b 65 0d 0a 09 4b 65 79 62     ress.make...Keyb
    e5da:	6f 61 72 64 73 2f 49 43 45 44 2d 52 2f 43 4d 61     oards/ICED-R/CMa
    e5ea:	6b 65 46 69 6c 65 73 2f 70 72 6f 67 72 65 73 73     keFiles/progress
    e5fa:	2e 6d 61 72 6b 73 0d 0a 09 4b 65 79 62 6f 61 72     .marks...Keyboar
    e60a:	64 73 2f 49 43 45 44 2d 52 2f 4d 61 6b 65 66 69     ds/ICED-R/Makefi
    e61a:	6c 65 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49     le...Keyboards/I
    e62a:	43 45 44 2d 52 2f 62 75 69 6c 64 76 61 72 73 2e     CED-R/buildvars.
    e63a:	68 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43     h...Keyboards/IC
    e64a:	45 44 2d 52 2f 63 6d 61 6b 65 5f 69 6e 73 74 61     ED-R/cmake_insta
    e65a:	6c 6c 2e 63 6d 61 6b 65 0d 0a 09 4b 65 79 62 6f     ll.cmake...Keybo
    e66a:	61 72 64 73 2f 49 43 45 44 2d 52 2f 63 6f 6d 70     ards/ICED-R/comp
    e67a:	69 6c 65 5f 63 6f 6d 6d 61 6e 64 73 2e 6a 73 6f     ile_commands.jso
    e68a:	6e 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43     n...Keyboards/IC
    e69a:	45 44 2d 52 2f 63 6f 6d 70 69 6c 65 72 0d 0a 09     ED-R/compiler...
    e6aa:	4b 65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 52     Keyboards/ICED-R
    e6ba:	2f 67 65 6e 65 72 61 74 65 64 4b 65 79 6d 61 70     /generatedKeymap
    e6ca:	2e 68 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49     .h...Keyboards/I
    e6da:	43 45 44 2d 52 2f 6b 69 69 62 6f 68 64 2e 64 66     CED-R/kiibohd.df
    e6ea:	75 2e 62 69 6e 0d 0a 09 4b 65 79 62 6f 61 72 64     u.bin...Keyboard
    e6fa:	73 2f 49 43 45 44 2d 52 2f 6b 69 69 62 6f 68 64     s/ICED-R/kiibohd
    e70a:	2e 65 6c 66 0d 0a 09 4b 65 79 62 6f 61 72 64 73     .elf...Keyboards
    e71a:	2f 49 43 45 44 2d 52 2f 6b 69 69 62 6f 68 64 2e     /ICED-R/kiibohd.
    e72a:	6c 73 73 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f     lss...Keyboards/
    e73a:	49 43 45 44 2d 52 2f 6b 69 69 62 6f 68 64 2e 73     ICED-R/kiibohd.s
    e74a:	79 6d 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49     ym...Keyboards/I
    e75a:	43 45 44 2d 52 2f 6b 6c 6c 5f 64 65 66 73 2e 68     CED-R/kll_defs.h
    e76a:	0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 49 43 45     ...Keyboards/ICE
    e77a:	44 2d 52 2f 6c 69 6e 6b 2e 6d 61 70 0d 0a 09 4b     D-R/link.map...K
    e78a:	65 79 62 6f 61 72 64 73 2f 49 43 45 44 2d 52 2f     eyboards/ICED-R/
    e79a:	6c 6f 61 64 0d 0a 09 4b 65 79 62 6f 61 72 64 73     load...Keyboards
    e7aa:	2f 52 45 41 44 4d 45 2e 6d 61 72 6b 64 6f 77 6e     /README.markdown
    e7ba:	0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 65 72 67     ...Keyboards/erg
    e7ca:	6f 64 6f 78 2d 63 75 73 74 6f 6d 2e 62 61 73 68     odox-custom.bash
    e7da:	0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f 65 72 67     ...Keyboards/erg
    e7ea:	6f 64 6f 78 2e 62 61 73 68 0d 0a 09 4b 65 79 62     odox.bash...Keyb
    e7fa:	6f 61 72 64 73 2f 69 6e 66 69 6e 69 74 79 2e 62     oards/infinity.b
    e80a:	61 73 68 0d 0a 09 4b 65 79 62 6f 61 72 64 73 2f     ash...Keyboards/
    e81a:	74 65 6d 70 6c 61 74 65 2e 62 61 73 68 0d 0a 09     template.bash...
    e82a:	4b 65 79 62 6f 61 72 64 73 2f 77 68 69 74 65 66     Keyboards/whitef
    e83a:	6f 78 2e 62 61 73 68 0d 0a 09 52 45 41 44 4d 45     ox.bash...README
    e84a:	2e 6d 61 72 6b 64 6f 77 6e 0d 0a 09 52 45 41 44     .markdown...READ
    e85a:	4d 45 2e 6f 6c 64 2e 6d 61 72 6b 64 6f 77 6e 0d     ME.old.markdown.
    e86a:	0a 09 62 75 69 6c 64 61 6c 6c 2e 62 61 73 68 0d     ..buildall.bash.
    e87a:	0a 09 63 6f 6d 70 69 6c 65 5f 63 6f 6d 6d 61 6e     ..compile_comman
    e88a:	64 73 2e 6a 73 6f 6e 0d 0a 09 64 65 66 61 75 6c     ds.json...defaul
    e89a:	74 2e 70 6e 67 0d 0a 09 6b 6c 6c 0d 0a 00 20 1b     t.png...kll... .
    e8aa:	5b 31 6d 52 65 70 6f 20 4f 72 69 67 69 6e 3a 1b     [1mRepo Origin:.
    e8ba:	5b 30 6d 20 20 20 67 69 74 40 67 69 74 68 75 62     [0m   git@github
    e8ca:	2e 63 6f 6d 3a 62 77 76 6f 73 73 2f 65 72 67 6f     .com:bwvoss/ergo
    e8da:	64 6f 78 2d 66 69 72 6d 77 61 72 65 2e 67 69 74     dox-firmware.git
    e8ea:	0d 0a 00 20 1b 5b 31 6d 43 6f 6d 6d 69 74 20 44     ... .[1mCommit D
    e8fa:	61 74 65 3a 1b 5b 30 6d 20 20 20 32 30 31 36 2d     ate:.[0m   2016-
    e90a:	30 36 2d 30 31 20 31 39 3a 34 37 3a 31 31 20 2d     06-01 19:47:11 -
    e91a:	30 35 30 30 0d 0a 00 20 1b 5b 31 6d 43 6f 6d 6d     0500... .[1mComm
    e92a:	69 74 20 41 75 74 68 6f 72 3a 1b 5b 30 6d 20 42     it Author:.[0m B
    e93a:	65 6e 20 56 6f 73 73 20 3c 62 77 76 6f 73 73 40     en Voss <bwvoss@
    e94a:	67 6d 61 69 6c 2e 63 6f 6d 3e 0d 0a 00 20 1b 5b     gmail.com>... .[
    e95a:	31 6d 42 75 69 6c 64 20 44 61 74 65 3a 1b 5b 30     1mBuild Date:.[0
    e96a:	6d 20 20 20 20 32 30 31 36 2d 30 36 2d 30 31 20     m    2016-06-01 
    e97a:	32 30 3a 32 34 3a 35 30 20 2d 30 35 30 30 0d 0a     20:24:50 -0500..
    e98a:	00 20 1b 5b 31 6d 42 75 69 6c 64 20 4f 53 3a 1b     . .[1mBuild OS:.
    e99a:	5b 30 6d 20 20 20 20 20 20 44 61 72 77 69 6e 2d     [0m      Darwin-
    e9aa:	31 35 2e 35 2e 30 0d 0a 00 20 1b 5b 31 6d 41 72     15.5.0... .[1mAr
    e9ba:	63 68 69 74 65 63 74 75 72 65 3a 1b 5b 30 6d 20     chitecture:.[0m 
    e9ca:	20 61 72 6d 0d 0a 00 20 1b 5b 31 6d 43 68 69 70      arm... .[1mChip
    e9da:	3a 1b 5b 30 6d 20 20 20 20 20 20 20 20 20 20 6d     :.[0m          m
    e9ea:	6b 32 30 64 78 32 35 36 76 6c 68 37 0d 0a 00 20     k20dx256vlh7... 
    e9fa:	1b 5b 31 6d 43 50 55 3a 1b 5b 30 6d 20 20 20 20     .[1mCPU:.[0m    
    ea0a:	20 20 20 20 20 20 20 63 6f 72 74 65 78 2d 6d 34            cortex-m4
    ea1a:	0d 0a 00 20 1b 5b 31 6d 44 65 76 69 63 65 3a 1b     ... .[1mDevice:.
    ea2a:	5b 30 6d 20 20 20 20 20 20 20 20 4b 65 79 62 6f     [0m        Keybo
    ea3a:	61 72 64 0d 0a 00 20 1b 5b 31 6d 4d 6f 64 75 6c     ard... .[1mModul
    ea4a:	65 73 3a 1b 5b 30 6d 20 20 20 20 20 20 20 53 63     es:.[0m       Sc
    ea5a:	61 6e 28 4d 44 45 72 67 6f 31 2d 43 75 73 74 6f     an(MDErgo1-Custo
    ea6a:	6d 4c 6f 67 6f 29 20 4d 61 63 72 6f 28 50 61 72     mLogo) Macro(Par
    ea7a:	74 69 61 6c 4d 61 70 29 20 4f 75 74 70 75 74 28     tialMap) Output(
    ea8a:	70 6a 72 63 55 53 42 29 20 44 65 62 75 67 28 66     pjrcUSB) Debug(f
    ea9a:	75 6c 6c 29 0d 0a 00 20 1b 5b 31 6d 55 6e 69 71     ull)... .[1mUniq
    eaaa:	75 65 20 49 64 3a 1b 5b 30 6d 20 20 20 20 20 00     ue Id:.[0m     .
    eaba:	1b 5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20     .[1;32mINFO.[0m 
    eaca:	2d 20 48 65 78 20 64 65 62 75 67 20 6d 6f 64 65     - Hex debug mode
    eada:	20 64 69 73 61 62 6c 65 64 2e 2e 2e 0d 0a 00 1b      disabled.......
    eaea:	5b 31 3b 33 32 6d 49 4e 46 4f 1b 5b 30 6d 20 2d     [1;32mINFO.[0m -
    eafa:	20 48 65 78 20 64 65 62 75 67 20 6d 6f 64 65 20      Hex debug mode 
    eb0a:	65 6e 61 62 6c 65 64 2e 2e 2e 0d 0a 00 1b 5b 00     enabled.......[.
    eb1a:	31 3b 35 3b 33 31 00 45 52 52 4f 52 00 22 00 22     1;5;31.ERROR."."
    eb2a:	20 69 73 20 6e 6f 74 20 61 20 76 61 6c 69 64 20      is not a valid 
    eb3a:	63 6f 6d 6d 61 6e 64 2e 2e 2e 74 79 70 65 20 1b     command...type .
    eb4a:	5b 33 35 6d 68 65 6c 70 1b 5b 30 6d 00 1b 5b 31     [35mhelp.[0m..[1
    eb5a:	3b 35 3b 33 31 6d 45 52 52 4f 52 1b 5b 30 6d 20     ;5;31mERROR.[0m 
    eb6a:	2d 20 4d 61 78 20 6e 75 6d 62 65 72 20 6f 66 20     - Max number of 
    eb7a:	64 69 63 74 69 6f 6e 61 72 69 65 73 20 64 65 66     dictionaries def
    eb8a:	69 6e 65 64 20 61 6c 72 65 61 64 79 2e 2e 2e 0d     ined already....
    eb9a:	0a 00 1b 5b 32 4b 0d 00 1b 5b 31 3b 33 34 6d 3a     ...[2K...[1;34m:
    ebaa:	1b 5b 30 6d 20 00 1b 5b 31 3b 35 3b 33 31 6d 45     .[0m ..[1;5;31mE
    ebba:	52 52 4f 52 1b 5b 30 6d 20 2d 20 53 65 72 69 61     RROR.[0m - Seria
    ebca:	6c 20 6c 69 6e 65 20 62 75 66 66 65 72 20 69 73     l line buffer is
    ebda:	20 66 75 6c 6c 2c 20 64 72 6f 70 70 69 6e 67 20      full, dropping 
    ebea:	63 68 61 72 61 63 74 65 72 20 61 6e 64 20 72 65     character and re
    ebfa:	73 65 74 74 69 6e 67 2e 2e 2e 0d 0a 00 1b 5b 73     setting.......[s
    ec0a:	0d 0a 00 1b 5b 32 4b 00 1b 5b 75 00 08 20 08 00     ....[2K..[u.. ..
    ec1a:	63 6c 65 61 72 00 63 6c 69 44 65 62 75 67 00 68     clear.cliDebug.h
    ec2a:	65 6c 70 00 6c 65 64 00 72 65 6c 6f 61 64 00 72     elp.led.reload.r
    ec3a:	65 73 65 74 00 72 65 73 74 61 72 74 00 76 65 72     eset.restart.ver
    ec4a:	73 69 6f 6e 00                                      sion.

0000ec4f <resetCLIDict_DescEntry>:
    ec4f:	52 65 73 65 74 73 20 74 68 65 20 74 65 72 6d 69     Resets the termi
    ec5f:	6e 61 6c 20 62 61 63 6b 20 74 6f 20 69 6e 69 74     nal back to init
    ec6f:	69 61 6c 20 73 65 74 74 69 6e 67 73 2e 00 00 00     ial settings....
    ec7f:	00                                                  .

0000ec80 <basicCLIDict>:
    ec80:	1a ec 00 00 cd bc 00 00 09 74 00 00 20 ec 00 00     .........t.. ...
    ec90:	93 ed 00 00 e1 75 00 00 29 ec 00 00 6e bc 00 00     .....u..)...n...
    eca0:	45 74 00 00 2e ec 00 00 ec ec 00 00 f5 74 00 00     Et...........t..
    ecb0:	32 ec 00 00 df bc 00 00 15 74 00 00 39 ec 00 00     2........t..9...
    ecc0:	4f ec 00 00 39 74 00 00 3f ec 00 00 86 bc 00 00     O...9t..?.......
    ecd0:	09 75 00 00 47 ec 00 00 0a bd 00 00 0d 75 00 00     .u..G........u..
    ece0:	00 00 00 00 00 00 00 00 00 00 00 00                 ............

0000ecec <ledCLIDict_DescEntry>:
    ecec:	45 6e 61 62 6c 65 73 2f 44 69 73 61 62 6c 65 73     Enables/Disables
    ecfc:	20 69 6e 64 69 63 61 74 6f 72 20 4c 45 44 2e 20      indicator LED. 
    ed0c:	54 72 79 20 61 20 63 6f 75 70 6c 65 20 74 69 6d     Try a couple tim
    ed1c:	65 73 20 6a 75 73 74 20 69 6e 20 63 61 73 65 20     es just in case 
    ed2c:	74 68 65 20 4c 45 44 20 69 73 20 69 6e 20 61 6e     the LED is in an
    ed3c:	20 6f 64 64 20 73 74 61 74 65 2e 0d 0a 09 09 1b      odd state......
    ed4c:	5b 33 33 6d 57 61 72 6e 69 6e 67 1b 5b 30 6d 3a     [33mWarning.[0m:
    ed5c:	20 4d 61 79 20 61 64 76 65 72 73 65 6c 79 20 61      May adversely a
    ed6c:	66 66 65 63 74 20 73 6f 6d 65 20 6d 6f 64 75 6c     ffect some modul
    ed7c:	65 73 2e 2e 2e 00                                   es....

0000ed82 <basicCLIDictName>:
    ed82:	47 65 6e 65 72 61 6c 20 43 6f 6d 6d 61 6e 64 73     General Commands
    ed92:	00                                                  .

0000ed93 <cliDebugCLIDict_DescEntry>:
    ed93:	45 6e 61 62 6c 65 73 2f 44 69 73 61 62 6c 65 73     Enables/Disables
    eda3:	20 68 65 78 20 6f 75 74 70 75 74 20 6f 66 20 74      hex output of t
    edb3:	68 65 20 6d 6f 73 74 20 72 65 63 65 6e 74 20 63     he most recent c
    edc3:	6c 69 20 69 6e 70 75 74 2e 00 00 00 00              li input.....
